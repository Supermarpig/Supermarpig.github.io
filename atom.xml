<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cody Di Da Di</title>
  
  <subtitle>搭拉拉拉搭搭搭</subtitle>
  <link href="https://supermarpig.github.io/atom.xml" rel="self"/>
  
  <link href="https://supermarpig.github.io/"/>
  <updated>2023-06-14T07:19:21.378Z</updated>
  <id>https://supermarpig.github.io/</id>
  
  <author>
    <name>Cody</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sass 實現星空效果</title>
    <link href="https://supermarpig.github.io/2023/06/13/Sass-%E5%AF%A6%E7%8F%BE%E6%98%9F%E7%A9%BA%E6%95%88%E6%9E%9C/"/>
    <id>https://supermarpig.github.io/2023/06/13/Sass-%E5%AF%A6%E7%8F%BE%E6%98%9F%E7%A9%BA%E6%95%88%E6%9E%9C/</id>
    <published>2023-06-13T14:40:22.000Z</published>
    <updated>2023-06-14T07:19:21.378Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>練習 Sass 來實現星空的背景</p><p><a href="https://stars-nwzd88ccu-supermarpig.vercel.app/">實作的網址唷唷唷唷唷唷</a></p><span id="more"></span><hr><p>開始前 先創立一個 Html 及 SCSS 檔案</p><p>index.html &amp; stars.scss</p><blockquote><p>html 簡易代碼如下</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./stars.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layer1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layer2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layer3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Sass 星空<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>stars.scss 初始如下</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(ellipse at bottom, <span class="number">#1b2735</span> <span class="number">0%</span>, <span class="number">#090a0f</span> <span class="number">100%</span>);</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;lato&quot;</span>, sans-serif;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(white, <span class="number">#38495a</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: text;</span><br><span class="line">  -webkit-<span class="attribute">background-clip</span>: text;</span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>接下來開始來寫星星</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.layer1</span> &#123;</span><br><span class="line">  <span class="variable">$size</span>: <span class="number">100px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$size</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">$size</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f40</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">10vw</span> <span class="number">10vh</span> <span class="number">#fff</span>, <span class="number">20vw</span> <span class="number">20vh</span> <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一顆星星 出來了!!!!</p><p>當然這樣沒辦法變成滿螢幕的星星</p><p>但發現可以透過<code>box-shadow</code> 來控制星星數量 還有位置</p><p>所以可以寫一個<code>funtion</code>來處理星星</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//寫星星的function</span></span><br><span class="line"><span class="keyword">@function</span> getShadows(<span class="variable">$n</span>) &#123;</span><br><span class="line">  <span class="variable">$shadows</span>: <span class="string">&quot;#&#123;random(100)&#125;vw #&#123;random(100)&#125;vh #fff&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">2</span> through <span class="variable">$n</span> &#123;</span><br><span class="line">    <span class="variable">$shadows</span>: <span class="string">&quot;#&#123;$shadows&#125;,#&#123;random(100)&#125;vw #&#123;random(100)&#125;vh #fff&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@return</span> unquote(<span class="variable">$shadows</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把<code>box-shadow</code> 後面帶入 function : getShadows(1000); &lt;—————假設 1000 顆星星</p><p>這樣星星就出來啦~~</p><p>然後要做移動效果</p><p>開始寫一個動畫 把每顆星星往上移到螢幕外面</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> moveUp &#123;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">100vh</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在剛剛的<code>.layer1</code></p><p>加上 animation</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.layer1</span> &#123;</span><br><span class="line">  <span class="variable">$size</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$size</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">$size</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f40</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="built_in">getShadows</span>(<span class="variable">$count</span>);</span><br><span class="line">  <span class="attribute">animation</span>: moveUp <span class="number">100s</span> linear infinite; <span class="comment">//&lt;--------------------這邊</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>100S 可以寫成變數<code>$duration</code></p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.layer1</span> &#123;</span><br><span class="line">  <span class="variable">$size</span>: <span class="number">1px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$size</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">$size</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f40</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="built_in">getShadows</span>(<span class="variable">$count</span>);</span><br><span class="line">  <span class="attribute">animation</span>: moveUp <span class="variable">$duration</span> linear infinite;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這樣開始畫面就可以移動拉~~~</p><p>但是這樣還有個問題</p><p>就是畫面移開 下面就沒星星了</p><p><img src="https://github.com/Supermarpig/project/blob/main/Stars/img/messageImage_1686668904698.jpg?raw=true" alt="picc"></p><blockquote><p>所以可以在後面加一個<code>&amp;::after</code></p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&amp;<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$size</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="variable">$size</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: inherit;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inherit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下來這只是第一層星星<br>剛剛 html 還有其他 2、 3 層</p><p>所以可以用 for 迴圈來寫</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//循環每層的星星</span></span><br><span class="line"><span class="variable">$duration</span>: <span class="number">400s</span>;</span><br><span class="line"><span class="variable">$count</span>: <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> through <span class="number">3</span> &#123;</span><br><span class="line">  <span class="variable">$duration</span>: <span class="built_in">floor</span>(<span class="variable">$duration</span>/<span class="number">2</span>); <span class="comment">//每層星星時間差異</span></span><br><span class="line">  <span class="variable">$count</span>: <span class="built_in">floor</span>(<span class="variable">$count</span>/<span class="number">2</span>); <span class="comment">//每層星星數量差異</span></span><br><span class="line">  <span class="selector-class">.layer</span>#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line">    <span class="variable">$size</span>: #&#123;<span class="variable">$i</span>&#125;px;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$size</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">$size</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f40</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="built_in">getShadows</span>(<span class="variable">$count</span>);</span><br><span class="line">    <span class="attribute">animation</span>: moveUp <span class="variable">$duration</span> linear infinite;</span><br><span class="line">    &amp;<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="attribute">position</span>: fixed;</span><br><span class="line">      <span class="attribute">width</span>: <span class="variable">$size</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="variable">$size</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">100vh</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: inherit;</span><br><span class="line">      <span class="attribute">box-shadow</span>: inherit;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這樣就完成星空 SCSS</p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>少少的<code>code</code> 就可以完成星星<br>未來想增加層數星星 還可以修改 for 迴圈 輕鬆修改<br><img src="https://github.com/Supermarpig/project/blob/main/Stars/img/stars.gif?raw=true" alt="gif"></p><p><img src="https://media.tenor.com/3K6RXbI1NqoAAAAd/favorite-my.gif" alt="123"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;練習 Sass 來實現星空的背景&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://stars-nwzd88ccu-supermarpig.vercel.app/&quot;&gt;實作的網址唷唷唷唷唷唷&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="sass" scheme="https://supermarpig.github.io/categories/sass/"/>
    
    
    <category term="sass" scheme="https://supermarpig.github.io/tags/sass/"/>
    
    <category term="練習" scheme="https://supermarpig.github.io/tags/%E7%B7%B4%E7%BF%92/"/>
    
    <category term="星空" scheme="https://supermarpig.github.io/tags/%E6%98%9F%E7%A9%BA/"/>
    
    <category term="stars" scheme="https://supermarpig.github.io/tags/stars/"/>
    
  </entry>
  
  <entry>
    <title>git 常用語法</title>
    <link href="https://supermarpig.github.io/2023/05/31/git-%E5%B8%B8%E7%94%A8%E8%AA%9E%E6%B3%95/"/>
    <id>https://supermarpig.github.io/2023/05/31/git-%E5%B8%B8%E7%94%A8%E8%AA%9E%E6%B3%95/</id>
    <published>2023-05-31T08:50:22.000Z</published>
    <updated>2023-05-31T09:19:54.002Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一個簡單的 git 備忘單。</p><span id="more"></span><hr><table><thead><tr><th align="center">分類</th><th align="center">指令</th><th align="center">說明</th></tr></thead><tbody><tr><td align="center">基本操作</td><td align="center">git init</td><td align="center">在目錄中初始化新的git儲存庫</td></tr><tr><td align="center"></td><td align="center">git clone [url]</td><td align="center">從遠端儲存庫複製一份儲存庫</td></tr><tr><td align="center"></td><td align="center">git add [file]</td><td align="center">將檔案或變更加入暫存區</td></tr><tr><td align="center"></td><td align="center">git commit -m [msg]</td><td align="center">將暫存區的變更提交到本地儲存庫，並加上提交訊息</td></tr><tr><td align="center"></td><td align="center">git push</td><td align="center">將本地儲存庫的變更推送到遠端儲存庫</td></tr><tr><td align="center"></td><td align="center">git pull</td><td align="center">從遠端儲存庫拉取最新變更並合併到本地儲存庫</td></tr><tr><td align="center">分支管理</td><td align="center">git branch</td><td align="center">列出所有本地分支</td></tr><tr><td align="center"></td><td align="center">git branch -a</td><td align="center">列出所有本地和遠端分支</td></tr><tr><td align="center"></td><td align="center">git checkout [branch]</td><td align="center">切換到指定的分支</td></tr><tr><td align="center"></td><td align="center">git checkout -b [branch]</td><td align="center">創建新的分支並切換到該分支</td></tr><tr><td align="center"></td><td align="center">git merge [branch]</td><td align="center">將指定分支的變更合併到當前分支</td></tr><tr><td align="center">版本控制</td><td align="center">git log</td><td align="center">顯示提交歷史記錄</td></tr><tr><td align="center"></td><td align="center">git log –oneline</td><td align="center">以單行形式顯示簡潔的提交歷史記錄</td></tr><tr><td align="center"></td><td align="center">git log -2</td><td align="center">顯示最近兩個提交的歷史記錄</td></tr><tr><td align="center"></td><td align="center">git log -p -2</td><td align="center">顯示最近兩個提交的歷史記錄並顯示變更的差異</td></tr><tr><td align="center"></td><td align="center">git diff</td><td align="center">顯示當前變更與上次提交之間的差異</td></tr><tr><td align="center"></td><td align="center">git diff [commit1] [commit2]</td><td align="center">顯示兩個提交之間的差異</td></tr><tr><td align="center">標籤操作</td><td align="center">git tag</td><td align="center">列出或創建標籤</td></tr><tr><td align="center"></td><td align="center">git tag [tag_name]</td><td align="center">創建一個新的標籤並指定名稱</td></tr><tr><td align="center">清理操作</td><td align="center">git clean</td><td align="center">清理工作區中未追蹤的檔案和目錄</td></tr><tr><td align="center"></td><td align="center">git gc</td><td align="center">優化和清理 git儲存庫</td></tr><tr><td align="center">其他操作</td><td align="center">git remote</td><td align="center">顯示遠端儲存庫的名稱</td></tr><tr><td align="center"></td><td align="center">git remote -v</td><td align="center">顯示遠端儲存庫的名稱和URL</td></tr><tr><td align="center"></td><td align="center">git config</td><td align="center">設定和管理</td></tr><tr><td align="center"></td><td align="center">git help [command]</td><td align="center">獲取特定git指令的幫助信息</td></tr></tbody></table><hr><p>以上是常用的git 整理</p><p>還有更多的語法</p><blockquote><p>可以使用   <code>git help [指令]</code>  來查閱更詳細的資訊</p></blockquote><p>有錯誤請告知</p><p>謝謝</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一個簡單的 git 備忘單。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>重新學習TS-五-TypeScript-Class</title>
    <link href="https://supermarpig.github.io/2023/05/30/%E9%87%8D%E6%96%B0%E5%AD%B8%E7%BF%92TS-%E4%BA%94-TypeScript-Class/"/>
    <id>https://supermarpig.github.io/2023/05/30/%E9%87%8D%E6%96%B0%E5%AD%B8%E7%BF%92TS-%E4%BA%94-TypeScript-Class/</id>
    <published>2023-05-30T13:39:00.000Z</published>
    <updated>2023-05-31T07:55:16.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天來研究研究 TS 中 Class 的細節</p><p><img src="https://media.tenor.com/ISfg1epIVZ0AAAAM/funny-smile.gif" alt="gif"></p><span id="more"></span><hr><h2 id="Class-是什麼"><a href="#Class-是什麼" class="headerlink" title="Class 是什麼?"></a>Class 是什麼?</h2><p>在<code>TypeScript</code>(TS) 中，<code>class </code>用於定義<code>物件導向</code>程式設計中的<code>類別</code>。與 <code>JavaScript</code> 相比，<code>TypeScript</code> 的 <code>class</code> 具有一些特別的功能和優點</p><ul><li>靜態類型檢查</li><li>封裝和訪問修飾詞</li><li>建構函式和初始化器</li><li>繼承和多型</li><li>抽象類別和介面</li><li>存取器（Accessors）</li></ul><table><thead><tr><th align="center">特點</th><th align="center">說明</th></tr></thead><tbody><tr><td align="center">靜態類型檢查</td><td align="center"><code>TypeScript</code> 提供強大的<code>型別檢查</code>，可在類別的<code>屬性</code>、<code>方法</code>和<code>建構函式</code>上聲明型別，以確保程式碼的正確性。</td></tr><tr><td align="center">封裝和訪問修飾詞</td><td align="center">使用訪問修飾詞（<code>public</code>、<code>private</code>、<code>protected</code>）來控制屬性和方法的可訪問性，確保只有適當的程式碼可以訪問和修改類別的內部狀態。</td></tr><tr><td align="center">建構函式和初始化器</td><td align="center">類別中的建構函式（<code>constructor</code>）在建立類別實例時被調用，可用於初始化屬性或執行其他必要的操作。</td></tr><tr><td align="center">繼承和多型</td><td align="center">類別可以透過繼承機制建立繼承關係，子類別可以繼承父類別的屬性和方法，並進行擴充和覆寫，提供程式碼的重用和組織的靈活性。</td></tr><tr><td align="center">抽象類別和介面</td><td align="center"><code>TypeScript</code> 支援抽象類別和介面的定義。抽象類別不能被<code>實例化</code>，但可以作為其他類別的基類，而介面定義了一組合約，類別可以實現這些介面以確保符合特定的結構。</td></tr><tr><td align="center">存取器（Accessors）</td><td align="center">使用 <code>get</code> 和 <code>set</code> 存取器來設置和獲取類別的<code>屬性值</code>，可對屬性的存取進行更多控制，例如執行額外的<code>邏輯</code>或<code>驗證</code>。</td></tr></tbody></table><h2 id="TypeScript-和-JavaScript-中-class-的差異"><a href="#TypeScript-和-JavaScript-中-class-的差異" class="headerlink" title="TypeScript 和 JavaScript 中 class 的差異"></a>TypeScript 和 JavaScript 中 class 的差異</h2><table><thead><tr><th align="center">功能</th><th align="center">TypeScript (TS)</th><th align="center">JavaScript (JS)</th></tr></thead><tbody><tr><td align="center">靜態型別檢查</td><td align="center">支援靜態型別檢查，可在編譯時檢測並捕獲許多錯誤。</td><td align="center">沒有內建的靜態型別檢查機制。</td></tr><tr><td align="center">型別註解和型別推斷</td><td align="center">可以聲明變數、函式和物件的型別，並且進行型別推斷。</td><td align="center">可以聲明變數的型別，但沒有內建的型別推斷機制。</td></tr><tr><td align="center">類別和模組</td><td align="center">支援類別和模組的原生語法，可使用 <code>class</code> 和 <code>module</code> 關鍵字。</td><td align="center">沒有內建的類別和模組語法，使用原型和函式進行物件導向編程。</td></tr><tr><td align="center">介面和抽象類別</td><td align="center">支援介面和抽象類別的定義，用於描述物件的結構和行為。</td><td align="center">沒有內建的介面和抽象類別語法，通常使用原型和函式來實現相似的功能。</td></tr><tr><td align="center">可選參數和預設參數</td><td align="center">可以將函式的參數設置為可選的 <code>?</code> 符號標記，並指定預設值。</td><td align="center">可以模擬可選參數和預設參數，但沒有內建的語法支援。</td></tr><tr><td align="center">存取修飾詞</td><td align="center">支援存取修飾詞（<code>public</code>、<code>private</code>、<code>protected</code>）來控制屬性和方法的訪問權限。</td><td align="center">沒有內建的存取修飾詞，所有屬性和方法都是公開的。</td></tr><tr><td align="center">繼承和多型</td><td align="center">支援類別之間的繼承關係，子類別可以繼承父類別的屬性和方法。</td><td align="center">支援原型鏈繼承，但沒有內建的語法支援類別之間的繼承。</td></tr><tr><td align="center">建構函式和初始化器</td><td align="center">可以在類別中定義建構函式（constructor），用於初始化</td><td align="center"></td></tr></tbody></table><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>定義類的關鍵字為<code>class</code>，後面緊跟類名，Class 可以包含以下幾個模塊（Class 的數據成員）：</p><ul><li><code>字段</code>： 字段是類裡面聲明的變量。字段表示對象的有關數據。</li><li><code>構造函數</code>： 類實例化時調用，可以為類的對象分配內存。</li><li><code>方法</code>： 方法為對像要執行的操作</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="comment">// 字段</span></span><br><span class="line">    <span class="attr">engine</span>:<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 構造函數</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">engine:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">engine</span> = engine</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="title function_">disp</span>():<span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;發動機是 :   &quot;</span>+<span class="variable language_">this</span>.<span class="property">engine</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="繼承"><a href="#繼承" class="headerlink" title="繼承"></a>繼承</h2><p><code>Class</code>的繼承使用過<code>extends</code>的關鍵字</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">move</span>(<span class="params">distanceInMeters: <span class="built_in">number</span> = <span class="number">0</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Animal moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Woof! Woof!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">dog.<span class="title function_">bark</span>();</span><br><span class="line">dog.<span class="title function_">move</span>(<span class="number">10</span>);</span><br><span class="line">dog.<span class="title function_">bark</span>();</span><br></pre></td></tr></table></figure><p><code>Dog</code>是一個派生類，它派生自 <code>Animal</code> 基類，派生類通常被稱作子類，基類通常被稱作超類</p><p><code>Dog</code>類繼承了 Animal 類，因此實例<code>dog</code>也能夠使用 Animal 類 move 方法</p><p>同樣，類繼承後，<code>子類</code>可以對<code>父類</code>的方法重新定義，這個過程稱之為<code>方法的重寫</code>，通過 <code>super</code> 關鍵字是對父類的直接引用，該關鍵字可以<code>引用父類的屬性和方法</code>，如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PrinterClass</span> &#123;</span><br><span class="line">   <span class="title function_">doPrint</span>():<span class="built_in">void</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;父類的 doPrint() 方法。&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StringPrinter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PrinterClass</span> &#123;</span><br><span class="line">   <span class="title function_">doPrint</span>():<span class="built_in">void</span> &#123;</span><br><span class="line">      <span class="variable language_">super</span>.<span class="title function_">doPrint</span>() <span class="comment">// 调用父類的函数</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子類的 doPrint()方法。&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修飾詞"><a href="#修飾詞" class="headerlink" title="修飾詞"></a>修飾詞</h2><p>可以看到，上述的形式跟<code>ES6</code>十分的相似，<code>typescript</code>在此基礎上添加了三種修飾詞 ：</p><ul><li><code>公共public</code>：可以自由的訪問類程序裡定義的成員</li><li><code>私有private</code>：只能夠在該類的內部進行訪問</li><li><code>受保護protect</code>：除了在該類的內部可以訪問，還可以在子類中仍然可以訪問</li></ul><h3 id="私有修飾詞"><a href="#私有修飾詞" class="headerlink" title="私有修飾詞"></a>私有修飾詞</h3><blockquote><p>只能夠在該類的內部進行訪問，實例對象並不能夠訪問</p></blockquote><p><img src="https://static.vue-js.com/f57365f0-0cb4-11ec-a752-75723a64e8f5.png" alt="pic"></p><p>並且繼承該類的子類並不能訪問，如下圖所示：</p><p><img src="https://static.vue-js.com/0072cc20-0cb5-11ec-8e64-91fdec0f05a1.png" alt="pic"></p><h3 id="受保護修飾詞"><a href="#受保護修飾詞" class="headerlink" title="受保護修飾詞"></a>受保護修飾詞</h3><blockquote><p>跟私有修飾詞很相似，實例對象同樣不能訪問受保護的屬性，如下：</p></blockquote><p><img src="https://static.vue-js.com/09e72580-0cb5-11ec-a752-75723a64e8f5.png" alt="pic"></p><blockquote><p>有一點不同的是 <code>protected</code> 成員在子類中仍然可以訪問</p></blockquote><p><img src="https://static.vue-js.com/137f81a0-0cb5-11ec-8e64-91fdec0f05a1.png" alt="piC"></p><p>除了上述修飾詞外，還有<code>唯讀修飾詞</code></p><h2 id="唯讀修飾詞"><a href="#唯讀修飾詞" class="headerlink" title="唯讀修飾詞"></a>唯讀修飾詞</h2><p>通過<code>readonly</code>關鍵字進行聲明，唯讀屬性必須在<code>聲明時</code>或<code>構造函數</code>里被初始化，如下：</p><p><img src="https://static.vue-js.com/1e848d20-0cb5-11ec-8e64-91fdec0f05a1.png" alt="pix"></p><hr><p>除了實體屬性 還有靜態屬性</p><h2 id="靜態屬性"><a href="#靜態屬性" class="headerlink" title="靜態屬性"></a>靜態屬性</h2><p>這些屬性存在於<code>Class</code>本身上面而不是<code>Class</code>的實例上，通過<code>static</code>進行定義，訪問這些屬性需要通過<code>類型</code>.靜態屬性的這種形式訪問，如下所示：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> width = <span class="string">&#x27;100px&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Square</span>.<span class="property">width</span>) <span class="comment">// 100px</span></span><br></pre></td></tr></table></figure><blockquote><p>上述的<code>Class</code>都能發現一個特點就是，都能夠被<code>實例化</code>，在 <code>typescript</code>中，還存在一種抽像類</p></blockquote><h2 id="抽像類"><a href="#抽像類" class="headerlink" title="抽像類"></a>抽像類</h2><p><code>抽像類</code>做為其它派生類的<code>基類</code>使用，它們一般<code>不會直接被實例化</code>，不同於接口，抽像類可以包含成員的實現細節</p><p><code>abstract</code>關鍵字是用於定義抽像類和在抽像類內部定義抽象方法，如下所示：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="title function_">makeSound</span>(): <span class="built_in">void</span>;</span><br><span class="line">    <span class="title function_">move</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;roaming the earch...&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>這種類並不能被實例化，通常需要我們創建子類去繼承，如下：</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">makeSound</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;miao miao&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>()</span><br><span class="line"></span><br><span class="line">cat.<span class="title function_">makeSound</span>() <span class="comment">// miao miao</span></span><br><span class="line">cat.<span class="title function_">move</span>() <span class="comment">// roaming the earch...</span></span><br></pre></td></tr></table></figure><h2 id="應用場景"><a href="#應用場景" class="headerlink" title="應用場景"></a>應用場景</h2><p>除了日常藉助類的特性完成日常業務代碼，還可以將<code>類（class）</code>也可以作為接口，尤其在 React 中是很常用的，如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Carousel</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">Props</span>, <span class="title class_">State</span>&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><p>由於組件需要傳入 <code>props</code> 的類型<code>Props</code>，同時有需要設置默認 <code>props</code> 即<code>defaultProps</code>，這時候更加適合使用<code>class</code>作為接口</p><p>先聲明一個類，這個類包含組件 <code>props</code> 所需的類型和初始值：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// props的类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">children</span>: <span class="title class_">Array</span>&lt;<span class="title class_">React</span>.<span class="property">ReactElement</span>&lt;<span class="built_in">any</span>&gt;&gt; | <span class="title class_">React</span>.<span class="property">ReactElement</span>&lt;<span class="built_in">any</span>&gt; | <span class="built_in">never</span>[] = []</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">speed</span>: <span class="built_in">number</span> = <span class="number">500</span></span><br><span class="line">  <span class="keyword">public</span> <span class="attr">height</span>: <span class="built_in">number</span> = <span class="number">160</span></span><br><span class="line">  <span class="keyword">public</span> <span class="attr">animation</span>: <span class="built_in">string</span> = <span class="string">&#x27;easeInOutQuad&#x27;</span></span><br><span class="line">  <span class="keyword">public</span> <span class="attr">isAuto</span>: <span class="built_in">boolean</span> = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">public</span> <span class="attr">autoPlayInterval</span>: <span class="built_in">number</span> = <span class="number">4500</span></span><br><span class="line">  <span class="keyword">public</span> <span class="attr">afterChange</span>: <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">beforeChange</span>: <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">selesctedColor</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">public</span> <span class="attr">showDots</span>: <span class="built_in">boolean</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當我們需要傳入 <code>props</code> 類型的時候直接將 <code>Props</code> 作為接口傳入，此時 <code>Props</code> 的作用就是接口，而當需要我們設置<code>defaultProps</code>初始值的時候，我們只需要:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> defaultProps = <span class="keyword">new</span> <span class="title class_">Props</span>()</span><br></pre></td></tr></table></figure><blockquote><p><code>Props</code>的實例就是 <code>defaultProps</code> 的初始值，</p></blockquote><pre><code>這就是 `class` 作為接口的實際應用，我們用一個 `class` 起到了接口和設置初始值兩個作用，方便統一管理，減少了代碼量</code></pre><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.tslang.cn/docs/handbook/classes.html">类 介绍</a></li><li><a href="https://www.runoob.com/typescript/ts-class.html">TypeScript 类</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天來研究研究 TS 中 Class 的細節&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.tenor.com/ISfg1epIVZ0AAAAM/funny-smile.gif&quot; alt=&quot;gif&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>重新學習TS-四-TypeScript-接口</title>
    <link href="https://supermarpig.github.io/2023/05/29/%E9%87%8D%E6%96%B0%E5%AD%B8%E7%BF%92TS-%E5%9B%9B-TypeScript-%E6%8E%A5%E5%8F%A3/"/>
    <id>https://supermarpig.github.io/2023/05/29/%E9%87%8D%E6%96%B0%E5%AD%B8%E7%BF%92TS-%E5%9B%9B-TypeScript-%E6%8E%A5%E5%8F%A3/</id>
    <published>2023-05-29T14:25:27.000Z</published>
    <updated>2023-05-31T07:55:16.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>了解了各個類型<br>現在來研究 接口是蝦咪東西</p><span id="more"></span><hr><h2 id="接口是什麼"><a href="#接口是什麼" class="headerlink" title="接口是什麼?"></a>接口是什麼?</h2><blockquote><p>接口是一系列抽象方法的聲明，是一些方法特徵的集合，這些方法都應該是抽象的，需要由具體的<code>Class</code>去實現，然後第三方就可以通過這組<code>抽象方法</code>調用，讓具體的<code>Class</code>執行具體的方法</p></blockquote><p>看著很模糊， 簡單來說</p><p>一個接口所描述的是<code>一個對象</code>相關的<code>屬性</code>和<code>方法</code>，但並<code>不提供</code>具體創建此對象實例的方法</p><p><code>typescript</code>的核心功能之一就是對<code>類型做檢測</code>，雖然這種檢測方式是“<code>鴨式辨型法</code>”，而接口的作用就是為為這些類型命名和為你的代碼或第三方代碼定義一個<code>約定</code></p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>接口定義如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">interface interface_name &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如有一個<code>函數</code>，這個函數接受一個 <code>User 對象</code>，然後返回這個 <code>User 對象</code>的<code> name 屬性</code>:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getUserName</span> = (<span class="params">user</span>) =&gt; user.<span class="property">name</span></span><br></pre></td></tr></table></figure><p>可以看到，參數需要有一個<code>user的name屬性</code>，可以通過<code>接口</code>描述 user 參數的結構</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: string</span><br><span class="line">    <span class="attr">age</span>: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getUserName</span> = (<span class="params">user: User</span>) =&gt; user.<span class="property">name</span></span><br></pre></td></tr></table></figure><p>這些屬性並不一定全部實現，上述傳入的<code>對象</code>必須擁有<code>name</code>和<code>age</code>屬性，否則<code>typescript</code>在編譯階段會報錯，如下圖：</p><p><img src="https://static.vue-js.com/25d3a790-0b2b-11ec-a752-75723a64e8f5.png" alt="error"></p><p>如果不想要<code>age</code>屬性的話，這時候可以採用可選屬性，如下表示：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: string</span><br><span class="line">    age?: number</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這時候<code>age屬性</code>則可以是<code>number類型</code>或者<code>undefined類型</code></p><p>有些時候，我們想要一個屬性變成<code>只讀屬性</code>，在 typescript 只需要使用<code>readonly聲明</code>，如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: string</span><br><span class="line">    age?: number</span><br><span class="line">    readonly <span class="attr">isMale</span>: boolean</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>當我們修改屬性的時候，就會出現警告，如下所示：</p><p><img src="https://static.vue-js.com/2f6d3c30-0b2b-11ec-8e64-91fdec0f05a1.png"></p><p>這是屬性中有一個函數，可以如下表示：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: string</span><br><span class="line">    age?: number</span><br><span class="line">    readonly <span class="attr">isMale</span>: boolean</span><br><span class="line">    <span class="attr">say</span>: <span class="function">(<span class="params">words: string</span>) =&gt;</span> string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果傳遞的<code>對像</code>不僅僅是<code>上述的屬性</code>，這時候可以使用：</p><ul><li>類型推斷</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: string</span><br><span class="line">    <span class="attr">age</span>: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getUserName</span> = (<span class="params">user: User</span>) =&gt; user.<span class="property">name</span></span><br><span class="line"><span class="title function_">getUserName</span>(&#123;<span class="attr">color</span>: <span class="string">&#x27;yellow&#x27;</span>&#125; <span class="keyword">as</span> <span class="title class_">User</span>)</span><br></pre></td></tr></table></figure><ul><li>給接口添加字串索引簽名</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: string</span><br><span class="line">    <span class="attr">age</span>: number</span><br><span class="line">    [<span class="attr">propName</span>: string]: any;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口還能實現繼承，如下圖：</p><p><img src="https://static.vue-js.com/38a41760-0b2b-11ec-8e64-91fdec0f05a1.png"></p><p>也可以繼承多個，父類通過逗號隔開，如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="title class_">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Mother</span> &#123;</span><br><span class="line">    <span class="attr">height</span>: <span class="title class_">Number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>,<span class="title class_">Mother</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: string</span><br><span class="line">    <span class="attr">age</span>: <span class="title class_">Number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="應用場景"><a href="#應用場景" class="headerlink" title="應用場景"></a>應用場景</h2><p>例如在<code>javascript</code>中定義一個函數，用來獲取用戶的姓名和年齡：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getUserInfo = <span class="keyword">function</span>(<span class="params">user</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="attr">name</span>: $&#123;user.<span class="property">name</span>&#125;, <span class="attr">age</span>: $&#123;user.<span class="property">age</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果多人開發的都需要用到這個<code>函數</code>的時候，如果<code>沒有註釋</code>，則可能出現各種運行時的錯誤，這時候就可以使用接口定義參數變量：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先定義一個接口</span></span><br><span class="line">interface <span class="title class_">IUser</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">  <span class="attr">age</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getUserInfo = (<span class="attr">user</span>: <span class="title class_">IUser</span>): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`name: <span class="subst">$&#123;user.name&#125;</span>, age: <span class="subst">$&#123;user.age&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正確的調用</span></span><br><span class="line"><span class="title function_">getUserInfo</span>(&#123;<span class="attr">name</span>: <span class="string">&quot;koala&quot;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>包括後面講到類的時候也會應用到接口</p></blockquote><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>-<a href="https://www.tslang.cn/docs/handbook/interfaces.html">接口</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;了解了各個類型&lt;br&gt;現在來研究 接口是蝦咪東西&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>JS面試題練習- 判斷 Obj 是否存在某個屬性</title>
    <link href="https://supermarpig.github.io/2023/05/28/JS%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%B7%B4%E7%BF%92/"/>
    <id>https://supermarpig.github.io/2023/05/28/JS%E9%9D%A2%E8%A9%A6%E9%A1%8C%E7%B7%B4%E7%BF%92/</id>
    <published>2023-05-28T13:48:16.000Z</published>
    <updated>2023-05-29T01:19:16.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>網路上看到面試題 ，也來拿來記錄練習</p><span id="more"></span><hr><p>看到一題面試題</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判斷對象中是否存在某個屬性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>&#123;<span class="type"> Object </span>&#125; obj  對象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>&#123;<span class="type"> String </span>&#125; key  屬性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">hasProperty</span>(<span class="params">obj,key</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> key <span class="keyword">in</span> obj;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>上方即為正確答案 ，但在實際形況下 經驗情況不足的我們很少會想到這樣的方式</p></blockquote><p>以下是常見的錯誤整理</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hasProperty</span>(<span class="params">obj,key</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> obj.<span class="property">key</span> !== <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//這樣的寫法是錯誤的 ，是只會判斷key的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//應該 改成</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hasProperty</span>(<span class="params">obj,key</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> obj[key] !== <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>但上面寫法會遇到一個問題</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; a : <span class="literal">undefined</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title function_">hasProperty</span>(obj , <span class="string">&#x27;a&#x27;</span>))   <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>本來 <code>obj[key] !== undefined;</code> 應該要是 <code>true</code> 但是結果顯示<code>false</code></p><p>所以不能用<code>undefined</code>來判斷</p><p>那該如何判斷呢</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hasProperty</span>(<span class="params">obj,key</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">includes</span>(key)</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; a : <span class="literal">undefined</span> ,b : <span class="number">1</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title function_">hasProperty</span>(obj , <span class="string">&#x27;a&#x27;</span>))   <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title function_">hasProperty</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)))   <span class="comment">// [&#x27;a&#x27; ,&#x27;b&#x27; ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>這樣又可以判斷 上面是否有包含 a 這個屬性 (但是 a 這個屬性顯示<code>undefined</code>)</p><p>但是如果</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,<span class="string">&#x27;c&#x27;</span>&#123;</span><br><span class="line">    <span class="attr">enumerable</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">value</span>:<span class="number">1</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>用上方的方式 加了一個<code>C</code> Obj進去<br>內容為:不可遍歷，值等於1</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">c</span>);   <span class="comment">//true    &lt;---------判斷得出來</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hasProperty</span>(obj,<span class="string">&#x27;c&#x27;</span>)); <span class="comment">// false    &lt;-----------但上面的方法會找不到 C 這個東西</span></span><br></pre></td></tr></table></figure><hr><p>接下來也有人會這樣寫</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hasProperty</span>(<span class="params">obj,key</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> obj.<span class="title function_">hasOwnProperty</span>(key);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; a : <span class="literal">undefined</span> ,b : <span class="number">1</span>&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,<span class="string">&#x27;c&#x27;</span>&#123;</span><br><span class="line">    <span class="attr">enumerable</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">value</span>:<span class="number">1</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hasProperty</span>(obj,<span class="string">&#x27;c&#x27;</span>)); <span class="comment">// true    &lt;-----------找到 C</span></span><br></pre></td></tr></table></figure><p>那如果改成 <code>toString</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hasProperty</span>(obj,<span class="string">&#x27;toString&#x27;</span>));   <span class="comment">//false     &lt;-------------判斷不出來原型鏈上的東西 只能判斷自己的property</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">toString</span>)   <span class="comment">//  [Function :toString]   顯示是有這個toString函數的</span></span><br></pre></td></tr></table></figure><p>所以最好的解法還是用 <code>key... in</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">hasProperty</span>(<span class="params">obj,key</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> key <span class="keyword">in</span> obj;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; a : <span class="literal">undefined</span> ,b : <span class="number">1</span>&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,<span class="string">&#x27;c&#x27;</span>&#123;</span><br><span class="line">    <span class="attr">enumerable</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="attr">value</span>:<span class="number">1</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hasProperty</span>(obj,<span class="string">&#x27;a&#x27;</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hasProperty</span>(obj,<span class="string">&#x27;c&#x27;</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hasProperty</span>(obj,<span class="string">&#x27;toString&#x27;</span>));  <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;網路上看到面試題 ，也來拿來記錄練習&lt;/p&gt;</summary>
    
    
    
    <category term="JS 面試題" scheme="https://supermarpig.github.io/categories/JS-%E9%9D%A2%E8%A9%A6%E9%A1%8C/"/>
    
    <category term="練習" scheme="https://supermarpig.github.io/categories/JS-%E9%9D%A2%E8%A9%A6%E9%A1%8C/%E7%B7%B4%E7%BF%92/"/>
    
    
    <category term="屬性是否存在" scheme="https://supermarpig.github.io/tags/%E5%B1%AC%E6%80%A7%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8/"/>
    
    <category term="對象" scheme="https://supermarpig.github.io/tags/%E5%B0%8D%E8%B1%A1/"/>
    
    <category term="Object" scheme="https://supermarpig.github.io/tags/Object/"/>
    
    <category term="屬性" scheme="https://supermarpig.github.io/tags/%E5%B1%AC%E6%80%A7/"/>
    
    <category term="String" scheme="https://supermarpig.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>重新學習TS-三-TypeScript-enum 列舉類型</title>
    <link href="https://supermarpig.github.io/2023/05/26/%E9%87%8D%E6%96%B0%E5%AD%B8%E7%BF%92TS-%E4%B8%89-TypeScript-enum-%E5%88%97%E8%88%89%E9%A1%9E%E5%9E%8B/"/>
    <id>https://supermarpig.github.io/2023/05/26/%E9%87%8D%E6%96%B0%E5%AD%B8%E7%BF%92TS-%E4%B8%89-TypeScript-enum-%E5%88%97%E8%88%89%E9%A1%9E%E5%9E%8B/</id>
    <published>2023-05-26T06:53:53.000Z</published>
    <updated>2023-05-26T08:19:42.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>深入研究 ENUM 類型</p><hr><span id="more"></span><p><code>Enum</code> 是 TS 增加的新語法，也被稱做「<code>列舉</code>」或「<code>列舉</code>」</p><p>列舉是一個被命名的整型常數的集合，用於聲明一組命名的常數,<br>當一個變量有幾種可能的取值時,<br>可以將它定義為列舉類型</p><p>通俗來說，列舉就是一個對象的所有可能取值的集合<br>可以想成就是將東西一個一個列出來，通常會用它來管理多個同系列的常數（不可修改的變數），將常數值一一列舉出來，且只能在列舉出來的範圍中選擇</p><p>在日常生活中也很常見，<br>例如表示星期的<code>SUNDAY</code>、<code>MONDAY</code>、<code>TUESDAY</code>、<code>WEDNESDAY</code>、<code>THURSDAY</code>、<code>FRIDAY</code>、<code>SATURDAY</code>就可以看成是一個列舉<br>或是 <code>交通號誌顏色</code>的列舉，元素就是是<code>紅</code>、<code>綠</code>、<code>黃</code>三個。</p><p>列舉的<code>說明</code>與<code>結構</code>和聯合相似，其形式為：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum 列舉名稱&#123;</span><br><span class="line">    標示符號 ① [=整型常數],</span><br><span class="line">    標示符號 ② [=整型常數],</span><br><span class="line">    ...</span><br><span class="line">    標示符號 N [=整型常數],</span><br><span class="line">&#125;列舉變量;</span><br></pre></td></tr></table></figure><p>列舉又分<code>三種型別</code>，分別為</p><ul><li><code>數字列舉</code>(Number enum)</li><li><code>字串列舉</code>(String enum)</li><li><code>異構列舉</code>(Heterogeneous enum)</li></ul><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>列舉的使用是通過enum關鍵字進行定義，形式如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enum xxx &#123; ... &#125;</span><br></pre></td></tr></table></figure><blockquote><p>聲明關鍵字為列舉類型的方式如下：</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 聲明d為列舉類型Direction</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">d</span>: <span class="title class_">Direction</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="數字列舉"><a href="#數字列舉" class="headerlink" title="數字列舉"></a>數字列舉</h2><blockquote><p>當我們聲明一個列舉類型，雖然沒有給它們賦值,<br>但是它們的值其實是默認的<code>數字類型</code>,而且默認從0開始依次累加:</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">enum <span class="title class_">Direction</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span>,   <span class="comment">// 值默認為 0</span></span><br><span class="line">    <span class="title class_">Down</span>, <span class="comment">// 值默認為 1</span></span><br><span class="line">    <span class="title class_">Left</span>, <span class="comment">// 值默認為 2</span></span><br><span class="line">    <span class="title class_">Right</span> <span class="comment">// 值默認為 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>.<span class="property">Up</span> === <span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>.<span class="property">Down</span> === <span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>.<span class="property">Left</span> === <span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>.<span class="property">Right</span> === <span class="number">3</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>如果我們將第一個值進行賦值後，後面的值也會根據前一個值進行累加 1 ：</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">enum <span class="title class_">Direction</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span> = <span class="number">10</span>,</span><br><span class="line">    <span class="title class_">Down</span>,</span><br><span class="line">    <span class="title class_">Left</span>,</span><br><span class="line">    <span class="title class_">Right</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>.<span class="property">Up</span>, <span class="title class_">Direction</span>.<span class="property">Down</span>, <span class="title class_">Direction</span>.<span class="property">Left</span>, <span class="title class_">Direction</span>.<span class="property">Right</span>); <span class="comment">// 10 11 12 13</span></span><br></pre></td></tr></table></figure><h2 id="字串列舉"><a href="#字串列舉" class="headerlink" title="字串列舉"></a>字串列舉</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">列舉類型的值其實也可以是字串類型：</span><br><span class="line"></span><br><span class="line">enum <span class="title class_">Direction</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span> = <span class="string">&#x27;Up&#x27;</span>,</span><br><span class="line">    <span class="title class_">Down</span> = <span class="string">&#x27;Down&#x27;</span>,</span><br><span class="line">    <span class="title class_">Left</span> = <span class="string">&#x27;Left&#x27;</span>,</span><br><span class="line">    <span class="title class_">Right</span> = <span class="string">&#x27;Right&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>[<span class="string">&#x27;Right&#x27;</span>], <span class="title class_">Direction</span>.<span class="property">Up</span>); <span class="comment">// Right Up</span></span><br></pre></td></tr></table></figure><blockquote><p>如果設定了一個變量為字符串之後，後續的字段也需要賦值字符串，否則報錯：</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum <span class="title class_">Direction</span> &#123;</span><br><span class="line"> <span class="title class_">Up</span> = <span class="string">&#x27;UP&#x27;</span>,</span><br><span class="line"> <span class="title class_">Down</span>, <span class="comment">// error TS1061: Enum member must have initializer</span></span><br><span class="line"> <span class="title class_">Left</span>, <span class="comment">// error TS1061: Enum member must have initializer</span></span><br><span class="line"> <span class="title class_">Right</span> <span class="comment">// error TS1061: Enum member must have initializer</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="異構列舉"><a href="#異構列舉" class="headerlink" title="異構列舉"></a>異構列舉</h2><p>即將<code>數字列舉</code>和<code>字串列舉</code>結合起來混合起來使用，如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">enum <span class="title class_">BooleanLikeHeterogeneousEnum</span> &#123;</span><br><span class="line">    <span class="title class_">No</span> = <span class="number">0</span>,</span><br><span class="line">    <span class="title class_">Yes</span> = <span class="string">&quot;YES&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通常情況下我們很少會使用異構列舉</p></blockquote><h2 id="本質"><a href="#本質" class="headerlink" title="本質"></a>本質</h2><p>現在一個列舉的案例如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum <span class="title class_">Direction</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span>,</span><br><span class="line">    <span class="title class_">Down</span>,</span><br><span class="line">    <span class="title class_">Left</span>,</span><br><span class="line">    <span class="title class_">Right</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通過編譯後 JavaScript代碼如下</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Direction</span>;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params">Direction</span>) &#123;</span><br><span class="line">    <span class="title class_">Direction</span>[<span class="title class_">Direction</span>[<span class="string">&quot;Up&quot;</span>] = <span class="number">0</span>] = <span class="string">&quot;Up&quot;</span>;</span><br><span class="line">    <span class="title class_">Direction</span>[<span class="title class_">Direction</span>[<span class="string">&quot;Down&quot;</span>] = <span class="number">1</span>] = <span class="string">&quot;Down&quot;</span>;</span><br><span class="line">    <span class="title class_">Direction</span>[<span class="title class_">Direction</span>[<span class="string">&quot;Left&quot;</span>] = <span class="number">2</span>] = <span class="string">&quot;Left&quot;</span>;</span><br><span class="line">    <span class="title class_">Direction</span>[<span class="title class_">Direction</span>[<span class="string">&quot;Right&quot;</span>] = <span class="number">3</span>] = <span class="string">&quot;Right&quot;</span>;</span><br><span class="line">&#125;)(<span class="title class_">Direction</span> || (<span class="title class_">Direction</span> = &#123;&#125;));</span><br></pre></td></tr></table></figure><p>上述代碼可以看到，<code>Direction[Direction[&quot;Up&quot;] = 0] = &quot;Up&quot;</code> 可以分成</p><p><code>Direction[0] = &quot;Up&quot;</code><br><code>Direction[&quot;Up&quot;] = 0</code></p><blockquote><p>所以定義列舉類型後，可以通過正反映射拿到對應的值，如下：</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">enum <span class="title class_">Direction</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span>,</span><br><span class="line">    <span class="title class_">Down</span>,</span><br><span class="line">    <span class="title class_">Left</span>,</span><br><span class="line">    <span class="title class_">Right</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>.<span class="property">Up</span> === <span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>[<span class="number">0</span>]); <span class="comment">// Up</span></span><br></pre></td></tr></table></figure><blockquote><p>並且多處定義的列舉是可以進行合併操作，如下：</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">enum <span class="title class_">Direction</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span> = <span class="string">&#x27;Up&#x27;</span>,</span><br><span class="line">    <span class="title class_">Down</span> = <span class="string">&#x27;Down&#x27;</span>,</span><br><span class="line">    <span class="title class_">Left</span> = <span class="string">&#x27;Left&#x27;</span>,</span><br><span class="line">    <span class="title class_">Right</span> = <span class="string">&#x27;Right&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum <span class="title class_">Direction</span> &#123;</span><br><span class="line">    <span class="title class_">Center</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>編譯後，js代碼如下：</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Direction</span>;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params">Direction</span>) &#123;</span><br><span class="line">    <span class="title class_">Direction</span>[<span class="string">&quot;Up&quot;</span>] = <span class="string">&quot;Up&quot;</span>;</span><br><span class="line">    <span class="title class_">Direction</span>[<span class="string">&quot;Down&quot;</span>] = <span class="string">&quot;Down&quot;</span>;</span><br><span class="line">    <span class="title class_">Direction</span>[<span class="string">&quot;Left&quot;</span>] = <span class="string">&quot;Left&quot;</span>;</span><br><span class="line">    <span class="title class_">Direction</span>[<span class="string">&quot;Right&quot;</span>] = <span class="string">&quot;Right&quot;</span>;</span><br><span class="line">&#125;)(<span class="title class_">Direction</span> || (<span class="title class_">Direction</span> = &#123;&#125;));</span><br><span class="line">(<span class="keyword">function</span> (<span class="params">Direction</span>) &#123;</span><br><span class="line">    <span class="title class_">Direction</span>[<span class="title class_">Direction</span>[<span class="string">&quot;Center&quot;</span>] = <span class="number">1</span>] = <span class="string">&quot;Center&quot;</span>;</span><br><span class="line">&#125;)(<span class="title class_">Direction</span> || (<span class="title class_">Direction</span> = &#123;&#125;));</span><br></pre></td></tr></table></figure><blockquote><p>可以看到，Direction對象屬性回疊加</p></blockquote><p>了解這些特性之後 來個實際例子</p><h2 id="舉個例子"><a href="#舉個例子" class="headerlink" title="舉個例子"></a>舉個例子</h2><p>拿大家最常使用的星期來當例子</p><p>後端返回的字段使用0 - 6 標記對應的日期，這時候就可以使用列舉可提高代碼可讀性，如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum <span class="title class_">Days</span> &#123;<span class="title class_">Sun</span>, <span class="title class_">Mon</span>, <span class="title class_">Tue</span>, <span class="title class_">Wed</span>, <span class="title class_">Thu</span>, <span class="title class_">Fri</span>, <span class="title class_">Sat</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Days</span>[<span class="string">&quot;Sun&quot;</span>] === <span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Days</span>[<span class="string">&quot;Mon&quot;</span>] === <span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Days</span>[<span class="string">&quot;Tue&quot;</span>] === <span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Days</span>[<span class="string">&quot;Sat&quot;</span>] === <span class="number">6</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>包括後端日常返回0、1 等等狀態的時候，我們都可以通過列舉去定義，這樣可以提高代碼的可讀性，便於後續的維護</p></blockquote><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://ithelp.ithome.com.tw/articles/10221546">【Day 12】TypeScript 資料型別 - 元組(Tuple) &amp; 列舉(Enum)</a></li><li><a href="https://zh.wikipedia.org/wiki/%E6%9E%9A%E4%B8%BE">列舉</a></li><li><a href="https://www.jianshu.com/p/b9e1caa4dd98">TypeScript学习-枚举</a></li><li><a href="https://juejin.cn/post/6844904112669065224#heading-30">一文让你彻底掌握 TS 枚举</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;深入研究 ENUM 類型&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://supermarpig.github.io/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://supermarpig.github.io/tags/TypeScript/"/>
    
    <category term="面向對象" scheme="https://supermarpig.github.io/tags/%E9%9D%A2%E5%90%91%E5%B0%8D%E8%B1%A1/"/>
    
    <category term="enum" scheme="https://supermarpig.github.io/tags/enum/"/>
    
    <category term="列舉類型" scheme="https://supermarpig.github.io/tags/%E5%88%97%E8%88%89%E9%A1%9E%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>重新學習TS-二-TypeScript-數據類型</title>
    <link href="https://supermarpig.github.io/2023/05/25/%E9%87%8D%E6%96%B0%E5%AD%B8%E7%BF%92TS-%E4%BA%8C-TypeScript-%E6%95%B8%E6%93%9A%E9%A1%9E%E5%9E%8B/"/>
    <id>https://supermarpig.github.io/2023/05/25/%E9%87%8D%E6%96%B0%E5%AD%B8%E7%BF%92TS-%E4%BA%8C-TypeScript-%E6%95%B8%E6%93%9A%E9%A1%9E%E5%9E%8B/</id>
    <published>2023-05-25T04:05:52.000Z</published>
    <updated>2023-05-26T01:21:52.125Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>針對TS 來看看TypeScript 的數據類型</p><span id="more"></span><p><code>typescript</code> 和 <code>javascript</code> 幾乎一樣，擁有相同的數據類型，<br>另外 <code>typescript</code> 在 <code>javascript</code> 基礎上提供了更加實用的類型供開發使用</p><p>在開發階段，可以為明確的變量定義為某種類型，這樣 <code>typescript</code> 就能在編譯階段進行類型檢查，當類型不合符預期結果的時候則會出現<strong>錯誤</strong>提示</p><h2 id="數據類型有哪些"><a href="#數據類型有哪些" class="headerlink" title="數據類型有哪些"></a>數據類型有哪些</h2><blockquote><p>數據類型分成下列幾種</p></blockquote><h3 id="基本類型"><a href="#基本類型" class="headerlink" title="基本類型"></a>基本類型</h3><table><thead><tr><th align="center">類型名稱</th><th align="center">內容</th><th align="center">舉個例子</th></tr></thead><tbody><tr><td align="center">number</td><td align="center">表示數字</td><td align="center">let age: number &#x3D; 30;</td></tr><tr><td align="center">string</td><td align="center">表示字符串</td><td align="center">let name: string &#x3D; “John”;</td></tr><tr><td align="center">boolean</td><td align="center">表示布爾值</td><td align="center">let isActive: boolean &#x3D; true;</td></tr><tr><td align="center">null</td><td align="center">表示空值</td><td align="center">let data: null &#x3D; null;</td></tr><tr><td align="center">undefined</td><td align="center">表示未定義的值</td><td align="center">let data: undefined &#x3D; undefined;</td></tr><tr><td align="center">symbol</td><td align="center">表示唯一的符號值</td><td align="center">let id: symbol &#x3D; Symbol(“id”);</td></tr></tbody></table><h3 id="複合類型"><a href="#複合類型" class="headerlink" title="複合類型"></a>複合類型</h3><table><thead><tr><th align="center">類型名稱</th><th align="center">內容</th><th align="center">舉個例子</th></tr></thead><tbody><tr><td align="center">array</td><td align="center">表示數組</td><td align="center">let numbers: number[] &#x3D; [1, 2, 3];</td></tr><tr><td align="center">tuple</td><td align="center">表示具有固定元素數量和類型的數組</td><td align="center">let person: [string, number] &#x3D; [“John”, 30];</td></tr><tr><td align="center">object</td><td align="center">表示對象</td><td align="center">let user: { name: string, age: number } &#x3D; { name: “John”, age: 30 };</td></tr></tbody></table><h3 id="函數類型"><a href="#函數類型" class="headerlink" title="函數類型"></a>函數類型</h3><table><thead><tr><th align="center">類型名稱</th><th align="center">內容</th><th align="center">舉個例子</th></tr></thead><tbody><tr><td align="center">function</td><td align="center">表示函數類型</td><td align="center">let greet: Function &#x3D; () &#x3D;&gt; console.log(“Hello!”);</td></tr><tr><td align="center">函數的參數和返回值也可以聲明具體的類型</td><td align="center">表示具有固定元素數量和類型的數組</td><td align="center">let add: (x: number, y: number) &#x3D;&gt; number &#x3D; (x, y) &#x3D;&gt; x + y;</td></tr></tbody></table><h3 id="進階類型"><a href="#進階類型" class="headerlink" title="進階類型"></a>進階類型</h3><table><thead><tr><th align="center">類型名稱</th><th align="center">內容</th><th align="center">舉個例子</th></tr></thead><tbody><tr><td align="center">enum</td><td align="center">表示列舉類型</td><td align="center">enum Color { Red, Green, Blue }; let color: Color &#x3D; Color.Red;</td></tr><tr><td align="center">any</td><td align="center">表示任意類型，可以接受任何數據類型</td><td align="center">let data: any &#x3D; 10; data &#x3D; “Hello”;</td></tr><tr><td align="center">unknown</td><td align="center">表示未知類型，類似於 any 但具有類型檢查</td><td align="center">let data: unknown &#x3D; 10; data &#x3D; “Hello”;</td></tr><tr><td align="center">void</td><td align="center">表示沒有返回值的類型</td><td align="center">function sayHello(): void { console.log(“Hello!”); }</td></tr></tbody></table><blockquote><p>以上是 <code>TypeScript</code> 中常見的<code>數據類型</code>，可以幫助在編寫代碼時<code>明確聲明變量的類型</code>，從而提供類型檢查和更好的代碼提示。</p></blockquote><h2 id="舉個例子"><a href="#舉個例子" class="headerlink" title="舉個例子"></a>舉個例子</h2><h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h3><blockquote><p>布爾類型</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">flag</span>:boolean = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// flag = 123; // 錯誤</span></span><br><span class="line">flag = <span class="literal">false</span>;  <span class="comment">//正確</span></span><br></pre></td></tr></table></figure><h3 id="number"><a href="#number" class="headerlink" title="number"></a>number</h3><blockquote><p>數字類型，和<code>javascript</code>一樣，<code>typescript</code>的數值類型都是<code>浮點數</code>，可支持二進制、八進制、十進制和十六進制</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">num</span>:number = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// num = &#x27;456&#x27;; // 錯誤</span></span><br><span class="line">num = <span class="number">456</span>;  <span class="comment">//正確</span></span><br></pre></td></tr></table></figure><blockquote><p>進制表示：</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">decLiteral</span>: number = <span class="number">6</span>; <span class="comment">// 十進制</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">hexLiteral</span>: number = <span class="number">0xf00d</span>; <span class="comment">// 十六進制</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">binaryLiteral</span>: number = <span class="number">0b1010</span>; <span class="comment">// 二進制</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">octalLiteral</span>: number = <span class="number">0o744</span>; <span class="comment">// 八進制</span></span><br></pre></td></tr></table></figure><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><p>字符串類型，和<code>JavaScript</code>一樣，可以使用<code>雙引號（&quot;）</code>或<code>單引號（&#39;）</code>表示字符串</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">str</span>:string = <span class="string">&#x27;this is ts&#x27;</span>;</span><br><span class="line">str = <span class="string">&#x27;test&#x27;</span>;</span><br></pre></td></tr></table></figure><p>作為超集，當然也可以使用模版字符串&#96;&#96;進行包裹，通過${} 嵌入變量</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: string = <span class="string">`Gene`</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: number = <span class="number">37</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">sentence</span>: string = <span class="string">`Hello, my name is <span class="subst">$&#123; name &#125;</span></span></span><br></pre></td></tr></table></figure><h3 id="array"><a href="#array" class="headerlink" title="array"></a>array</h3><p>數組類型，跟<code>javascript</code>一致，通過<code>[]</code>進行包裹，有兩種寫法：</p><blockquote><p>方式一：元素類型後面接上[]</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:string[] = [<span class="string">&#x27;12&#x27;</span>, <span class="string">&#x27;23&#x27;</span>];</span><br><span class="line">arr = [<span class="string">&#x27;45&#x27;</span>, <span class="string">&#x27;56&#x27;</span>];</span><br></pre></td></tr></table></figure><blockquote><p>方式二：使用數組泛型，Array&lt;元素类型&gt;：</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:<span class="title class_">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">arr = [<span class="string">&#x27;45&#x27;</span>, <span class="string">&#x27;56&#x27;</span>];</span><br></pre></td></tr></table></figure><h3 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h3><p>元祖類型，允許表示一個已知元素數量和類型的數組，各元素的類型不必相同</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">tupleArr</span>:[number, string, boolean];</span><br><span class="line">tupleArr = [<span class="number">12</span>, <span class="string">&#x27;34&#x27;</span>, <span class="literal">true</span>]; <span class="comment">//ok</span></span><br><span class="line">typleArr = [<span class="number">12</span>, <span class="string">&#x27;34&#x27;</span>] <span class="comment">// no ok</span></span><br></pre></td></tr></table></figure><p>賦值的類型、位置、個數需要和定義（生明）的類型、位置、個數一致</p><h3 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h3><p><code>enum</code>類型是對<code>JavaScript</code>標準數據類型的一個補充，使用列舉類型可以為一組數值賦予友好的名字</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">enum <span class="title class_">Color</span> &#123;<span class="title class_">Red</span>, <span class="title class_">Green</span>, <span class="title class_">Blue</span>&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>;</span><br></pre></td></tr></table></figure><h3 id="any"><a href="#any" class="headerlink" title="any"></a>any</h3><p>可以指定<code>任何類型</code>的值，在編程階段還不清楚類型的變量指定一個類型，不希望類型檢查器對這些值進行檢查而是直接讓它們通過編譯階段的檢查，這時候可以使用any類型</p><p>使用<code>any</code>類型允許被賦值為任意類型，甚至可以調用其屬性、方法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">num</span>:any = <span class="number">123</span>;</span><br><span class="line">num = <span class="string">&#x27;str&#x27;</span>;</span><br><span class="line">num = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>定義存儲各種類型數據的數組時，示例代碼如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arrayList</span>: any[] = [<span class="number">1</span>, <span class="literal">false</span>, <span class="string">&#x27;fine&#x27;</span>];</span><br><span class="line">arrayList[<span class="number">1</span>] = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h3 id="null-和和undefined"><a href="#null-和和undefined" class="headerlink" title="null 和和undefined"></a>null 和和undefined</h3><p>在<code>JavaScript</code> 中 <code>null</code>表示”什麼都沒有”，是一個只有一個值的特殊類型，表示一個空對象引用，<br>而<code>undefined</code>表示一個沒有設置值的變量</p><p>默認情況下<code>null</code>和<code>undefined</code>是所有類型的子類型，<br>就是說你可以把 <code>null</code>和 <code>undefined</code>賦值給 number類型的變量</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">num</span>:number | <span class="literal">undefined</span>; <span class="comment">// 數值類型 或者 undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 正确</span></span><br><span class="line">num = <span class="number">123</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure><blockquote><p>但是<code>TypeScript</code>配置了<code>--strictNullChecks</code>標記，<code>null</code>和<code>undefined</code>只能賦值給<code>void</code>和它們自己</p></blockquote><h3 id="void"><a href="#void" class="headerlink" title="void"></a>void</h3><blockquote><p>用於標識方法返回值的類型，表示該方法沒有返回值。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params"></span>): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;Hello Runoob&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="never"><a href="#never" class="headerlink" title="never"></a>never</h3><p><code>never</code>是其他類型（包括<code>null</code>和<code>undefined</code>）的子類型，可以賦值給任何類型，代表從不會出現的值</p><p>但是沒有類型是<code>never</code> 的子類型，這意味著聲明 <code>never</code> 的變量只能被 <code>never</code> 類型所賦值。</p><p><code>never</code>類型一般用來指定那些總是會拋出異常、無限循環</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:never;</span><br><span class="line">a = <span class="number">123</span>; <span class="comment">// 錯誤的寫法</span></span><br><span class="line"></span><br><span class="line">a = (<span class="function">() =&gt;</span> &#123; <span class="comment">// 正確的寫法</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;错误&#x27;</span>);</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回never的函數必須存在無法達到的終點</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">error</span>(<span class="params">message: string</span>): never &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><p>對像類型，非原始類型，常見的形式通過{}進行包裹</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>:object;</span><br><span class="line">obj = &#123;<span class="attr">name</span>: <span class="string">&#x27;Wang&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>和<code>javascript</code>基本一致，也分成：</p><ul><li>基本類型</li><li>引用類型<br>在基礎類型上，<code>typescript</code>增添了<code>void</code>、<code>any</code>、<code>emum</code>等原始類型</li></ul><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>-<a href="https://www.tslang.cn/docs/handbook/basic-types.html">基础类型介绍</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;針對TS 來看看TypeScript 的數據類型&lt;/p&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://supermarpig.github.io/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://supermarpig.github.io/tags/TypeScript/"/>
    
    <category term="泛型" scheme="https://supermarpig.github.io/tags/%E6%B3%9B%E5%9E%8B/"/>
    
    <category term="面向對象" scheme="https://supermarpig.github.io/tags/%E9%9D%A2%E5%90%91%E5%B0%8D%E8%B1%A1/"/>
    
    <category term="數據類型" scheme="https://supermarpig.github.io/tags/%E6%95%B8%E6%93%9A%E9%A1%9E%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>重新學習TS(一)TypeScript 理解</title>
    <link href="https://supermarpig.github.io/2023/05/24/%E9%87%8D%E6%96%B0%E5%AD%B8%E7%BF%92TS-%E4%B8%80-TypeScript-%E7%90%86%E8%A7%A3/"/>
    <id>https://supermarpig.github.io/2023/05/24/%E9%87%8D%E6%96%B0%E5%AD%B8%E7%BF%92TS-%E4%B8%80-TypeScript-%E7%90%86%E8%A7%A3/</id>
    <published>2023-05-24T08:43:58.000Z</published>
    <updated>2023-05-25T04:04:40.735Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JS學習完，該碰碰TS了</p><p><img src="https://media.tenor.com/642Dz5h3nxsAAAAC/spongebob-sweeping.gif" alt="gif"></p><span id="more"></span><p><img src="https://img2020.cnblogs.com/blog/139239/202008/139239-20200814100654815-1591360026.png" alt="pic"></p><h2 id="TypeScript是什麼"><a href="#TypeScript是什麼" class="headerlink" title="TypeScript是什麼?"></a>TypeScript是什麼?</h2><p><code>TypeScript</code> 是 <code>JavaScript</code> 的類型的超集，支持 <code>ES6語法</code> ，支持 <code>面向對象</code><br>Coding 的概念，如</p><ul><li>Class 類</li><li>API 接口</li><li>Inherit 繼承</li><li>Generics 泛型</li></ul><p><img src="https://static.vue-js.com/61c2c1f0-0950-11ec-a752-75723a64e8f5.png" alt="pic"></p><p><code>TS</code>其是一種<code>靜態</code>類型檢查的語言，提供了類型<code>註解</code>，在代碼編譯階段就可以檢查出<code>數據類型</code>的錯誤</p><p>同時擴展了<code>JavaScript</code> 的語法，所以任何現有的<code>JavaScrip</code>t 程序可以不加改變的在 <code>TypeScript</code> 下工作</p><p>為了保證兼容性， <code>TypeScript</code> 在編譯階段需要編譯器編譯成純 <code>JavaScript</code> 來運行，是為大型應用之開發而設計的語言，如下：</p><blockquote><p>Ts文件如下</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">hello</span>: string = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hello);</span><br></pre></td></tr></table></figure><blockquote><p>編譯文件後：</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hello = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hello);</span><br></pre></td></tr></table></figure><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p><code>TypeScript</code> 的特性主要有如下：</p><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">類型批註和編譯時類型檢查</td><td align="center">在編譯時批註變量類型</td></tr><tr><td align="center">類型推斷</td><td align="center">ts 中沒有批註變量類型會自動推斷變量的類型</td></tr><tr><td align="center">類型擦除</td><td align="center">在編譯過程中批註的內容和接口會在運行時利用工具擦除</td></tr><tr><td align="center">接口</td><td align="center">ts 中用接口來定義對像類型</td></tr><tr><td align="center">枚舉</td><td align="center">ts 用於取值被限定在一定範圍內的場景</td></tr><tr><td align="center">Mixin</td><td align="center">可以接受任意類型的值</td></tr><tr><td align="center">泛型編程</td><td align="center">寫代碼時使用一些以後才指定的類型</td></tr><tr><td align="center">名字空間</td><td align="center">名字只在該區域內有效，其他區域可重複使用該名字而不衝突</td></tr><tr><td align="center">元組</td><td align="center">元組合併了不同類型的對象，相當於一個可以裝不同類型數據的數組</td></tr></tbody></table><h2 id="類型批註"><a href="#類型批註" class="headerlink" title="類型批註"></a>類型批註</h2><p>通過類型批註提供在編譯時啟動類型檢查的靜態類型，這是可選的，而且可以忽略而使用 <code>JavaScript</code> 常規的動態類型</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Add</span>(<span class="params">left: number, right: number</span>): number &#123;</span><br><span class="line">  <span class="keyword">return</span> left + right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>對於基本類型的批註是 <code>number</code>、 <code>bool</code> 和 <code>string</code> ，而弱或動態類型的結構則是 <code>any</code> 類型</p><h2 id="類型推斷"><a href="#類型推斷" class="headerlink" title="類型推斷"></a>類型推斷</h2><p>當類型沒有給出時，<code>TypeScript</code> 編譯器利用類型推斷來推斷類型，如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;string&quot;</span>;</span><br></pre></td></tr></table></figure><p>變量 <code>str</code> 被推斷為字符串類型，這種推斷發生在初始化變量和成員，設置默認參數值和決定函數返回值時</p><p>如果缺乏聲明而不能推斷出類型，那麼它的類型被視作默認的動態 <code>any</code> 類型</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口簡單來說就是用來描述對象的類型數據的類型有<code>number</code>、<code>null</code>、<code>string</code>等數據格式，對象的類型就是用接口來描述的</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">  <span class="attr">age</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">tom</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="JavaScript-與-TypeScript-差異"><a href="#JavaScript-與-TypeScript-差異" class="headerlink" title="JavaScript  與 TypeScript 差異"></a>JavaScript  與 TypeScript 差異</h2><ul><li><code>TypeScript</code> 是 <code>JavaScript</code> 的超集，擴展了<code>JavaScript</code> 的語法</li><li><code>TypeScript</code> 可處理已有的<code>JavaScript</code> 代碼，並只對其中的<code>TypeScript</code> 代碼進行編譯</li><li><code>TypeScript</code> 文件的後綴名.ts （.ts，.tsx，.dts），<code>JavaScript</code> 文件是.js</li><li>在編寫<code>TypeScript</code> 的文件的時候就會自動編譯成 js 文件</li></ul><table><thead><tr><th align="center"></th><th align="center">JavaScript</th><th align="center">TypeScript</th></tr></thead><tbody><tr><td align="center">語言</td><td align="center">腳本語言</td><td align="center">面向對象</td></tr><tr><td align="center">學習難度</td><td align="center">靈活易學</td><td align="center">對於JS要有一定程度的理解</td></tr><tr><td align="center">類型</td><td align="center">輕量級</td><td align="center">強類型</td></tr><tr><td align="center">客戶端&#x2F;服務</td><td align="center">客戶端 跟 服務端 都有</td><td align="center">注重客戶端</td></tr><tr><td align="center">名稱</td><td align="center">.js</td><td align="center">.ts 或 .tsx</td></tr><tr><td align="center">耗時</td><td align="center">更快</td><td align="center">編譯需花費時間</td></tr><tr><td align="center">數據綁定</td><td align="center">無</td><td align="center">使用Class 及 接口來綁定數據</td></tr><tr><td align="center">靜態類型</td><td align="center">沒有靜態類型的概念</td><td align="center">O 支持靜態類型</td></tr><tr><td align="center">模塊化</td><td align="center">X</td><td align="center">O</td></tr><tr><td align="center">接口</td><td align="center">X</td><td align="center">O</td></tr><tr><td align="center">可選參數方法</td><td align="center">X</td><td align="center">O</td></tr><tr><td align="center">原型</td><td align="center">X</td><td align="center">O</td></tr><tr><td align="center">參考選擇</td><td align="center">小型專案</td><td align="center">較適合大型專案</td></tr></tbody></table><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.cnblogs.com/powertoolsteam/p/13500668.html">TypeScript是什么，为什么要使用它？</a></li><li><a href="https://www.jianshu.com/p/c8aaba6e8ce0">Typescript面试题</a></li><li><a href="https://zhuanlan.zhihu.com/p/140012915">“前浪” JavaScript，“后浪” TypeScript</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;JS學習完，該碰碰TS了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.tenor.com/642Dz5h3nxsAAAAC/spongebob-sweeping.gif&quot; alt=&quot;gif&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://supermarpig.github.io/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://supermarpig.github.io/tags/TypeScript/"/>
    
    <category term="泛型" scheme="https://supermarpig.github.io/tags/%E6%B3%9B%E5%9E%8B/"/>
    
    <category term="面向對象" scheme="https://supermarpig.github.io/tags/%E9%9D%A2%E5%90%91%E5%B0%8D%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Node.js Express 創建伺服器</title>
    <link href="https://supermarpig.github.io/2023/05/16/Node-js-Express-%E5%89%B5%E5%BB%BA%E4%BC%BA%E6%9C%8D%E5%99%A8/"/>
    <id>https://supermarpig.github.io/2023/05/16/Node-js-Express-%E5%89%B5%E5%BB%BA%E4%BC%BA%E6%9C%8D%E5%99%A8/</id>
    <published>2023-05-16T15:27:25.000Z</published>
    <updated>2023-05-17T01:14:49.076Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>研究如何創建伺服器<br>之後要來讀取mongo DB資料庫</p><span id="more"></span><h1 id="Back-end"><a href="#Back-end" class="headerlink" title="Back-end"></a>Back-end</h1><h2 id="創建一個伺服器server"><a href="#創建一個伺服器server" class="headerlink" title="創建一個伺服器server"></a>創建一個伺服器server</h2><p>創建前需要初始化 package.jason 文件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package <span class="attr">name</span>: (shorturl) short-url-server</span><br><span class="line"><span class="attr">version</span>: (<span class="number">1.0</span><span class="number">.0</span>)</span><br><span class="line"><span class="attr">description</span>: <span class="variable constant_">MERN</span>-short-url</span><br><span class="line">entry <span class="attr">point</span>: (index.<span class="property">js</span>) server.<span class="property">js</span>  <span class="comment">//入口文件</span></span><br><span class="line">test <span class="attr">command</span>:</span><br><span class="line">git <span class="attr">repository</span>:</span><br><span class="line"><span class="attr">keywords</span>:</span><br><span class="line"><span class="attr">author</span>: msonline</span><br><span class="line"><span class="attr">license</span>: (<span class="variable constant_">ISC</span>)</span><br></pre></td></tr></table></figure><p>弄好後會有 剛剛的訊息再 package.json 文件內</p><p>接下來 安裝express框架</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express</span><br></pre></td></tr></table></figure><p>然後可以先創建一個Backend 的資料夾</p><p>裡面放server.js 入口文件檔案</p><p>在新增一個Data的資料夾準備放資料庫的文件檔案</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/61834f5c-0a87-49b7-ba7b-8a5678331a90/Untitled.png" alt="Untitled"></p><p>接下來 來到server.js 來連接服務器</p><p>需要先引入express框架</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  ./data/product.js</span></span><br><span class="line">確認內部為</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=products</span><br><span class="line"></span><br><span class="line">而不是</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> products</span><br><span class="line"></span><br><span class="line">不然會有錯</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  server.js </span></span><br><span class="line"><span class="keyword">const</span> express =<span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> products =<span class="built_in">require</span>(<span class="string">&#x27;./data/products&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app =<span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">5000</span>,<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;伺服器已經在5000 port運行中...&#x27;</span>))</span><br></pre></td></tr></table></figure><p>然後在小黑窗輸入 </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node backend/server</span><br></pre></td></tr></table></figure><p>就會顯示</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/33c52f13-2667-4e5e-b3cd-039c6d81eb2d/Untitled.png" alt="Untitled"></p><p>但是目前還沒創建路由</p><p>所以還沒畫面顯示</p><p>為了使用更方便</p><p>回到package.json檔案修改 script</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改為常用的start</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;node backend/server&quot;</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>回到server.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;服務器已經運行...&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新增文字測試 是否可以運行伺服器</p><p>新增完後，重新輸入 npm start</p><p>即可得到下面畫面</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e24dda53-5f80-4f0b-b45d-714b37c60981/Untitled.png" alt="Untitled"></p><p>新增 獲取資料的語法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//所有產品 url輸入/api/products 可以得到</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/products&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">json</span>(products)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//單個產品</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/products/:id&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> product =products.<span class="title function_">find</span>(<span class="function"><span class="params">product</span>=&gt;</span> product.<span class="property">_id</span>  === req.<span class="property">params</span>.<span class="property">id</span>)</span><br><span class="line">    res.<span class="title function_">json</span>(product)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在URL 輸入 </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:5000/api/products/1</span></span><br></pre></td></tr></table></figure><p>能得到所有產品</p><p>後面加&#x2F;1 </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:5000/api/products/1</span></span><br></pre></td></tr></table></figure><p>能得到id &#x3D;1的產品</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;研究如何創建伺服器&lt;br&gt;之後要來讀取mongo DB資料庫&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Input Focus 踩坑紀錄</title>
    <link href="https://supermarpig.github.io/2023/05/04/Input-Focus-%E8%B8%A9%E5%9D%91%E7%B4%80%E9%8C%84/"/>
    <id>https://supermarpig.github.io/2023/05/04/Input-Focus-%E8%B8%A9%E5%9D%91%E7%B4%80%E9%8C%84/</id>
    <published>2023-05-04T08:16:47.000Z</published>
    <updated>2023-05-04T08:50:06.426Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h2 id="紀錄一下-在手機上-使用input的狀況下-遇到的問題"><a href="#紀錄一下-在手機上-使用input的狀況下-遇到的問題" class="headerlink" title="紀錄一下 在手機上 使用input的狀況下 遇到的問題"></a>紀錄一下 在手機上 使用input的狀況下 遇到的問題<br><span id="more"></span></h2><h2 id="Ios-input-focus-頁面會放大"><a href="#Ios-input-focus-頁面會放大" class="headerlink" title="Ios input focus 頁面會放大"></a>Ios input focus 頁面會放大</h2><p>ios在手機瀏覽時，點擊<code>input</code>時，螢幕會自動<code>放大</code>，造成頁面可以左右滑動的問題。</p><blockquote><p><code>textarea</code>框好像也會有這方面的問題</p></blockquote><p>在網路上找到很多原因，但好像也沒有比較有關連性的<br>比較有建設性的說法</p><blockquote><p>蘋果覺得點擊輸入框放大是一個“很好”的體驗，就擅自把頁面給放大了</p></blockquote><h3 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h3><p>試了很多種，以下方法符合我的使用狀況  ↓</p><p>發現在 <code>font-size</code> &lt; <code>16px</code> 時， safari 會幫你放大</p><p>所以只要將 點擊input後顯示的畫面內容 的<code>font-size</code> 更改為16px 即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//input</span></span><br><span class="line">font-<span class="attr">size</span>:16px;</span><br></pre></td></tr></table></figure><hr><h2 id="input-點擊時-，跳出一層Div-來輸入時，-還是可以滑動底層的scroll"><a href="#input-點擊時-，跳出一層Div-來輸入時，-還是可以滑動底層的scroll" class="headerlink" title="input 點擊時 ，跳出一層Div 來輸入時， 還是可以滑動底層的scroll"></a>input 點擊時 ，跳出一層Div 來輸入時， 還是可以滑動底層的scroll</h2><h3 id="情境說明"><a href="#情境說明" class="headerlink" title="情境說明"></a>情境說明</h3><p>在表單選項中，有一個<code>input</code> 點擊時，會跳出一時，會跳出一<code>Div</code>裡面有地址選項給user點擊，<br>但發現跳出來時，可以滑動前面畫面的Scroll Y軸 影響使用體驗!!</p><h3 id="解決方式"><a href="#解決方式" class="headerlink" title="解決方式"></a>解決方式</h3><p>在CSS 設定一個<code>position</code>選項</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hidden</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然後在JS 中 新增下列兩個function</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> topNum;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onShow</span>(<span class="params"></span>)&#123;</span><br><span class="line">    topNum = $(<span class="string">&quot;body&quot;</span>).<span class="title function_">scrollTop</span>()</span><br><span class="line">    $(<span class="string">&quot;body&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;hidden&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onHide</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;body&quot;</span>).<span class="title function_">removeClass</span>(<span class="string">&quot;hidden&quot;</span>)</span><br><span class="line">    $(<span class="string">&quot;body&quot;</span>).<span class="title function_">scrollTop</span>(topNum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然後新增一個監聽事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.inputBTN&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="comment">//loading 點點開啟</span></span><br><span class="line">        $(<span class="string">&quot;.loading-flex&quot;</span>).<span class="title function_">show</span>();</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            $(<span class="string">&quot;#writeBTN&quot;</span>).<span class="title function_">trigger</span>(<span class="string">&#x27;focus&#x27;</span>);</span><br><span class="line">            <span class="title function_">onShow</span>();                            <span class="comment">//&lt;----------------------開啟   加在這裡</span></span><br><span class="line">            <span class="comment">//把 loading的點點點關掉</span></span><br><span class="line">            $(<span class="string">&quot;.loading-flex&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;.close-btn&quot;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">onHide</span>();                            <span class="comment">//&lt;----------------------關閉    加在這裡</span></span><br><span class="line">        &#125;, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上是最近<code>input</code>  點擊事件有遇到的紀錄</p><p>如有錯誤再麻煩跟我分享</p><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://cloud.tencent.com/developer/article/1546543">input聚焦時頁面放大的解決</a></li><li><a href="https://www.astralweb.com.tw/stop-zoom-in-on-input-focus-on-mobile-devices/">在行動裝置上避免點擊輸入框時畫面放大</a></li><li><a href="https://hackmd.io/@eating-coding/fe-note/https%3A%2F%2Fhackmd.io%2F%40eating-coding%2FB1_4ogB8K">iOS input&#x2F;textarea focus時頁面放大</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h2 id=&quot;紀錄一下-在手機上-使用input的狀況下-遇到的問題&quot;&gt;&lt;a href=&quot;#紀錄一下-在手機上-使用input的狀況下-遇到的問題&quot; class=&quot;headerlink&quot; title=&quot;紀錄一下 在手機上 使用input的狀況下 遇到的問題&quot;&gt;&lt;/a&gt;紀錄一下 在手機上 使用input的狀況下 遇到的問題&lt;br&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="input" scheme="https://supermarpig.github.io/tags/input/"/>
    
    <category term="focus" scheme="https://supermarpig.github.io/tags/focus/"/>
    
    <category term="JS" scheme="https://supermarpig.github.io/tags/JS/"/>
    
    <category term="IOS" scheme="https://supermarpig.github.io/tags/IOS/"/>
    
  </entry>
  
  <entry>
    <title>每天一點點，學習ES6-九-Generators</title>
    <link href="https://supermarpig.github.io/2023/04/28/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E4%B9%9D-Generators/"/>
    <id>https://supermarpig.github.io/2023/04/28/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E4%B9%9D-Generators/</id>
    <published>2023-04-28T06:58:49.000Z</published>
    <updated>2023-05-03T02:44:07.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>學會了異步 <code>promise</code> 來來研究<code>Generators</code></p><p><img src="https://media.tenor.com/CiJuhjUFaeIAAAAC/gojo-satoru-jujutsu-kaisen.gif" alt="雀躍"></p><span id="more"></span><hr><h2 id="傳統方法"><a href="#傳統方法" class="headerlink" title="傳統方法"></a>傳統方法</h2><p>ES6 誕生以前，不同步驟的方法，大致有下面四種。</p><ul><li>回調函數</li><li>事件監聽</li><li>發布&#x2F;訂閱</li><li>承諾對象<br>Generator 函數將 JavaScript 異步編程帶入了一個全新的階段。</li></ul><h2 id="回調函數"><a href="#回調函數" class="headerlink" title="回調函數"></a>回調函數</h2><p>就是大家所稱的 <code>CallBack</code></p><blockquote><p>JavaScript 對異常編寫程序的實際發現，就是回調函數。</p></blockquote><p>所稱回調函數，就是把任務的第二段單獨寫在一個函數裡，等到重新執行進行這個任務的時候，就直接調用這個函數。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;/etc/passwd&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p><a href="https://supermarpig.github.io/2023/04/24/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E4%B8%83-Promise/#more">promise</a></p><p>如果想深入了解可以去之前 的地方看看:)</p><blockquote><p>以上都是比較常用的異步解決方法，之後還有<code>async/await</code><br>接下來要研究今天的主角 <strong><code>Generator</code></strong></p></blockquote><h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><p>執行 <code>Generator</code> 函數會返回一個遍歷器<code>Obj對象</code>，可以依次遍歷 Generator 函數內部的每一個狀態</p><p>形式上，Generator函數是一個普通函數，但是有兩個特徵：</p><ul><li><code>function</code>關鍵字與函數名之間有一個<code>星號</code></li><li>函數體內部使用<code>yield</code>表達式，定義不同的內部狀態</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">helloWorldGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;ending&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p><code>Generator</code>會返回一個遍歷器對象，即具有<code>Symbol.iterator</code>屬性，並且返回給自己</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// some code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = <span class="title function_">gen</span>();</span><br><span class="line"></span><br><span class="line">g[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() === g</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>通過<code>yield</code>關鍵字可以暫停<code>generator</code>函數返回的遍歷器<code>對象</code>的狀態</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">helloWorldGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;ending&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> hw = <span class="title function_">helloWorldGenerator</span>();</span><br></pre></td></tr></table></figure><p>上述存在三個狀態：<code>hello</code>、<code>world</code>、<code>return</code><br>需要透過<code>next</code>方法，來取到它的內部狀態，運行邏輯如下：</p><ul><li>遇到<code>yield</code>表達式，就暫停執行後面的操作，並將緊跟在<code>yield</code>後面的那個表達式的值，作為返回的對象的value屬性值。</li><li>下一次調用<code>next</code>方法時，再繼續往下執行，直到遇到下一個<code>yield</code>表達式</li><li>如果沒有再遇到新的<code>yield</code>表達式，就一直運行到函數結束，直到<code>return</code>語句為止，並將<code>return</code>語句後面的表達式的值，作為返回的對象的<code>value</code>屬性值。</li><li>如果該函數沒有<code>return</code>語句，則返回的對象的<code>value</code>屬性值為<code>undefined</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">hw.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">// &#123; value: &#x27;hello&#x27;, done: false &#125;</span></span><br><span class="line"></span><br><span class="line">hw.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">// &#123; value: &#x27;world&#x27;, done: false &#125;</span></span><br><span class="line"></span><br><span class="line">hw.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">// &#123; value: &#x27;ending&#x27;, done: true &#125;</span></span><br><span class="line"></span><br><span class="line">hw.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br><span class="line"></span><br><span class="line">hw.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><p><code>done</code>用來判斷是否存在下個狀態，<code>value</code>對應狀態值</p><p><code>yield</code>表達式本身沒有返回值，或者說總是返回<code>undefined</code></p><p>通過調用<code>next</code>方法可以帶一個參數，該參數就會被當作上一個<code>yield</code>表達式的返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="number">2</span> * (<span class="keyword">yield</span> (x + <span class="number">1</span>));</span><br><span class="line">  <span class="keyword">var</span> z = <span class="keyword">yield</span> (y / <span class="number">3</span>);</span><br><span class="line">  <span class="keyword">return</span> (x + y + z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="title function_">foo</span>(<span class="number">5</span>);</span><br><span class="line">a.<span class="title function_">next</span>() <span class="comment">// Object&#123;value:6, done:false&#125;</span></span><br><span class="line">a.<span class="title function_">next</span>() <span class="comment">// Object&#123;value:NaN, done:false&#125;</span></span><br><span class="line">a.<span class="title function_">next</span>() <span class="comment">// Object&#123;value:NaN, done:true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="title function_">foo</span>(<span class="number">5</span>);</span><br><span class="line">b.<span class="title function_">next</span>() <span class="comment">// &#123; value:6, done:false &#125;</span></span><br><span class="line">b.<span class="title function_">next</span>(<span class="number">12</span>) <span class="comment">// &#123; value:8, done:false &#125;</span></span><br><span class="line">b.<span class="title function_">next</span>(<span class="number">13</span>) <span class="comment">// &#123; value:42, done:true &#125;</span></span><br></pre></td></tr></table></figure><p>正因為<code>Generator</code>函數返回<code>Iterator</code>對象，因此我們還可以通過<code>for...of</code>進行遍歷</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">foo</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 2 3 4 5</span></span><br></pre></td></tr></table></figure><p>原生<code>Obj</code>沒有遍歷<code>接口</code>，通過<code>Generator</code>函數為它加上這個接口，就能使用<code>for...of</code>進行遍歷了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">objectEntries</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> propKeys = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> propKey <span class="keyword">of</span> propKeys) &#123;</span><br><span class="line">    <span class="keyword">yield</span> [propKey, obj[propKey]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> jane = &#123; <span class="attr">first</span>: <span class="string">&#x27;Jane&#x27;</span>, <span class="attr">last</span>: <span class="string">&#x27;Doe&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> <span class="title function_">objectEntries</span>(jane)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// first: Jane</span></span><br><span class="line"><span class="comment">// last: Doe</span></span><br></pre></td></tr></table></figure><h2 id="異步的解決方案"><a href="#異步的解決方案" class="headerlink" title="異步的解決方案"></a>異步的解決方案</h2><p>回顧之前展開異步解決的方案：</p><ul><li>回調函數 Callback</li><li>Promise 對象</li><li>generator 函數</li><li>async&#x2F;await<br>這裡通過文件讀取案例，將幾種解決異步的方案進行一個比較：</li></ul><hr><h3 id="回調函數-CallBack"><a href="#回調函數-CallBack" class="headerlink" title="回調函數 CallBack"></a>回調函數 CallBack</h3><p>所謂<code>回調函數 CallBack</code>，就是把任務的第二段單獨寫在一個函數里面，等到重新執行這個任務的時候，再調用這個函數</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;/etc/fstab&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  fs.<span class="title function_">readFile</span>(<span class="string">&#x27;/etc/shells&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>readFile</code>函數的第三個參數，就是回調函數，等到操作系統返回了<code>/etc/passwd</code>這個文件以後，<code>回調函數 CallBack</code>才會執行</p><h3 id="Promise-對象"><a href="#Promise-對象" class="headerlink" title="Promise 對象"></a>Promise 對象</h3><p><code>Promise</code>就是為了解決回調地獄而產生的，將回調函數的嵌套，改成鍊式調用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readFile = <span class="keyword">function</span> (<span class="params">fileName</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(fileName, <span class="keyword">function</span>(<span class="params">error, data</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="title function_">reject</span>(error);</span><br><span class="line">      <span class="title function_">resolve</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">readFile</span>(<span class="string">&#x27;/etc/fstab&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">readFile</span>(<span class="string">&#x27;/etc/shells&#x27;</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>這種鍊式操作形式，使<code>異步任務</code>的兩段執行更清楚了，但是也存在了很明顯的問題，代碼變得冗雜了，語義化並不強</p></blockquote><h3 id="generator-函數"><a href="#generator-函數" class="headerlink" title="generator 函數"></a>generator 函數</h3><p><code>yield</code>表達式可以暫停函數執行，<code>next方法</code>用於恢復函數執行，這使得<code>Generator</code>函數非常適合將<code>異步任務同步化</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gen = <span class="keyword">function</span>* () &#123;</span><br><span class="line">  <span class="keyword">const</span> f1 = <span class="keyword">yield</span> <span class="title function_">readFile</span>(<span class="string">&#x27;/etc/fstab&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> f2 = <span class="keyword">yield</span> <span class="title function_">readFile</span>(<span class="string">&#x27;/etc/shells&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="title function_">toString</span>());</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(f2.<span class="title function_">toString</span>());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="async-x2F-await"><a href="#async-x2F-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h3><p>將上面Generator函數改成async&#x2F;await形式，更為簡潔，語義化更強了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> asyncReadFile = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> f1 = <span class="keyword">await</span> <span class="title function_">readFile</span>(<span class="string">&#x27;/etc/fstab&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> f2 = <span class="keyword">await</span> <span class="title function_">readFile</span>(<span class="string">&#x27;/etc/shells&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="title function_">toString</span>());</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(f2.<span class="title function_">toString</span>());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="區別"><a href="#區別" class="headerlink" title="區別"></a>區別</h2><p>通過上述代碼進行分析，將<code>promise</code>、<code>Generator</code>、<code>async/await</code>進行比較：</p><ul><li><code>promise</code>和<code>async/await</code>是專門用於處理異步操作的  </li><li><code>Generator</code>並不是為異步而設計出來的，它還有其他功能（對象迭代、控制輸出、部署Interator接口…）</li><li><code>promise</code>編寫代碼相比<code>Generator</code>、async更為複雜化，且可讀性也稍差</li><li><code>Generator</code>、<code>async</code>需要與<code>promise</code>對象搭配處理異步情況</li><li><code>async</code>實質是<code>Generator</code>的語法糖，相當於會自動執行<code>Generator</code>函數</li><li><code>async</code>使用上更為簡潔，將異步代碼以同步的形式進行編寫，是處理異步編程的最終方案</li></ul><h2 id="使用場景"><a href="#使用場景" class="headerlink" title="使用場景"></a>使用場景</h2><p><code>Generator</code>是異步解決的一種方案，最大特點則是將異步操作同步化表達出來</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">loadUI</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">showLoadingScreen</span>();</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">loadUIDataAsynchronously</span>();</span><br><span class="line">  <span class="title function_">hideLoadingScreen</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> loader = <span class="title function_">loadUI</span>();</span><br><span class="line"><span class="comment">// 加载UI</span></span><br><span class="line">loader.<span class="title function_">next</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载UI</span></span><br><span class="line">loader.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure><blockquote><p>包括<code>redux-saga</code>中間件也充分利用了<code>Generator</code>特性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; call, put, takeEvery, takeLatest &#125; <span class="keyword">from</span> <span class="string">&#x27;redux-saga/effects&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Api</span> <span class="keyword">from</span> <span class="string">&#x27;...&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">fetchUser</span>(<span class="params">action</span>) &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> user = <span class="keyword">yield</span> <span class="title function_">call</span>(<span class="title class_">Api</span>.<span class="property">fetchUser</span>, action.<span class="property">payload</span>.<span class="property">userId</span>);</span><br><span class="line">      <span class="keyword">yield</span> <span class="title function_">put</span>(&#123;<span class="attr">type</span>: <span class="string">&quot;USER_FETCH_SUCCEEDED&quot;</span>, <span class="attr">user</span>: user&#125;);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">yield</span> <span class="title function_">put</span>(&#123;<span class="attr">type</span>: <span class="string">&quot;USER_FETCH_FAILED&quot;</span>, <span class="attr">message</span>: e.<span class="property">message</span>&#125;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">mySaga</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">takeEvery</span>(<span class="string">&quot;USER_FETCH_REQUESTED&quot;</span>, fetchUser);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">mySaga</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">takeLatest</span>(<span class="string">&quot;USER_FETCH_REQUESTED&quot;</span>, fetchUser);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> mySaga;</span><br></pre></td></tr></table></figure><blockquote><p>還能利用<code>Generator</code>函數，在對像上實現<code>Iterator</code>接口</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">iterEntries</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i &lt; keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> key = keys[i];</span><br><span class="line">    <span class="keyword">yield</span> [key, obj[key]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myObj = &#123; <span class="attr">foo</span>: <span class="number">3</span>, <span class="attr">bar</span>: <span class="number">7</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> <span class="title function_">iterEntries</span>(myObj)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo 3</span></span><br><span class="line"><span class="comment">// bar 7</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://media.tenor.com/_VHMupraJ14AAAAM/criticalbard-wah.gif" alt="dance"></p><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://javascript.info/generators">Generators</a></li><li><a href="https://es6.ruanyifeng.com/#docs/generator-async">Generator 函数的异步应用</a></li><li><a href="https://pjchender.dev/javascript/js-generator/">[JS] JavaScript Generator 的使用</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;學會了異步 &lt;code&gt;promise&lt;/code&gt; 來來研究&lt;code&gt;Generators&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.tenor.com/CiJuhjUFaeIAAAAC/gojo-satoru-jujutsu-kaisen.gif&quot; alt=&quot;雀躍&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="https://supermarpig.github.io/tags/ES6/"/>
    
    <category term="ECMAScript 6" scheme="https://supermarpig.github.io/tags/ECMAScript-6/"/>
    
    <category term="JavaScript" scheme="https://supermarpig.github.io/tags/JavaScript/"/>
    
    <category term="每天一點點" scheme="https://supermarpig.github.io/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E/"/>
    
    <category term="Generators" scheme="https://supermarpig.github.io/tags/Generators/"/>
    
  </entry>
  
  <entry>
    <title>JQuery 找父層最外層 closest</title>
    <link href="https://supermarpig.github.io/2023/04/26/JQuery-%E6%89%BE%E7%88%B6%E5%B1%A4%E6%9C%80%E5%A4%96%E5%B1%A4-closest/"/>
    <id>https://supermarpig.github.io/2023/04/26/JQuery-%E6%89%BE%E7%88%B6%E5%B1%A4%E6%9C%80%E5%A4%96%E5%B1%A4-closest/</id>
    <published>2023-04-26T01:19:57.000Z</published>
    <updated>2023-04-28T06:57:45.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>工作中有遇到這個情形<br>來記錄一下</p><span id="more"></span><p>我有一個HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;destination&quot;</span> <span class="attr">class</span>=<span class="string">&quot;destination Modules fade&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Modules_Wrapper&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog xl&quot;</span> <span class="attr">style</span>=<span class="string">&quot;max-width: 1207px&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span> <span class="attr">data-direction</span>=<span class="string">&quot;horizontal&quot;</span> <span class="attr">data-section</span>=<span class="string">&quot;section1&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;Modules&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon ic-ln&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;Modules&quot;</span>&gt;</span><span class="symbol">&amp;#xe608;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;Item&quot;</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;Item-list&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;Item-list&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;Item-list&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;Item-list&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;Item-list&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;Item-list&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;Item-list&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>JS</code>中 有一段需要點及List 來找返回其他頁面<br>但不知道點擊的是哪一個 <code>ID</code><br>需要到最外層 才有<code>ID</code></p><p>這時候就可以用JQ 來找到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;Item-list&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找到最外層的 那個 Modules 套件的calss 然後取他的ID</span></span><br><span class="line">        <span class="keyword">let</span> itemName = e.<span class="property">target</span>.<span class="title function_">closest</span>(<span class="string">&quot;.Modules&quot;</span>).<span class="property">id</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判斷 itemName 是誰點擊 ，然後給外面的input 添加Value</span></span><br><span class="line">        <span class="keyword">switch</span> (itemName) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;departure-location&quot;</span>:</span><br><span class="line">                $(<span class="string">&quot;#departurePlace&quot;</span>).<span class="title function_">val</span>(e.<span class="property">target</span>.<span class="property">innerText</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;destination&quot;</span>:</span><br><span class="line">                $(<span class="string">&quot;#return-destination&quot;</span>).<span class="title function_">val</span>(e.<span class="property">target</span>.<span class="property">innerText</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>其中 <code>e.target.closest(&quot;.Modules&quot;).id</code></p><p>這句話的意思就是</p><p>找到點擊的那個事件開始<br>往父層找 到 <code>.Modules</code>的那個 Class<br><code>.id</code>然後找到他他的ID</p><p>這樣就可以了~~~</p><p>往子層找 也有一個方法叫做 <code>find()</code><br>使用方法也是一樣</p><p><img src="https://media.tenor.com/A67Q1bUXpmYAAAAd/stephen-curry-rings.gif" alt="thanks"></p><blockquote><p>大致上是這樣<br>如果有錯再麻煩糾正我<br>感謝 : )</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;工作中有遇到這個情形&lt;br&gt;來記錄一下&lt;/p&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://supermarpig.github.io/tags/JS/"/>
    
    <category term="JQuery" scheme="https://supermarpig.github.io/tags/JQuery/"/>
    
  </entry>
  
  <entry>
    <title>每天一點點，學習ES6-八-Promise 實例</title>
    <link href="https://supermarpig.github.io/2023/04/25/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E5%85%AB-Promise-%E5%AF%A6%E4%BE%8B/"/>
    <id>https://supermarpig.github.io/2023/04/25/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E5%85%AB-Promise-%E5%AF%A6%E4%BE%8B/</id>
    <published>2023-04-25T01:12:15.000Z</published>
    <updated>2023-04-25T09:55:02.433Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天研究完原理 及 一點點低基礎 還有流程</p><p>趁著記憶猶新 來看看實際用法</p><p><img src="https://media.tenor.com/B5_d8kamVzcAAAAM/aaron-rodgers-smile.gif" alt="推眼鏡"></p><span id="more"></span><h2 id="Promise-實例"><a href="#Promise-實例" class="headerlink" title="Promise 實例"></a>Promise 實例</h2><p>Promise的 <strong><code>then</code></strong> 、 <strong><code>catch</code></strong> 、 <strong><code>finally</code></strong> 方法，</p><p>都屬於<code>Promise</code>的實例方法，都是存放在 <strong><code>Promise</code></strong> 的 <strong><code>prototype</code></strong> 上的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(<span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>))</span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7aff503ab0fa41d3a7c0f21280c817ee~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="promise實例方法"></p><p>以上是<code>F12</code> 看到的實例方法</p><h3 id="then"><a href="#then" class="headerlink" title="then()"></a>then()</h3><p><code>then</code>是實例狀態發生改變時的<code>回調函數</code>，</p><ul><li>第一個參數是<code>resolved狀態</code>的回調函數</li><li>第二個參數是<code>rejected狀態</code>的回調函數</li></ul><blockquote><p><code>then</code>方法返回的是一個 <code>新的</code>Promise實例，也就是<code>promise</code>能 <strong><code>鍊式書寫</code></strong> 的原因</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getJSON</span>(<span class="string">&quot;/posts.json&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">json</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> json.<span class="property">post</span>;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">post</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="catch"><a href="#catch" class="headerlink" title="catch()"></a>catch()</h3><p>catch()方法是 <code>.then(null, rejection)</code>或<code>.then(undefined, rejection)</code>的別名，</p><blockquote><p>用於指定發生錯誤時的回調函數</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getJSON</span>(<span class="string">&#x27;/posts.json&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">posts</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 處理 getJSON 和 前一個回調函數運行時發生的錯誤</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发生错误！&#x27;</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>Promise</code>對象的錯誤具有“冒泡”性質，會一直向後傳遞，直到<code>被捕獲</code>為止</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getJSON</span>(<span class="string">&#x27;/post/1.json&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">post</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">getJSON</span>(post.<span class="property">commentURL</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">comments</span>) &#123;</span><br><span class="line">  <span class="comment">// some code</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 處理前面三個Promise產生的錯誤</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>一般來說，使用<code>catch</code>方法代替<code>then()</code>第二個參數</p><p><code>Promise</code>對象拋出的錯誤不會傳遞到外層代碼，即不會有任何反應</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> someAsyncThing = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="comment">// 下面一行會報錯，因為X沒有聲明</span></span><br><span class="line">    <span class="title function_">resolve</span>(x + <span class="number">2</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>瀏覽器運行到這一行，<br>會打印出錯誤提示ReferenceError: x is not defined，<br>但是不會退出進程</p><p><code>catch()</code>方法之中，還能再拋出<code>錯誤</code>，通過後面<code>catch</code>方法<code>捕獲</code>到</p><p>再舉個例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&quot;111111&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;err1:&quot;</span>, err)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err2</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;err2:&quot;</span>, err2)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res result:&quot;</span>, res)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// err1: 111111</span></span><br><span class="line"><span class="comment">// res result: undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果希望後續能夠執行 <strong><code>catch</code></strong> ，那麼需要拋出一個異常</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&quot;111111&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res:&quot;</span>, res)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;err:&quot;</span>, err)</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;catch return value&quot;</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res result:&quot;</span>, res)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;err result:&quot;</span>, err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// err: 111111</span></span><br><span class="line"><span class="comment">// err result: Error: catch return value</span></span><br></pre></td></tr></table></figure><h3 id="finally"><a href="#finally" class="headerlink" title="finally()"></a>finally()</h3><p><code>finally()</code>方法用於指定不管<code>Promise</code> 對象最後狀態如何，<code>都會執行</code>的操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">promise</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;···&#125;);</span><br></pre></td></tr></table></figure><h2 id="Promise-API-也稱構造函數方法"><a href="#Promise-API-也稱構造函數方法" class="headerlink" title="Promise API 也稱構造函數方法"></a>Promise API 也稱構造函數方法</h2><p>總共有以下的方法：</p><table><thead><tr><th align="center">Promise API</th><th align="center"></th></tr></thead><tbody><tr><td align="center">all()</td><td align="center"><code>Promise.all()</code>方法用於將多個 Promise實例，包裝成一個新的 Promise實例</td></tr><tr><td align="center">race()</td><td align="center"><code>Promise.race()</code>方法同樣是將多個Promise 實例，包裝成一個新的Promise 實例</td></tr><tr><td align="center">allSettled()</td><td align="center"><code>Promise.allSettled()</code>方法接受一組Promise 實例作為參數，包裝成一個新的Promise 實例<br>只有等到所有這些參數實例都返回結果，不管是<code>fulfilled</code>還是<code>rejected</code>，包裝實例才會結束</td></tr><tr><td align="center">resolve()</td><td align="center"><code>Promise.resolve()</code>將現有對象轉為 Promise對象</td></tr><tr><td align="center">reject()</td><td align="center"><code>Promise.reject(reason)</code>方法也會返回一個新的Promise 實例，該實例的狀態為rejected</td></tr></tbody></table><h3 id="all"><a href="#all" class="headerlink" title="all()"></a>all()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2, p3]);</span><br></pre></td></tr></table></figure><p>接受一個<code>數組Array</code>（疊代對象）作為參數，數組成員都應為Promise實例</p><p>實例p的狀態由<code>p1</code>、<code>p2</code>、<code>p3</code>決定，分為兩種：</p><ul><li>只有<code>p1</code>、<code>p2</code>、<code>p3</code>的狀態都變成<code>fulfilled</code>，p的狀態才會變成<code>fulfilled</code>，此時<code>p1</code>、<code>p2</code>、<code>p3</code>的返回值組成一個數組，傳遞給p的回調函數</li><li>只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一個被<code>rejected</code>，p的狀態就變成<code>rejected</code>，此時第一個被<code>reject</code>的實例的返回值，會傳遞給p的回調函數</li></ul><blockquote><p>注意，如果作為參數的 <code>Promise</code> 實例，自己定義了<code>catch</code>方法，那麼它一旦被<code>rejected</code>，並不會觸發 **<code>Promise.all()</code>**的catch方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> result)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> e);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;報錯囉&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> result)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> e);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2])</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e));</span><br><span class="line"><span class="comment">// [&quot;hello&quot;, Error: 報錯囉]</span></span><br></pre></td></tr></table></figure><p>如果p2沒有自己的<code>catch</code>方法，就會調用 **<code>Promise.all()</code>**的catch方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;報錯囉&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> result);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2])</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e));</span><br><span class="line"><span class="comment">// Error: 報錯囉</span></span><br></pre></td></tr></table></figure><hr><h3 id="race"><a href="#race" class="headerlink" title="race()"></a>race()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2, p3]);</span><br></pre></td></tr></table></figure><p>只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一個實例率先改變<code>狀態</code>，p的狀態就跟著改變</p><p>率先改變的<code>Promise</code> 實例的返回值則傳遞給p的<code>回調函數</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">race</span>([</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;/resource-that-may-take-a-while&#x27;</span>),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;request timeout&#x27;</span>)), <span class="number">5000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">p</span><br><span class="line">.<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">error</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="allSettled"><a href="#allSettled" class="headerlink" title="allSettled()"></a>allSettled()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promises = [</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;/api-1&#x27;</span>),</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;/api-2&#x27;</span>),</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;/api-3&#x27;</span>),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">allSettled</span>(promises);</span><br><span class="line"><span class="title function_">removeLoadingIndicator</span>();</span><br></pre></td></tr></table></figure><hr><h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve()"></a>resolve()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="comment">// 等於</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;foo&#x27;</span>))</span><br></pre></td></tr></table></figure><p>參數可以分成<code>四種</code>情況，分別如下：</p><ul><li>參數是一個<code>Promise</code> 實例，<code>promise.resolve</code>將不做任何修改、原封不動地返回這個實例</li><li>參數是一個<code>thenable</code>對象，<code>promise.resolve</code>會將這個對象轉為 Promise對象，然後就立即執行thenable對象的<code>then()</code>方法</li><li>參數不是<code>具有then()</code>方法的對象，或根本就不是對象，<code>Promise.resolve</code>()會返回一個新的Promise 對象，狀態為<code>resolved</code></li><li>沒有參數時，直接返回一個<code>resolved</code>狀態的Promise 對象</li></ul><hr><h3 id="reject"><a href="#reject" class="headerlink" title="reject()"></a>reject()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;出錯了&#x27;</span>);</span><br><span class="line"><span class="comment">// 等於</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">reject</span>(<span class="string">&#x27;出錯了&#x27;</span>))</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="literal">null</span>, <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 出錯了</span></span><br></pre></td></tr></table></figure><p><code>Promise.reject()</code>方法的參數，會原封不動地變成<code>後續方法</code>的參數</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;出錯了&#x27;</span>)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e === <span class="string">&#x27;出錯了&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><h2 id="使用場景"><a href="#使用場景" class="headerlink" title="使用場景"></a>使用場景</h2><blockquote><p>將圖片的加載寫成一個<code>Promise</code>，一旦加載完成，Promise的狀態就發生變化</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> preloadImage = <span class="keyword">function</span> (<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    image.<span class="property">onload</span>  = resolve;</span><br><span class="line">    image.<span class="property">onerror</span> = reject;</span><br><span class="line">    image.<span class="property">src</span> = path;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通過鍊式操作，將多個渲染數據分別給個<code>then</code>，讓其各司其職。<br>或當下個<code>異步請求</code>依賴上個請求結果的時候，我們也能夠通過<code>鍊式操作</code>友好解決問題!!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 各自做各自的事</span></span><br><span class="line"><span class="title function_">getInfo</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; bannerList &#125; = res</span><br><span class="line">    <span class="comment">//渲染輪播圖</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(bannerList)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> &#123; storeList &#125; = res</span><br><span class="line">    <span class="comment">//渲染店鋪列表</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(storeList)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; categoryList &#125; = res</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(categoryList)</span><br><span class="line">    <span class="comment">//渲染分類列表</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>通過<code>all()</code>實現多個請求合併在一起，匯總所有請求結果，只需設置一個<code>loading</code>即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">initLoad</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// loading.show() //加载loading</span></span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">getBannerList</span>(),<span class="title function_">getStoreList</span>(),<span class="title function_">getCategoryList</span>()]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        loading.<span class="title function_">hide</span>() <span class="comment">//關閉loading</span></span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">        loading.<span class="title function_">hide</span>()<span class="comment">//關閉loading</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//數據初始化    </span></span><br><span class="line"><span class="title function_">initLoad</span>();</span><br></pre></td></tr></table></figure><p>通過<code>race()</code>可以設置圖片請求超時</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//請求圖片資源</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">requestImg</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">        img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="title function_">resolve</span>(img);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//img.src = &quot;https://b-gold-cdn.xitu.io/v3/static/img/logo.a7995ad.svg&quot;; 正確的</span></span><br><span class="line">        img.<span class="property">src</span> = <span class="string">&quot;https://b-gold-cdn.xitu.io/v3/static/img/logo.a7995ad.svg1&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//延時函數，用來給請求計時</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">timeout</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;圖片請求超時&#x27;</span>);</span><br><span class="line">        &#125;, <span class="number">5000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span></span><br><span class="line">.<span class="title function_">race</span>([<span class="title function_">requestImg</span>(), <span class="title function_">timeout</span>()])</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">results</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><p>看了那麼多網頁，終於有一點點點點理解了</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://media.tenor.com/uHhB_rq-SC4AAAAC/spongebob-squarepants-dance.gif" alt="ya"></h2><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://es6.ruanyifeng.com/#docs/promise">Promise 对象</a></li><li><a href="https://juejin.cn/post/7109467029241298958">重学ES6-ES12(九)Promise简单介绍</a></li><li><a href="https://github.com/getify/You-Dont-Know-JS">You Don’t Know JS: async &amp; performance</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise">MDN-promise</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10197427">JavaScript - Promise (1)</a></li><li><a href="https://pjchender.dev/javascript/js-promise/">[JS] Promise 的使用</a></li><li><a href="https://promisesaplus.com/">Promises&#x2F;A+</a><br>-<a href="https://github.com/eyesofkids/javascript-es6-promise">從 ES6 開始的 JavaScript 學習生活</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;昨天研究完原理 及 一點點低基礎 還有流程&lt;/p&gt;
&lt;p&gt;趁著記憶猶新 來看看實際用法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.tenor.com/B5_d8kamVzcAAAAM/aaron-rodgers-smile.gif&quot; alt=&quot;推眼鏡&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="https://supermarpig.github.io/tags/ES6/"/>
    
    <category term="ECMAScript 6" scheme="https://supermarpig.github.io/tags/ECMAScript-6/"/>
    
    <category term="JavaScript" scheme="https://supermarpig.github.io/tags/JavaScript/"/>
    
    <category term="每天一點點" scheme="https://supermarpig.github.io/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E/"/>
    
    <category term="Promise" scheme="https://supermarpig.github.io/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>每天一點點，學習ES6-七-Promise</title>
    <link href="https://supermarpig.github.io/2023/04/24/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E4%B8%83-Promise/"/>
    <id>https://supermarpig.github.io/2023/04/24/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E4%B8%83-Promise/</id>
    <published>2023-04-24T03:45:59.000Z</published>
    <updated>2023-04-25T08:10:41.087Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天來研究 Promise</p><p>很多大哥學會 **<code>Promise</code>**後都覺得不過如此<br>但初次接觸 我完全看不懂啊~~~~~</p><p><img src="https://media.tenor.com/O3boKw1jQG4AAAAM/cute.gif" alt="懊惱"></p><span id="more"></span><p>在以往我們如果處理多層異步操作，我們往往會像下面那樣編寫我們的代碼</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">doSomething</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">  <span class="title function_">doSomethingElse</span>(result, <span class="keyword">function</span>(<span class="params">newResult</span>) &#123;</span><br><span class="line">    <span class="title function_">doThirdThing</span>(newResult, <span class="keyword">function</span>(<span class="params">finalResult</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;得到最终结果: &#x27;</span> + finalResult);</span><br><span class="line">    &#125;, failureCallback);</span><br><span class="line">  &#125;, failureCallback);</span><br><span class="line">&#125;, failureCallback);</span><br></pre></td></tr></table></figure><p>閱讀上面代碼，是不是很難受，上述形成了經典的<code>回調地獄</code></p><p>現在通過<code>Promise</code>的改寫上面的代碼</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">doSomething</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">doSomethingElse</span>(result);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">newResult</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">doThirdThing</span>(newResult);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">finalResult</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;得到最终结果: &#x27;</span> + finalResult);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(failureCallback);</span><br></pre></td></tr></table></figure><blockquote><p>一個 promise 代表一個異步運算的最終結果</p></blockquote><p>Promise 語法結構提供了更多的程式設計上的可能性，它是一個經過長時間實戰的結構，在許多知名的函式庫或框架中很早就有見到 Promise 物件的身影，例如 Dojo、jQuery、YUI、 Ember、Angular、WinJS、Q 等等，之後 Promises&#x2F;A+ 社區則提供了統一的標準。在最近新一代的 ES6 標準中將會包含了 Promise 的實作，提供原生的語言內建支援，這將是個開始，往後會有愈來愈多 API 以此為基礎架構在其上</p><p><code>Promise</code> 這種異步執行結構的需求，在伺服器端(Node.js)遠遠大於瀏覽器端，原因是瀏覽器通常只有會有一個使用者在操作，而且除了網路連線要求之類的 I&#x2F;O(例如 AJAX)、DOM 事件處理、動畫流程處理(計時器)外，並沒有太多需要異步執行 I&#x2F;O 處理的情況。伺服器端(Node.js)所面臨到情況就很嚴峻，除了與外部資源 I&#x2F;O 的處理情況到處都有之外，而且伺服器端(Node.js)是需要同時服務多人使用的情況。</p><p>Promise 是一個強大的異步執行流程語法結構，在 ES6 Promise 標準中，實作內容只有一個建構函式與一個then方法、一個catch方法，再加上四個必需以<code>Promise關鍵字</code>呼叫的靜態函式，<code>Promise.resolve</code>、<code>Promise.reject</code>、<code>Promise.all</code>、<code>Promise.race</code>。語法介紹頁面只有 7 頁，內容少之又少。但為何 Promise 結構不容易被理解？原因在於同步與異步回調函式執行的概念，以及其中很多流程運作，需要用另一種方式來思考要如何進行。當然，需要理解的規則也很多。</p><blockquote><p>以初學者來說，從規則來理解它的運作方式，會是比較容易進入的學習路徑。</p></blockquote><hr><p>說道 <strong><code>Promise</code></strong> 前要先了解 異步 Callback(回調)</p><h2 id="異步-Callback-回調"><a href="#異步-Callback-回調" class="headerlink" title="異步 Callback(回調)"></a>異步 Callback(回調)</h2><blockquote><p>Promise 中的所有回調函式，都是異步執行的</p></blockquote><p>但 並非所有使用Callback Function 的API 都是異步執行的!!!!</p><p>JS語言內建 API 中使用的回調函式不一定是異步執行的，也有<code>同步執行</code>的<br>例如 <strong><code>Array.forEach</code></strong></p><p>要讓開發者自訂的 <code>callbacks</code>(回調)的執行轉變為異步，有以下幾種方式:</p><ul><li>使用計時器(timer)函式: setTimeout, setInterval</li><li>特殊的函式: nextTick, setImmediate</li><li>執行 I&#x2F;O: 監聽網路、資料庫查詢或讀寫外部資源</li><li>訂閱事件</li></ul><blockquote><p>註: 執行 I&#x2F;O 的 API 通常會出現在伺服器端(Node.js)，例如讀寫檔案、資料庫互動等等，這些 API 都會經過特別的設計。瀏覽器端只有少數幾個。</p></blockquote><p>在 <code>Promise</code>結構中<code>異步回調函式</code>只是其中一個重要的參與分子，但 <code>Promise</code> 的重點並不只是在異步執行的回調函式，它可以把<code>多個異步執行的函式</code>，執行流程轉變為<code>序列執行</code>(一個接一個)，或是<code>並行執行</code>(全部都要處理完再說)，並且作更好的錯誤處理方式。也就是說，<code>Promise 結構</code>是一種異步執行的控制<code>流程架構</code></p><hr><h2 id="異步-Function-與-同步-Function"><a href="#異步-Function-與-同步-Function" class="headerlink" title="異步 Function 與 同步  Function"></a>異步 Function 與 同步  Function</h2><h3 id="同步-Function"><a href="#同步-Function" class="headerlink" title="同步 Function"></a>同步 Function</h3><blockquote><p>同步執行函式的結果要不就是回傳一個值，要不然就是執行到一半發生例外，中斷目前的程式然後拋出例外。</p></blockquote><h3 id="異步-Function"><a href="#異步-Function" class="headerlink" title="異步 Function"></a>異步 Function</h3><blockquote><p>異步執行函式的結果要不就是帶有回傳值的成功，要不就是帶有回傳理由的失敗。</p></blockquote><p>兩個看起來很像</p><p>可以理解成 ↓</p><ul><li>同步，程式 發生錯誤就會停止</li><li>異步，程式 發生錯誤還是會繼續，只是會給你一個錯誤的理由</li></ul><blockquote><p>Promise 物件的設計就是針對異步函式的執行結果所設計的，promise 物件最後的結果要不然就用一個回傳值來 fulfilled(實現)，要不然就用一個理由(錯誤)來 rejected(拒絕)。</p></blockquote><p>你可能會認為這種用失敗(或拒絕)或成功的兩分法結果，似乎有點太武斷了，但在許多異步的結構中，的確是用成功或失敗來作為代表，例如 AJAX 的語法結構。promise 物件用實現(解決)與拒絕來作為兩分法的分別字詞。對於有回傳值的情況，沒有什麼太多的考慮空間，必定都是實現狀態，但對於何時才算是拒絕的狀態，這有可能需要仔細考量，例如以下的情況:</p><ul><li><p>好的拒絕狀態應該是:</p><ul><li>I&#x2F;O 操作時發生錯誤，例如讀寫檔案或是網路上的資料時，中途發生例外情況</li><li>無法完成預期的工作，例如accessUsersContacts函式是要讀取手機上的聯絡人名單，因為權限不足而失敗</li><li>內部錯誤導致無法進行異步的程序，例如環境的問題或是程式開發者傳送錯誤的傳入值</li></ul></li><li><p>壞的拒絕狀態例如:</p><ul><li>沒有找到值或是輸出是空白的情況，例如對資料庫查詢，目前沒有找到結果，回傳值是 0。它不應該是個拒絕狀態，而是帶有 0 值的實現。</li><li>詢問類的函式，例如hasPermissionToAccessUsersContacts函式詢問是否有讀取手機上聯絡人名單的權限，當回傳的結果是 false，也就是沒有權限時，應該是一個帶有 false 值的實現。</li></ul></li></ul><blockquote><p>不同的想法會導致不同的設計，舉一個明確的實例來說明拒絕狀態的情境設計。</p></blockquote><p><code>jQuery</code> 的<code>ajax()</code>方法，它在<code>失敗</code>時會呼叫<code>fail處理函式</code>，  </p><p>失敗的情況除了網路連線的問題外，它會在雖然伺服器有回應，<br>但是是屬於失敗類型的 HTTP 狀態碼時，也算作是失敗的狀態。</p><p>但另一個可以用於類似功能的 <code>Fetch API</code> 並沒有，fetch使用 Promise 架構，只有在網路連線發生問題才會轉為 rejected(拒絕)狀態，只要是伺服器有回應都算已實現狀態。</p><blockquote><p>註: 在 JavaScript 中函式的設計，必定有回傳值，沒寫只是回傳 undefined，相當於return undefined</p></blockquote><hr><h2 id="Promise-狀態"><a href="#Promise-狀態" class="headerlink" title="Promise 狀態"></a>Promise 狀態</h2><p><code>promise</code>對象僅有<code>三種</code>狀態</p><ul><li><code>pending</code>（進行中）</li><li><code>fulfilled</code>（已成功）</li><li><code>rejected</code>（已失敗）</li></ul><h2 id="Promise-特點"><a href="#Promise-特點" class="headerlink" title="Promise 特點"></a>Promise 特點</h2><ul><li>對象的狀態不受外界影響，只有異步操作的結果，可以決定當前是哪一種狀態</li><li>一旦狀態改變（從<code>pending</code>變為<code>fulfilled</code> 和 從<code>pending</code>變為<code>rejected</code>），<br>就不會再變，任何時候都可以得到這個結果</li></ul><h2 id="Promise-流程"><a href="#Promise-流程" class="headerlink" title="Promise 流程"></a>Promise 流程</h2><p>認真閱讀<code>下圖</code>，我們能夠輕鬆了解promise整個流程</p><p><img src="https://static.vue-js.com/1b02ae90-58a9-11eb-85f6-6fac77c0c9b3.png" alt="promise流程"></p><h2 id="Promise-用法"><a href="#Promise-用法" class="headerlink" title="Promise 用法"></a>Promise 用法</h2><p><code>Promise</code>對像是一個構造函數，用來生成Promise實例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;&#125;);</span><br></pre></td></tr></table></figure><h2 id="Promise-代碼結構"><a href="#Promise-代碼結構" class="headerlink" title="Promise 代碼結構"></a>Promise 代碼結構</h2><ul><li>在通過new創建Promise對象時，我們需要傳入一個回調函數，我們稱之為executor;<ul><li>這個回調函數會被立即執行，並且給傳入另外兩個回調函數resolve、reject;</li><li>當我們調用resolve回調函數時，會執行Promise對象的then方法傳入的回調函數;</li><li>當我們調用reject回調函數時，會執行Promise對象的catch方法傳入的回調函數;</li></ul></li></ul><p>下面Promise使用過程，我們可以將它劃分成<code>三個狀態</code>:</p><ul><li><p>待定(pending): 初始狀態，既沒有被兌現，也沒有被拒絕;</p><ul><li>當執行executor中的代碼時，處於該狀態;</li></ul></li><li><p>已兌現(<code>fulfilled</code>): 意味著操作成功完成;</p><ul><li>執行了resolve時，處於該狀態;</li></ul></li><li><p>已拒絕(<code>rejected</code>): 意味著操作失敗;</p><ul><li>執行了reject時，處於該狀態;</li></ul></li></ul><table><thead><tr><th align="center">待定(<code>pending</code>)</th><th align="center">已兌現(<code>fulfilled</code>)</th><th align="center">已拒絕(<code>rejected</code>)</th></tr></thead><tbody><tr><td align="center">初始狀態，既沒有被兌現，也沒有被拒絕</td><td align="center">操作成功完成</td><td align="center">操作失敗</td></tr><tr><td align="center">當執行executor中的代碼時，<br>處於該狀態</td><td align="center">執行了resolve時，<br>處於該狀態</td><td align="center">執行了reject時，<br>處於該狀態</td></tr></tbody></table><p>我們來看一下<code>Promise</code>代碼結構:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Promise</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;success message&quot;</span>)</span><br><span class="line">    <span class="comment">// reject(&quot;failture message&quot;)</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fooPromise = <span class="title function_">foo</span>()</span><br><span class="line"><span class="comment">// then方法傳入的回調函數兩個回掉函數:</span></span><br><span class="line"><span class="comment">// &gt; 第一個, 會在Promise執行resolve函數時, 被回調</span></span><br><span class="line"><span class="comment">// &gt; 第二個, 會在Promise執行reject函數時, 被回調</span></span><br><span class="line"></span><br><span class="line">fooPromise.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//catch方法傳入的回調函數, 會在Promise執行reject函數時, 被回調</span></span><br><span class="line"></span><br><span class="line">fooPromise.<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 傳入的這個函數, 被稱之為 executor</span></span><br><span class="line"><span class="comment">// &gt; resolve: 回調函數, 在成功時, 回調resolve函數</span></span><br><span class="line"><span class="comment">// &gt; reject: 回調函數, 在失敗時, 回調reject函數</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise傳入的函數被執行了&quot;</span>)</span><br><span class="line">   <span class="comment">// resolve()</span></span><br><span class="line">    <span class="title function_">reject</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Promise重構請求"><a href="#Promise重構請求" class="headerlink" title="Promise重構請求"></a>Promise重構請求</h2><p>那麼有了Promise，我們就可以將之前的代碼進行重構了:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// request.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">requestData</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="comment">// 異步請求的代碼會被放入到executor中</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 模擬網路請求</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 拿到請求的结果</span></span><br><span class="line">      <span class="comment">// url傳入的是yz, 請求成功</span></span><br><span class="line">      <span class="keyword">if</span> (url === <span class="string">&quot;yz&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 成功</span></span><br><span class="line">        <span class="keyword">let</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>]</span><br><span class="line">        <span class="title function_">resolve</span>(names)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// 否則請求失敗</span></span><br><span class="line">        <span class="comment">// 失敗</span></span><br><span class="line">        <span class="keyword">let</span> errMessage = <span class="string">&quot;請求失敗, url錯誤&quot;</span></span><br><span class="line">        <span class="title function_">reject</span>(errMessage)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="title function_">requestData</span>(<span class="string">&quot;coderWhy&quot;</span>)</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;請求成功:&quot;</span>, res)</span><br><span class="line">&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;請求失敗:&quot;</span>, err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>今天先研究到這邊</p><p>明天再來研究<code>實例方法</code></p><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://es6.ruanyifeng.com/#docs/promise">Promise 对象</a></li><li><a href="https://juejin.cn/post/7109467029241298958">重学ES6-ES12(九)Promise简单介绍</a></li><li><a href="https://github.com/getify/You-Dont-Know-JS">You Don’t Know JS: async &amp; performance</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise">MDN-promise</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10197427">JavaScript - Promise (1)</a></li><li><a href="https://pjchender.dev/javascript/js-promise/">[JS] Promise 的使用</a></li><li><a href="https://promisesaplus.com/">Promises&#x2F;A+</a><br>-<a href="https://github.com/eyesofkids/javascript-es6-promise">從 ES6 開始的 JavaScript 學習生活</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天來研究 Promise&lt;/p&gt;
&lt;p&gt;很多大哥學會 **&lt;code&gt;Promise&lt;/code&gt;**後都覺得不過如此&lt;br&gt;但初次接觸 我完全看不懂啊~~~~~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.tenor.com/O3boKw1jQG4AAAAM/cute.gif&quot; alt=&quot;懊惱&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="https://supermarpig.github.io/tags/ES6/"/>
    
    <category term="ECMAScript 6" scheme="https://supermarpig.github.io/tags/ECMAScript-6/"/>
    
    <category term="JavaScript" scheme="https://supermarpig.github.io/tags/JavaScript/"/>
    
    <category term="每天一點點" scheme="https://supermarpig.github.io/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E/"/>
    
    <category term="Promise" scheme="https://supermarpig.github.io/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>React useState 修改 Object value</title>
    <link href="https://supermarpig.github.io/2023/04/21/React-useState-%E4%BF%AE%E6%94%B9-Object-value/"/>
    <id>https://supermarpig.github.io/2023/04/21/React-useState-%E4%BF%AE%E6%94%B9-Object-value/</id>
    <published>2023-04-21T03:10:42.000Z</published>
    <updated>2023-04-21T03:22:29.421Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>開發中筆記筆記!!</p><span id="more"></span><p>在一般Array中<br>裡面對有很多Obj<br>但想修改其中的內容該如何修正</p><p>以下範例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//這是一般Array內的內容</span></span><br><span class="line">  <span class="keyword">const</span> [todo, setTodo] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>)  <span class="comment">//放todo Array</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//將輸入的東西加入todo Array內</span></span><br><span class="line">            <span class="title function_">setTodo</span>([</span><br><span class="line">                ...todo,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">text</span>: inputText,</span><br><span class="line">                    <span class="attr">completed</span>: <span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">id</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1000</span>),</span><br><span class="line">                &#125;,</span><br><span class="line">            ])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果需要修改 <code>completed</code> 改成<code>true</code> Or <code>!todo.completed</code> 可以這樣寫：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//點擊修改 使否已完成</span></span><br><span class="line">   <span class="title function_">setTodo</span>(</span><br><span class="line">     todo.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (item.<span class="property">id</span> === id) &#123;   <span class="comment">//這句是判斷 是否有相同的id  可以依照各位想做的判斷自行修改</span></span><br><span class="line">         <span class="keyword">return</span> &#123;</span><br><span class="line">           ...item,</span><br><span class="line">           <span class="attr">completed</span>: !item.<span class="property">completed</span>,    </span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> item</span><br><span class="line">     &#125;),</span><br><span class="line">   )</span><br></pre></td></tr></table></figure><p>也可以不加判斷 ，將全部修改成<code>true</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中間列表  ---將全部的完成選取成TRUE</span></span><br><span class="line">     <span class="title function_">setTodo</span>(</span><br><span class="line">       todo.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> &#123;</span><br><span class="line">           ...item,</span><br><span class="line">           <span class="attr">completed</span>: <span class="literal">true</span>,</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">     )</span><br></pre></td></tr></table></figure><p>以上</p><p>希望有幫助到各位</p><p><img src="https://media.tenor.com/FcNL2m-rZTEAAAAd/sleepy-sleep.gif" alt="累"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.google.com/">我聰明的小腦袋</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;開發中筆記筆記!!&lt;/p&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://supermarpig.github.io/tags/JS/"/>
    
    <category term="React" scheme="https://supermarpig.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>JS魔術師 implicit coercion</title>
    <link href="https://supermarpig.github.io/2023/04/19/implicit-coercion/"/>
    <id>https://supermarpig.github.io/2023/04/19/implicit-coercion/</id>
    <published>2023-04-19T03:19:54.000Z</published>
    <updated>2023-04-19T05:58:47.307Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>和小夥伴討論到 implicit coercion 來研究研究</p><span id="more"></span><p>一開始討論到 為啥String前面 加上 一個 <strong>+</strong><br>JS 就會幫你轉成<strong>Number</strong><br>神奇神奇</p><p><img src="https://media.tenor.com/9LpC6GdyxiwAAAAM/otter-cute.gif" alt="amazing"></p><blockquote><p>來個例子</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">strNum</span>:<span class="string">&quot;456&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+obj.<span class="property">strNum</span> + <span class="number">789</span>)</span><br></pre></td></tr></table></figure><blockquote><p>輸出是 <strong>1245</strong></p></blockquote><ul><li>前面+會讓把type轉成number</li></ul><p>酷!!!</p><blockquote><p>JavaScript 的型別不在於變數本身，而在於變數被賦予的值。</p></blockquote><p>找了資料才發現叫做 ：「強制轉型」(<strong>coercion</strong>)</p><p>「強制轉型」有兩種</p><ul><li><p>隱含的強制轉型 — <code>implicit coercion</code></p></li><li><p>明確的強制傳型 — <code>explicit coercion</code></p></li></ul><h2 id="隱含的強制轉型-—-implicit-coercion"><a href="#隱含的強制轉型-—-implicit-coercion" class="headerlink" title="隱含的強制轉型 — implicit coercion"></a>隱含的強制轉型 — implicit coercion</h2><p>JavaScript 在運算的時候，如果看到兩個不同型別的值，就會自動判斷，把值轉換為相同型別，再做運算。</p><p>舉個例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;1&quot;</span>;      <span class="comment">//字串</span></span><br><span class="line">a = a + <span class="number">2</span>;        <span class="comment">//&#x27;12&#x27;， a為字串&quot;1&quot;，數字2與字串相加，被轉型為字串&quot;2&quot;</span></span><br><span class="line">a = a*<span class="number">2</span>           <span class="comment">//24 ， 在乘法的時候，字串&quot;12&quot;與2相乘，字串被轉型為數值，得出的結果是數值 12</span></span><br><span class="line">a = a + <span class="literal">true</span>      <span class="comment">//25， 布林值遇到數值，被轉為數字1，相加後變成25</span></span><br><span class="line">a = a * <span class="literal">null</span>      <span class="comment">//0 ， null遇到數值被轉為0，數值與0相乘變成0</span></span><br><span class="line">a = a / <span class="literal">undefined</span> <span class="comment">//NaN， undefined無法再被轉型為數字</span></span><br></pre></td></tr></table></figure><p>以上這些就是 JavaScript 變數的「<code>強制轉型</code>」，<br>而且是 JavaScript 親切的、自動的、在背後運作的、「**<code>隱含的強制轉型</code>**」（ implicit coercion ）。<br>一下變<code>字串</code>，一下有變成<code>數字</code>、一下變成<code>布林值</code>。</p><p>「隱含的轉型」（ implicit coercion ）基本上可以轉成三種型別：</p><ul><li>自動轉換為布林值( ToBoolean )</li><li>自動轉換為數值( ToNumber )</li><li>自動轉換為字串( ToString )</li></ul><h3 id="四則運算時的強制轉型"><a href="#四則運算時的強制轉型" class="headerlink" title="四則運算時的強制轉型"></a>四則運算時的強制轉型</h3><p>JavaScript在做四則運算的時候跟小學課本教的一樣，由左而右「先乘除後加減」。</p><p>其中以加法（＋）最需要注意！</p><p>如果是數值的運算，那沒有轉型的問題。「字串」的相加也沒有轉型的問題。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span> + <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);  <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> y = <span class="string">&#x27;歐陽鋒是&#x27;</span> + <span class="string">&#x27;一隻癩哈蟆&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y);  <span class="comment">//歐陽鋒是一隻癩哈蟆</span></span><br></pre></td></tr></table></figure><p>只有在 <strong><code>不同型別</code></strong> 的狀況下才有轉型的問題：</p><ul><li><p>當加號 <code>+</code> 兩側有一個是字串的情形下，會將「 <strong><code>非字串</code></strong> 」的那一邊「自動轉型」為<code>字串</code>，再將兩個字串連接在一起。  </p><ul><li>如果另一方為 <code>number</code> 、 <code>boolean</code> 、 <code>object</code> 的情況下，<br><code>number</code> 、 <code>boolean</code> 、 <code>object</code> 會去叫用它們的 *** <code>.toString 「原型方法」</code>**，把自己變成 **<code>字串</code>**，再去和另一個 <strong><code>字串</code></strong> 組合。</li></ul></li><li><p>當一邊是<code>數字</code>，一邊是 <code>undefined</code> 的時候，<br><code>undefined</code> 會被試著轉為<code>數字</code>，變成 <code>NaN</code> ，任何<code>數字</code>與 <code>NaN</code> 相加都是 <strong><code>NaN</code></strong> 。</p></li><li><p>當一邊是<code>數字</code>，加號另一邊是 <code>null</code> 的時候，<br><code>null</code> 會被轉為數字 <code>0</code> 。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//數字與字串相加</span></span><br><span class="line"><span class="number">77</span> + <span class="string">&#x27;49&#x27;</span>         <span class="comment">//&#x27;7749&#x27;</span></span><br><span class="line"><span class="number">77</span> + <span class="string">&#x27;四十九&#x27;</span>      <span class="comment">//&#x27;77四十九&#x27;</span></span><br><span class="line"><span class="comment">//字串與字串相加</span></span><br><span class="line"><span class="string">&#x27;七七&#x27;</span> + <span class="string">&#x27;四十九&#x27;</span>  <span class="comment">//&#x27;七七四十九&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">77</span> + &#123;&#125;           <span class="comment">//&#x27;77[object object]&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//當數字要跟undefined相加的時候，udefined會被嘗試轉為數字，也就是NaN，還記得NaN的型別是number嗎？</span></span><br><span class="line"><span class="number">77</span> + unfined      <span class="comment">//NaN</span></span><br><span class="line"><span class="string">&#x27;七七&#x27;</span> + unfined   <span class="comment">//&#x27;七七undefined&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//當數字要與null相加時，null會被轉成數字 0 ;</span></span><br><span class="line"><span class="number">77</span> + <span class="literal">null</span>          <span class="comment">//77</span></span><br><span class="line"><span class="string">&#x27;七七&#x27;</span> + <span class="literal">null</span>       <span class="comment">//77null</span></span><br></pre></td></tr></table></figure><p>而如果是減乘除法（ － ＊ ／ ）的情況，除了數值以外的其他基本型別都會透過 Number() 方法轉為數字。物件則在乘除的時候會透過 Number() 方法，轉為數字，在減法時透過 valueOf() 方法轉為數字。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">49</span> - <span class="string">&#x27;36&#x27;</span>   <span class="comment">//13</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字串會被轉為數字，也就是NaN</span></span><br><span class="line"><span class="number">49</span> - <span class="string">&#x27;abc&#x27;</span> <span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//布林值的true，會被轉行為數字 1</span></span><br><span class="line"><span class="number">49</span> - <span class="literal">true</span>  <span class="comment">//48</span></span><br><span class="line"><span class="comment">//布林值的false，會被轉行為數字 0</span></span><br><span class="line"><span class="number">49</span> - <span class="literal">false</span>  <span class="comment">//49</span></span><br><span class="line"></span><br><span class="line"><span class="number">49</span> - <span class="literal">undefined</span>  <span class="comment">//NaN</span></span><br><span class="line"><span class="comment">//null會轉為數字0</span></span><br><span class="line"><span class="number">49</span> - <span class="literal">null</span>       <span class="comment">//49</span></span><br><span class="line"><span class="number">49</span> - &#123;&#125;   　　　<span class="comment">//NaN</span></span><br><span class="line"><span class="number">49</span> * <span class="string">&#x27;10&#x27;</span>       <span class="comment">//490</span></span><br><span class="line"><span class="number">49</span> *  <span class="string">&#x27;四十九&#x27;</span>   <span class="comment">//NaN</span></span><br><span class="line"><span class="number">49</span> * <span class="literal">true</span>       <span class="comment">// 49</span></span><br><span class="line"><span class="number">49</span> * <span class="literal">false</span>      <span class="comment">//0</span></span><br><span class="line"><span class="number">49</span> * &#123;&#125;         <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><p>下面附上變數在四則運算時的「自動轉型」規則：</p><table><thead><tr><th align="center">四則運算</th><th align="center">數字</th><th align="center">基本型別非數字</th><th align="center">物件</th></tr></thead><tbody><tr><td align="center">減法</td><td align="center">正常運算</td><td align="center">Number()方法轉為數字</td><td align="center">透過valueOf()轉為數字</td></tr><tr><td align="center">乘法</td><td align="center">正常運算</td><td align="center">Number()方法轉為數字</td><td align="center">Number()方法轉為數字</td></tr><tr><td align="center">除法</td><td align="center">正常運算</td><td align="center">Number()方法轉為數字</td><td align="center">Number()方法轉為數字</td></tr><tr><td align="center">加法</td><td align="center">正常運算</td><td align="center">如果是number、boolean透過toString()方法轉為字串，<br>null或undefined透過String()轉為字串</td><td align="center">toString()轉為字串</td></tr></tbody></table><h3 id="比較運算子的強制轉型"><a href="#比較運算子的強制轉型" class="headerlink" title="比較運算子的強制轉型"></a>比較運算子的強制轉型</h3><p>比較運算子用來比較兩側的數值，比較之後得到布林值 true 或 false。</p><p>一個等號 <code>=</code>，我們知道是「指定、賦值」的意思。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">49</span>;  <span class="comment">//X 的值 =49</span></span><br></pre></td></tr></table></figure><p><code>==</code>是<code>相等</code>的意思，而 <code>===</code> 是<code>全等</code>的意思。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">49</span>;   <span class="comment">//數字</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="string">&#x27;49&#x27;</span>; <span class="comment">//字串</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x == y);</span><br><span class="line"><span class="comment">//true，因為 == 在比較兩側的變數是否相等的時候，會自動幫變數轉型。</span></span><br><span class="line"></span><br><span class="line"><span class="literal">true</span> == <span class="string">&#x27;1&#x27;</span>;   <span class="comment">//true</span></span><br><span class="line"><span class="literal">false</span> == <span class="string">&#x27;0&#x27;</span>;   <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">true</span> === <span class="string">&#x27;1&#x27;</span>;   <span class="comment">//false</span></span><br><span class="line"><span class="literal">false</span> === <span class="string">&#x27;0&#x27;</span>;  <span class="comment">//false</span></span><br><span class="line"><span class="number">1</span>===<span class="string">&#x27;1&#x27;</span> <span class="comment">//false   因為===比較嚴格 會連型態也一起比較</span></span><br></pre></td></tr></table></figure><p>使用 <code>==</code> 相等的時候，<code>會</code>自動替兩側的<code>變數</code>轉型。</p><p>當使用<code>===</code> 全等的時候，<code>不會</code>替變數自動轉型，是比較<code>嚴謹</code>的模式，也是比較推薦使用的方法。</p><p>比較特別的是，<code>NaN</code>不等於<code>NaN</code>，不管是 <code>==</code> 還是 <code>===</code>，<br>都是一樣 <code>NaN</code> 不等於 <code>NaN</code> 。</p><h4 id="x3D-x3D-的自動轉型規則"><a href="#x3D-x3D-的自動轉型規則" class="headerlink" title="&#x3D;&#x3D;的自動轉型規則"></a>&#x3D;&#x3D;的自動轉型規則</h4><ul><li>當遇到「<code>字串</code>」與「<code>數字</code>」做比較的時候，<br>字串會透過 <code>Number()</code> 嘗試轉為<code>數字</code>，再進行比較。</li><li>如果比較的一方為<code>布林值</code>，則 <code>true</code> 會轉為 <code>1</code>， <code>false</code> 會轉為 <code>0</code> 。</li><li>當&#x3D;&#x3D; 的一側為<code>物件型別</code>，另一側為<code>基本型別</code>，<br>物件型別會透過 <code>valueOf()</code> ，轉為對應的<code>基本型別</code>進行比較。</li></ul><h4 id="不等於-x3D-與-x3D-x3D"><a href="#不等於-x3D-與-x3D-x3D" class="headerlink" title="不等於!&#x3D; 與 !&#x3D;&#x3D;"></a>不等於!&#x3D; 與 !&#x3D;&#x3D;</h4><p><code>!=</code>與「<code>! ==</code>」兩者都是<code>不等於</code>，<br>但是 <code>!=</code> <code>會</code>替變數做<code>自動轉型</code>，<br>而 <code>!==</code> <code>不會</code>替變數<code>自動轉型</code>，推薦使用 !&#x3D;&#x3D;</p><hr><h3 id="大於＞與小於＜的強制轉型"><a href="#大於＞與小於＜的強制轉型" class="headerlink" title="大於＞與小於＜的強制轉型"></a>大於＞與小於＜的強制轉型</h3><p>有看到一個數字比大小的有趣例子，借來筆記一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> &lt; <span class="number">2</span> &lt; <span class="number">3</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &lt; <span class="number">2</span> &lt; <span class="number">1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>天哪！怎麼會是這樣的結果！ 3 &lt; 2 &lt; 1 的布林值竟然是 true</p><p><img src="https://media.tenor.com/8v_cOIsZ1H4AAAAC/no-way-seriously.gif" alt="驚訝"></p><p>其實是因為 ＜ 是由左向右( left to right )去做比較，下面來解釋一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> &lt; <span class="number">2</span> &lt; <span class="number">3</span>);</span><br><span class="line"><span class="number">1</span>&lt;<span class="number">2</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">true</span> &lt; <span class="number">3</span> <span class="comment">//true轉為數字1，1&lt;3，結果為true。</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &lt; <span class="number">2</span> &lt; <span class="number">1</span>); </span><br><span class="line"><span class="number">3</span> &lt; <span class="number">2</span> <span class="comment">//false</span></span><br><span class="line"><span class="literal">false</span> &lt; <span class="number">1</span> <span class="comment">// false轉為數字0，0&lt;1，所以結果為true</span></span><br></pre></td></tr></table></figure><p>所以才會得出 console.log( 3 &lt; 2 &lt; 1 );會變成 true 的結果。</p><p><img src="https://media.tenor.com/XeSeoxw1FGgAAAAC/i-see.gif" alt="I see "></p><h3 id="Boolean的強制傳型"><a href="#Boolean的強制傳型" class="headerlink" title="Boolean的強制傳型"></a>Boolean的強制傳型</h3><p>邏輯運算子( Logical Operator )有 <code>AND &amp;&amp;</code> 、 <code>OR ||</code> 、<code>NOT !</code> 三種。<br>運算子兩側的值經過 ToBoolean 轉換後會得到一個布林值，再由邏輯運算子比較後傳回其中一個值。</p><p><code>&amp;&amp;</code> 以及 <code>||</code> 進行判斷時，會對<code>左邊</code>的數值進行檢查，如果原本是布林值，就進行後續判斷。<br>如果不是，則透過 ToBoolean 轉換為 true 或 false 。</p><ul><li><p>AND &amp;&amp; ：(條件&#x2F;運算式 A ) &amp;&amp; (條件&#x2F;運算式 B )，<br>如果兩側的值都為 true ，得到 true 的結果；<br>如果其中一方為 false ，則得到 false 。<br>如果第一個值轉換為true，則回傳第二個值，否則回傳第一個值。</p></li><li><p>OR ：(條件&#x2F;運算式A) (條件&#x2F;運算式B)，<br>兩側的值只要有一側為 true ，就得到 true 的結果；<br>如果兩側都為 false ，才得到 false 。<br>如果第一個值轉換為true，則回傳第一個值，否則回傳第二個值。</p></li><li><p>NOT ! ： true 的結果透過 ! 轉換會得到 false ，而 false 的結果會變成 true。</p></li></ul><p>那些經過ToBoolean轉換後會得到true的狀況太多，而會得到false的值只有以下五種：</p><ul><li><strong><code>undefined</code></strong></li><li><strong><code>Null</code></strong></li><li><strong><code>+0、-0</code></strong></li><li><strong><code>NaN</code></strong></li><li><strong><code>空字串&quot;&quot;或’’</code></strong></li></ul><p>其他的值都會轉為true。</p><h2 id="明確的強制傳型（explicit-coercion）"><a href="#明確的強制傳型（explicit-coercion）" class="headerlink" title="明確的強制傳型（explicit coercion）"></a>明確的強制傳型（explicit coercion）</h2><p>也就是透過JavaScript提供的函式來進行變數型別轉換，例如：</p><ul><li>轉換為數值型別： <code>Number()</code> 、 <code>parseInt()</code> 、 <code>parseFloat()</code></li><li>轉換為字串型別： <code>toString()</code> 、 <code>String()</code></li><li>轉換為布林型別： <code>Boolean()</code></li></ul><h3 id="Number-、parseInt-、parseFloat"><a href="#Number-、parseInt-、parseFloat" class="headerlink" title="Number()、parseInt()、parseFloat()"></a>Number()、parseInt()、parseFloat()</h3><p>Number()可以將值「嘗試轉型」為「數值型別」，但要並非每種物件都可以順利轉成 number 型別，如果轉型失敗就會變成 NaN (非數值的數值)！</p><p>parseInt(str [, radix]) 函式能將輸入的字串轉成整數，第二個參數 radix 代表使用哪種進位制轉換。</p><p>它會忽略前後空白，在遇到字元被無法解析時，會忽略那個字元與後面的所有字元，停止解析，並回傳目前為止的結果。</p><p>如果第一個字元就無法被解析，會回傳 NaN。</p><p>parseFloat(str)能將字串轉換為以十進位表示的浮點數。</p><p>來看一下範例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;123&#x27;</span>);        <span class="comment">//123</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;華山論劍&#x27;</span>);   <span class="comment">//NaN</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;9陰真經&#x27;</span>);    <span class="comment">//NaN</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="literal">null</span>);         <span class="comment">//0</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="literal">true</span>)          <span class="comment">//1</span></span><br><span class="line"><span class="title class_">Number</span>([]);           <span class="comment">//0</span></span><br><span class="line"><span class="title class_">Number</span>([<span class="number">1</span>]);          <span class="comment">//1</span></span><br><span class="line"><span class="title class_">Number</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);      <span class="comment">//NaN</span></span><br><span class="line"><span class="title class_">Number</span>(&#123;&#125;);           <span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;9陰真經&#x27;</span>);  <span class="comment">//9</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;九陰真經&#x27;</span>); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">101010</span>,<span class="number">2</span>);   <span class="comment">//42</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&#x27;3.1416&#x27;</span>)  <span class="comment">//3.1416</span></span><br></pre></td></tr></table></figure><h3 id="toString-、String"><a href="#toString-、String" class="headerlink" title=".toString()、String()"></a>.toString()、String()</h3><p>String() 與 .toString() 都可以將值轉換為字串型別，<br>差別在於 .toString() 在收到 <code>null</code> 、 <code>undefined</code> 和<code>數字</code>時會報錯。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">String</span>(<span class="number">123</span>)          <span class="comment">//&#x27;123&#x27;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">null</span>)         <span class="comment">//&#x27;null&#x27;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="string">&#x27;undefined&#x27;</span>)  <span class="comment">//&#x27;undefined&#x27;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">true</span>)         <span class="comment">//&#x27;true&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="literal">true</span>.<span class="title function_">toString</span>()      <span class="comment">//&#x27;true&#x27;</span></span><br><span class="line"><span class="number">123.</span><span class="title function_">toString</span>()</span><br><span class="line"><span class="comment">//Uncaught SyntaxError: Invalid or unexpected token</span></span><br><span class="line"><span class="literal">null</span>.<span class="title function_">toString</span>()</span><br><span class="line"><span class="comment">//Uncaught TypeError: Cannot read properties of null (reading &#x27;toString&#x27;)</span></span><br><span class="line">    </span><br><span class="line"><span class="literal">undefined</span>.<span class="title function_">toString</span>()</span><br><span class="line"><span class="comment">//Uncaught TypeError: Cannot read properties of undefined (reading &#x27;toString&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean()"></a>Boolean()</h3><p>Boolean() 可以用來將其他的資料型態轉型成布林值型態。</p><blockquote><p>還記得前面提過幾種會變成 <code>false</code> 的值嗎?</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Boolean</span>(<span class="number">100</span>)       <span class="comment">//true</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="string">&#x27;100&#x27;</span>)     <span class="comment">//true</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="string">&#x27;&#x27;</span>)        <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="literal">false</span>)     <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="literal">undefined</span>) <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="literal">null</span>)      <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="string">&#x27;&quot;&quot;&#x27;</span>)      <span class="comment">//true</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="string">&#x27;false&#x27;</span>)   <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>重點整理一下，如果可以掌握一些概念，之後還可以再仔細琢磨：</p><h3 id="強制轉型分為兩種"><a href="#強制轉型分為兩種" class="headerlink" title="強制轉型分為兩種"></a>強制轉型分為兩種</h3><ul><li><p>隱含的強制轉型：就是 JavaScript 在運算的過程中，依照它的規則在背地裡把值的型別轉換成其他類的型別。</p><ul><li>四則運算中加法如果遇到「字串」的轉型最需要留意，其他的減乘除都會試圖轉換成數字來處理。</li><li>使用「＝＝＝」相等的時候，會自動替兩側的變數轉型。當使用「＝＝＝」全等的時候，不會替變數自動轉型，建議使用「＝＝＝」來進行比較。</li><li>在布林值的轉型部分，請記得： undefined 、 Null 、 +0 、 -0 、 NaN 、空字串都會轉換成 false。</li></ul></li><li><p>明顯的強制轉型：透過 JavaScript 提供的函式來進行變數型別轉換。</p><ul><li>轉換為數值型別： Number() 、 parseInt() 、 parseFloat()</li><li>轉換為字串型別： toString() 、 String()</li><li>轉換為布林型別： Boolean()</li></ul></li></ul><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://karennnnovelty.medium.com/%E3%84%9F%E5%95%8F%E4%BD%A0%E5%96%94-%E5%BC%B7%E5%88%B6%E8%BD%89%E5%9E%8B%E6%98%AF%E4%BB%80%E9%BA%BC-%E8%BD%89%E6%8F%9B%E5%9E%8B%E5%88%A5%E6%9C%89%E8%A6%8F%E5%89%87%E5%8F%AF%E5%BE%AA%E5%97%8E-%E6%95%B8%E5%AD%97%E5%9E%8B%E5%88%A5%E7%AF%87-690586a391b1">ㄟ問你喔，強制轉型是什麼？轉換型別有規則可循嗎？(數字型別篇)</a></li><li><a href="https://karennnnovelty.medium.com/%E3%84%9F%E5%95%8F%E4%BD%A0%E5%96%94-%E5%BC%B7%E5%88%B6%E8%BD%89%E5%9E%8B%E6%98%AF%E4%BB%80%E9%BA%BC-%E8%BD%89%E6%8F%9B%E5%9E%8B%E5%88%A5%E6%9C%89%E8%A6%8F%E5%89%87%E5%8F%AF%E5%BE%AA%E5%97%8E-%E5%B8%83%E6%9E%97%E5%80%BC-%E5%AD%97%E4%B8%B2%E7%AF%87-a9d6d6cc91d">ㄟ問你喔，強制轉型是什麼？轉換型別有規則可循嗎？(布林值、字串篇)</a></li><li><a href="https://hackmd.io/eFKxFY8oRpmYvnxAkCHnmw">何謂強制轉型、以及如何作到轉換型別？</a></li><li><a href="https://jameshsu0407.github.io/blog/20211030_explicit-coercion_implicit-coercion/">[教學]何謂強制轉型、以及如何作到轉換型別？</a></li><li><a href="https://www.cythilya.tw/2018/10/15/coercion/">你懂 JavaScript 嗎？#8 強制轉型（Coercion）</a></li><li><a href="https://medium.com/stuarthsu/javascript-%E5%85%A8%E6%94%BB%E7%95%A5-%E5%85%8B%E6%9C%8D-js-%E7%9A%84%E5%A5%87%E6%80%AA%E9%83%A8%E5%88%86-cf44d08ffc0">JavaScript 全攻略：克服 JS 的奇怪部分</a></li><li><a href="https://www.796t.com/content/1546084624.html">Javascript型別轉換的技巧</a></li><li><a href="https://www.uj5u.com/qiye/254374.html">JavaScript資料型別轉換</a></li><li><a href="https://jimmywei01.github.io/2019/05/28/JS-%E7%B4%80%E9%8C%842-%E5%8C%85%E8%A3%B9%E7%89%A9%E4%BB%B6%E3%80%81%E8%87%AA%E5%8B%95%E8%BD%89%E5%9E%8B/">JS 紀錄2 - 包裹物件、自動轉型</a></li><li><a href="https://medium.com/unalai/%E8%AA%8D%E8%AD%98-parseint-parsefloat-%E8%88%87-number-%E8%BD%89%E6%8F%9B%E6%88%90%E6%95%B8%E5%AD%97%E7%9A%84%E4%B8%89%E7%A8%AE%E6%96%B9%E6%B3%95-276640aedb4e">認識 parseInt、parseFloat 與 Number 轉換成數字的三種方法</a></li><li><a href="https://blog.miniasp.com/post/2020/02/21/JavaScript-Numbers-Deep-Dive">前端工程研究：關於 JavaScript 中 Number 型別的常見地雷與建議作法</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;和小夥伴討論到 implicit coercion 來研究研究&lt;/p&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://supermarpig.github.io/tags/JS/"/>
    
    <category term="implicit coercion" scheme="https://supermarpig.github.io/tags/implicit-coercion/"/>
    
    <category term="語法糖" scheme="https://supermarpig.github.io/tags/%E8%AA%9E%E6%B3%95%E7%B3%96/"/>
    
  </entry>
  
  <entry>
    <title>每天一點點，學習ES6(六)數據結構 Set Map</title>
    <link href="https://supermarpig.github.io/2023/04/18/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E5%85%AD-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-Set-Map/"/>
    <id>https://supermarpig.github.io/2023/04/18/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E5%85%AD-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-Set-Map/</id>
    <published>2023-04-18T01:50:33.000Z</published>
    <updated>2023-04-18T06:40:50.328Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天剛研究完另一種數據結構<strong>Symbol</strong><br>趁記憶猶新的時候，把 <strong>Set</strong> 跟 <strong>Map</strong>一起解決!!</p><p><img src="https://media.tenor.com/GtZnj_mssJUAAAAM/yes.gif" alt="yes"></p><span id="more"></span><p>在ES6之前，儲存數據的結構主要有兩種:</p><ul><li><strong>Array</strong></li><li><strong>Object</strong></li></ul><blockquote><p>在ES6中新增了另外兩種數據結構: <strong>Set</strong>、<strong>Map</strong><br>以及它们的另外形式<strong>WeakSet</strong>、<strong>WeakMap</strong></p></blockquote><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p><code>Set</code>是<code>es6</code>新增的數據結構，類似於樹組，<br>但是裡面的值都是唯一的，沒有重複的值，我們一般稱為<code>集合</code></p><p>Set本身是一个構造函數，用來生成 Set 數據結構</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br></pre></td></tr></table></figure><h3 id="構造函數的三大特點"><a href="#構造函數的三大特點" class="headerlink" title="- 構造函數的三大特點"></a>- 構造函數的三大特點</h3><blockquote><p>構造函數的函數名的第一個字母通常大寫。<br>函數體內使用this關鍵字，代表所要生成的對象實例。<br>生成對象的時候，必須使用new命令來調用構造函數。</p></blockquote><h3 id="Set-的常見方法"><a href="#Set-的常見方法" class="headerlink" title="Set 的常見方法"></a>Set 的常見方法</h3><p><strong>Set常見的屬性</strong>:</p><ul><li><p>size:返回Set中元素的個數;<br><strong>Set常用的方法:</strong></p></li><li><p><strong>add(value)</strong>:添加某個元素，返回Set對象本身;</p></li><li><p><strong>delete(value)</strong>:從set中刪除和這個值相等的元素，返回Boolean類型;</p></li><li><p><strong>has(value)</strong>:判斷set中是否存在某個元素，返回Boolean類型;</p></li><li><p><strong>clear()</strong>:清空set中所有的元素，沒有返回值;</p></li><li><p><strong>forEach(callback, [ thisArg])</strong>:通過forEach遍歷set;</p></li></ul><h4 id="size"><a href="#size" class="headerlink" title="size"></a>size</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="property">size</span> <span class="comment">// 0   &lt;-----返回裡面的length</span></span><br></pre></td></tr></table></figure><h4 id="add-value"><a href="#add-value" class="headerlink" title="add(value)"></a>add(value)</h4><p>添加某個值，返回 Set 結構本身</p><p>當添加已經存在的元素，set不會進行處理添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="title function_">add</span>(<span class="number">1</span>).<span class="title function_">add</span>(<span class="number">2</span>).<span class="title function_">add</span>(<span class="number">2</span>); <span class="comment">// 2只被加了一次</span></span><br><span class="line"><span class="comment">//Set(2) &#123;1, 2&#125;</span></span><br></pre></td></tr></table></figure><hr><h4 id="delete-value"><a href="#delete-value" class="headerlink" title="delete(value)"></a>delete(value)</h4><p>删除某個值，返回一個布爾值(<strong>True</strong> or <strong>False</strong>)，表示删除是否成功</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="title function_">delete</span>(<span class="number">1</span>) <span class="comment">//false</span></span><br></pre></td></tr></table></figure><hr><h4 id="has-value"><a href="#has-value" class="headerlink" title="has(value)"></a>has(value)</h4><p>返回一个(<strong>True</strong> or <strong>False</strong>)，判斷該值是否為Set的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="title function_">has</span>(<span class="number">2</span>) <span class="comment">//false</span></span><br></pre></td></tr></table></figure><hr><h4 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h4><p>清除Set內所有元素，沒有返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure><hr><h4 id="遍歷"><a href="#遍歷" class="headerlink" title="遍歷"></a>遍歷</h4><p><code>Set</code>實現遍歷的方法有下：</p><ul><li>**keys()**：返回key值的遍歷器</li><li>**values()**：返回value值的遍歷器</li><li>**entries()**：返回entries的遍歷器</li><li>**forEach()**：使用回调函數遍歷每個元素</li></ul><blockquote><p><code>Set</code>的遍歷順序就是插入順序</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// blue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// blue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [&quot;red&quot;, &quot;red&quot;]</span></span><br><span class="line"><span class="comment">// [&quot;green&quot;, &quot;green&quot;]</span></span><br><span class="line"><span class="comment">// [&quot;blue&quot;, &quot;blue&quot;]</span></span><br></pre></td></tr></table></figure><blockquote><p><code>forEach()</code>用於對每個成員執行某種操作，沒有返回值，鍵值、鍵名都相等，<br>同樣的<code>forEach</code>方法有<code>第二個參數</code>，用於<code>綁定</code>處理函數的this</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]);</span><br><span class="line">set.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27; : &#x27;</span> + value))</span><br><span class="line"><span class="comment">// 1 : 1</span></span><br><span class="line"><span class="comment">// 4 : 4</span></span><br><span class="line"><span class="comment">// 9 : 9</span></span><br></pre></td></tr></table></figure><p><code>擴展運算符</code>和<code>Set 結構</code>相結合實現數組或字符串去重</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> unique = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]; <span class="comment">// [3, 5, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// String</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;352255&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> unique = [...<span class="keyword">new</span> <span class="title class_">Set</span>(str)].<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// &quot;352&quot;</span></span><br></pre></td></tr></table></figure><p>實現<code>並集</code>、<code>交集</code>、和<code>差集</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 並集</span></span><br><span class="line"><span class="keyword">let</span> union = <span class="keyword">new</span> <span class="title class_">Set</span>([...a, ...b]);</span><br><span class="line"><span class="comment">// Set &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">let</span> intersect = <span class="keyword">new</span> <span class="title class_">Set</span>([...a].<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> b.<span class="title function_">has</span>(x)));</span><br><span class="line"><span class="comment">// set &#123;2, 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// （a 相對於 b 的）差集</span></span><br><span class="line"><span class="keyword">let</span> difference = <span class="keyword">new</span> <span class="title class_">Set</span>([...a].<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> !b.<span class="title function_">has</span>(x)));</span><br><span class="line"><span class="comment">// Set &#123;1&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p><code>Map</code>類型是<code>key</code>值對的有序列表，而<code>key</code>和<code>value</code>都可以是任意類型</p><p><code>Map</code>本身是一個構造函數，用來生成 Map 數據結構</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br></pre></td></tr></table></figure><h3 id="Map的常見方法"><a href="#Map的常見方法" class="headerlink" title="Map的常見方法"></a>Map的常見方法</h3><p><strong>Map常見的屬性</strong>:</p><ul><li><p><strong>size</strong>:返回Map中元素的個數;<br><strong>Map常用的方法:</strong></p></li><li><p><strong>set(key, value)</strong>:在Map中添加<code>key</code>、<code>value</code>，並且返回整個Map對象</p></li><li><p><strong>get(key)</strong>:根據<code>key</code>獲取Map中的<code>value</code>;</p></li><li><p><strong>delete(value)</strong>:從Map中刪除和這個值相等的元素，返回Boolean類型;</p></li><li><p><strong>has(value)</strong>:判斷Map中是否存在某個元素，返回Boolean類型;</p></li><li><p><strong>clear()</strong>:清空Map中所有的元素，沒有返回值;</p></li><li><p><strong>forEach(callback, [ thisArg])</strong>:通過forEach遍歷Map;</p></li></ul><h4 id="Size"><a href="#Size" class="headerlink" title="Size"></a>Size</h4><p><code>size</code>屬性返回Map 結構的元素總數。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;bar&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">map.<span class="property">size</span> <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h4 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h4><p>設置<code>key</code>對應的鍵值為<code>value</code>，然後返回整個Map 結構</p><p>如果key已經有值，則<code>value</code>值會被更新，否則就新生成該<code>value</code></p><p>同時返回的是當前Map對象，可採用鍊式寫法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;edition&#x27;</span>, <span class="number">6</span>)        <span class="comment">// key是字符串</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">262</span>, <span class="string">&#x27;standard&#x27;</span>)     <span class="comment">// key是數值</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="literal">undefined</span>, <span class="string">&#x27;nah&#x27;</span>)    <span class="comment">// key是 undefined</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>).<span class="title function_">set</span>(<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>).<span class="title function_">set</span>(<span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>) <span class="comment">// 鏈式寫法</span></span><br></pre></td></tr></table></figure><h4 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h4><p><code>get</code>方法讀取<code>key</code>對應的<code>value</code>值，如果找不到<code>key</code>，返回<code>undefined</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hello = <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);&#125;;</span><br><span class="line">m.<span class="title function_">set</span>(hello, <span class="string">&#x27;Hello ES6!&#x27;</span>) <span class="comment">// key是函数Function</span></span><br><span class="line"></span><br><span class="line">m.<span class="title function_">get</span>(hello)  <span class="comment">// Hello ES6!</span></span><br></pre></td></tr></table></figure><h4 id="has"><a href="#has" class="headerlink" title="has()"></a>has()</h4><p><code>has</code>方法返回一個<code>Boolean</code>，表示某個<code>key</code>是否在當前Map 對象之中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;edition&#x27;</span>, <span class="number">6</span>);</span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">262</span>, <span class="string">&#x27;standard&#x27;</span>);</span><br><span class="line">m.<span class="title function_">set</span>(<span class="literal">undefined</span>, <span class="string">&#x27;nah&#x27;</span>);</span><br><span class="line"></span><br><span class="line">m.<span class="title function_">has</span>(<span class="string">&#x27;edition&#x27;</span>)     <span class="comment">// true</span></span><br><span class="line">m.<span class="title function_">has</span>(<span class="string">&#x27;years&#x27;</span>)       <span class="comment">// false</span></span><br><span class="line">m.<span class="title function_">has</span>(<span class="number">262</span>)           <span class="comment">// true</span></span><br><span class="line">m.<span class="title function_">has</span>(<span class="literal">undefined</span>)     <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="delete"><a href="#delete" class="headerlink" title="delete()"></a>delete()</h4><p><code>delete</code>方法刪除某個<code>key</code>，返回<code>true</code>。如果<code>刪除失敗</code>，返回<code>false</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">m.<span class="title function_">set</span>(<span class="literal">undefined</span>,<span class="string">&#x27;nah&#x27;</span>);</span><br><span class="line">m.<span class="title function_">has</span>(<span class="literal">undefined</span>)  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">m.<span class="title function_">delete</span>(<span class="literal">undefined</span>)</span><br><span class="line">m.<span class="title function_">has</span>(<span class="literal">undefined</span>)  <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h4 id="clear-1"><a href="#clear-1" class="headerlink" title="clear()"></a>clear()</h4><p><code>clear</code>方法清除所有元素，沒有返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;bar&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">map.<span class="property">size</span> <span class="comment">// 2</span></span><br><span class="line">map.<span class="title function_">clear</span>()</span><br><span class="line">map.<span class="property">size</span> <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h3 id="遍歷-1"><a href="#遍歷-1" class="headerlink" title="遍歷"></a>遍歷</h3><p><code>Map</code>結構原生提供<code>三個遍歷器生成函數</code>和<code>一個遍歷方法</code>：</p><ul><li>**keys()**：返回<code>key</code>的遍歷器</li><li>**values()**：返回<code>value</code>的遍歷器</li><li>**entries()**：返回<code>所有元素</code>的遍歷器</li><li>**forEach()**：遍歷Map 的所有<code>元素</code><br>遍歷順序就是插入順序</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;no&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;T&#x27;</span>,  <span class="string">&#x27;yes&#x27;</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;F&quot;</span></span><br><span class="line"><span class="comment">// &quot;T&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;no&quot;</span></span><br><span class="line"><span class="comment">// &quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> map.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item[<span class="number">0</span>], item[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;F&quot; &quot;no&quot;</span></span><br><span class="line"><span class="comment">// &quot;T&quot; &quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;F&quot; &quot;no&quot;</span></span><br><span class="line"><span class="comment">// &quot;T&quot; &quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于使用map.entries()</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;F&quot; &quot;no&quot;</span></span><br><span class="line"><span class="comment">// &quot;T&quot; &quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line">map.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value, key, map</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Key: %s, Value: %s&quot;</span>, key, value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Key: F, Value: no</span></span><br><span class="line"><span class="comment">// Key: T, Value: yes</span></span><br></pre></td></tr></table></figure><h4 id="複製與合併"><a href="#複製與合併" class="headerlink" title="複製與合併"></a><code>複製</code>與<code>合併</code></h4><p><code>clone</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> original = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> clone = <span class="keyword">new</span> <span class="title class_">Map</span>(original);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(clone.<span class="title function_">get</span>(<span class="number">1</span>)); <span class="comment">// one</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(original === clone); <span class="comment">// false. Useful for shallow comparison</span></span><br></pre></td></tr></table></figure><p><code>合併</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> first = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="string">&#x27;three&#x27;</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> second = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="number">1</span>, <span class="string">&#x27;uno&#x27;</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">&#x27;dos&#x27;</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Merge two maps. The last repeated key wins.</span></span><br><span class="line"><span class="comment">// Spread operator essentially converts a Map to an Array</span></span><br><span class="line"><span class="keyword">var</span> merged = <span class="keyword">new</span> <span class="title class_">Map</span>([...first, ...second]);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(merged.<span class="title function_">get</span>(<span class="number">1</span>)); <span class="comment">// uno</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(merged.<span class="title function_">get</span>(<span class="number">2</span>)); <span class="comment">// dos</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(merged.<span class="title function_">get</span>(<span class="number">3</span>)); <span class="comment">// three</span></span><br></pre></td></tr></table></figure><p><code>Map</code>也可以跟 <code>Array</code> 合併：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> first = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="string">&#x27;three&#x27;</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> second = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="number">1</span>, <span class="string">&#x27;uno&#x27;</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">&#x27;dos&#x27;</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Merge maps with an array. The last repeated key wins.</span></span><br><span class="line"><span class="keyword">var</span> merged = <span class="keyword">new</span> <span class="title class_">Map</span>([...first, ...second, [<span class="number">1</span>, <span class="string">&#x27;eins&#x27;</span>]]);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(merged.<span class="title function_">get</span>(<span class="number">1</span>)); <span class="comment">// eins</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(merged.<span class="title function_">get</span>(<span class="number">2</span>)); <span class="comment">// dos</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(merged.<span class="title function_">get</span>(<span class="number">3</span>)); <span class="comment">// three</span></span><br></pre></td></tr></table></figure><hr><h2 id="WeakSet-和-WeakMap"><a href="#WeakSet-和-WeakMap" class="headerlink" title="WeakSet 和 WeakMap"></a><code>WeakSet</code> 和 <code>WeakMap</code></h2><h3 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h3><p>和<code>Set</code>類似的另外一個<code>數據結構</code>稱之為<code>WeakSet</code>，<br>也是<code>內部元素</code>不能重複的<code>數據結構</code>。</p><h4 id="與Set有何差異"><a href="#與Set有何差異" class="headerlink" title="與Set有何差異"></a>與<code>Set</code>有何差異</h4><ul><li><p>WeakSet中只能存放<code>引用類型</code>，不能是<code>其他類型的值</code>;</p><ul><li><code>引用類型</code>統稱為<code>object 類型</code>，細分的話有：<code>Object</code> 類型、<code>Array</code> 類型、<code>Date</code> 類型、<code>RegExp</code> 類型、<code>Function</code> 類型</li></ul></li><li><p>WeakSet對元素的引用是<code>弱引用</code>，如果沒有其他引用對某個對象進行引用，那麼<code>垃圾回收機制</code>可以對該<code>對象</code>進行回收;</p></li></ul><p>舉個例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> ws=<span class="keyword">new</span> <span class="title class_">WeakSet</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素不是引用類型</span></span><br><span class="line"><span class="keyword">let</span> weakSet=<span class="keyword">new</span> <span class="title class_">WeakSet</span>([<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakSet) </span><br><span class="line">  <span class="comment">//  報錯!!!</span></span><br><span class="line">  <span class="comment">//  Uncaught TypeError: Invalid value used in weak set</span></span><br><span class="line">  <span class="comment">//  at WeakSet.add (&lt;anonymous&gt;)</span></span><br><span class="line">  <span class="comment">//  at new WeakSet (&lt;anonymous&gt;)</span></span><br><span class="line">  <span class="comment">//  at &lt;anonymous&gt;:4:13</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素為引用類型</span></span><br><span class="line"><span class="keyword">let</span> obj1=&#123;<span class="attr">name</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj2=&#123;<span class="attr">name</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> ws=<span class="keyword">new</span> <span class="title class_">WeakSet</span>([obj1,obj2]); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ws) <span class="comment">//WeakSet &#123;&#123;…&#125;, &#123;…&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------------</span></span><br><span class="line"><span class="keyword">let</span> a = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]];</span><br><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="title class_">WeakSet</span>(a);</span><br><span class="line"><span class="comment">// WeakSet &#123;[1, 2], [3, 4]&#125;</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ws) <span class="comment">//WeakSet&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// weakSet a為null ，weakSet就會被垃圾回收機制一起清空   ----＞所謂的弱型別</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------------</span></span><br><span class="line"><span class="keyword">let</span> a = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]];</span><br><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="title class_">Set</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ws) <span class="comment">// Set(2) &#123;Array(2), Array(2)&#125;</span></span><br><span class="line"></span><br><span class="line">a=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ws) <span class="comment">// Set(2) &#123;Array(2), Array(2)&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Set  a 為null ，不會被清空    ----＞ 所謂的強型別</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>來舉一個實際 <strong>Stack Overflow</strong> 的案例</p><blockquote><p>不能通過非構造方法創建出來的對象調用構造函數的方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> personSet = <span class="keyword">new</span> <span class="title class_">WeakSet</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    personSet.<span class="title function_">add</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">running</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!personSet.<span class="title function_">has</span>(<span class="variable language_">this</span>)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;不能通过非构造方法创建出来的对象调用running方法&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;running~&quot;</span>, <span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">p.<span class="title function_">running</span>()</span><br><span class="line">p = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">p.<span class="property">running</span>.<span class="title function_">call</span>(&#123;<span class="attr">name</span>: <span class="string">&quot;why&quot;</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h3><p>和<code>Map</code>類型的另外一個數據結構稱之為<code>WeakMap</code>，<br>也是以<code>key值對</code>的形式存在的。</p><h4 id="在API中WeakMap與Map有兩個區別"><a href="#在API中WeakMap與Map有兩個區別" class="headerlink" title="在API中WeakMap與Map有兩個區別"></a>在API中WeakMap與Map有兩個區別</h4><ul><li>沒有遍歷操作的<code>API</code></li><li>沒有<code>clear</code>清空方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WeakMap 可以使用 set 方法添加元素</span></span><br><span class="line"><span class="keyword">const</span> wm1 = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="keyword">const</span> key = &#123;<span class="attr">foo</span>: <span class="number">1</span>&#125;;</span><br><span class="line">wm1.<span class="title function_">set</span>(key, <span class="number">2</span>);</span><br><span class="line">wm1.<span class="title function_">get</span>(key) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// WeakMap 也可以接受一个Array，</span></span><br><span class="line"><span class="comment">// 作为構造函數的参数</span></span><br><span class="line"><span class="keyword">const</span> k1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> k2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> wm2 = <span class="keyword">new</span> <span class="title class_">WeakMap</span>([[k1, <span class="string">&#x27;foo&#x27;</span>], [k2, <span class="string">&#x27;bar&#x27;</span>]]);</span><br><span class="line">wm2.<span class="title function_">get</span>(k2) <span class="comment">// &quot;bar&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>WeakMap</code>只接受<code>Obj</code>作為<code>key</code>（null除外），不接受<code>其他類型</code>的值作為<code>key</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// TypeError: 1 is not an object!</span></span><br><span class="line">map.<span class="title function_">set</span>(<span class="title class_">Symbol</span>(), <span class="number">2</span>)</span><br><span class="line"><span class="comment">// TypeError: Invalid value used as weak map key</span></span><br><span class="line">map.<span class="title function_">set</span>(<span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// TypeError: Invalid value used as weak map key</span></span><br></pre></td></tr></table></figure><p><code>WeakMap</code>的<code>key</code>所指向的<code>Obj</code>，一旦不再需要，裡面的<code>key</code>和所對應的<code>value</code>會自動消失，不用手動刪除</p><p>舉個例子<code>: 在網頁的DOM 元素上添加數據，就可以使用</code>WeakMap<code>結構，當該DOM 元素被清除，其所對應的</code>WeakMap&#96;記錄就會自動被移除</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;example&#x27;</span>);</span><br><span class="line"></span><br><span class="line">wm.<span class="title function_">set</span>(element, <span class="string">&#x27;some information&#x27;</span>);</span><br><span class="line">wm.<span class="title function_">get</span>(element) <span class="comment">// &quot;some information&quot;</span></span><br></pre></td></tr></table></figure><p>注意：<code>WeakMap</code>弱引用的只是<code>key</code>，而不是<code>value</code>。<code>key</code>依然是正常引用</p><p>下面代碼中，<code>key</code>值obj會在WeakMap產生新的引用，當你修改obj不會影響到內部<code>value</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="keyword">let</span> key = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">foo</span>: <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">wm.<span class="title function_">set</span>(key, obj);</span><br><span class="line">obj = <span class="literal">null</span>;</span><br><span class="line">wm.<span class="title function_">get</span>(key)</span><br><span class="line"><span class="comment">// Object &#123;foo: 1&#125;</span></span><br></pre></td></tr></table></figure><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>新增了兩個<code>set</code>&amp;<code>map</code>數據結構，找資料發現還有他們對應的弱型別-.-+<br>搞得一個頭兩個大!!!</p><p>找了很多範例，終於是有一點點點點的<strong>明白</strong></p><p>希望大家也清楚了^_______________^</p><p><img src="https://media.tenor.com/dIlSHuNhTuAAAAAM/cats-cpr.gif" alt="清楚"></p><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><p><a href="https://es6.ruanyifeng.com/#docs/set-map">ECMAScript 6 入门</a></p></li><li><p><a href="http://caibaojian.com/es6/set-map.html">ES6 set和map数据结构</a></p></li><li><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Set">MDN-Set</a></p></li><li><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Map">MDN-MAp</a></p></li><li><p><a href="https://juejin.cn/post/6955064579109945380">JavaScript 中的構造函數</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;昨天剛研究完另一種數據結構&lt;strong&gt;Symbol&lt;/strong&gt;&lt;br&gt;趁記憶猶新的時候，把 &lt;strong&gt;Set&lt;/strong&gt; 跟 &lt;strong&gt;Map&lt;/strong&gt;一起解決!!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.tenor.com/GtZnj_mssJUAAAAM/yes.gif&quot; alt=&quot;yes&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="https://supermarpig.github.io/tags/ES6/"/>
    
    <category term="ECMAScript 6" scheme="https://supermarpig.github.io/tags/ECMAScript-6/"/>
    
    <category term="JavaScript" scheme="https://supermarpig.github.io/tags/JavaScript/"/>
    
    <category term="每天一點點" scheme="https://supermarpig.github.io/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E/"/>
    
  </entry>
  
  <entry>
    <title>每天一點點，學習ES6(五)數據結構Symbol</title>
    <link href="https://supermarpig.github.io/2023/04/17/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E4%BA%94-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8BSymbol/"/>
    <id>https://supermarpig.github.io/2023/04/17/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E4%BA%94-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8BSymbol/</id>
    <published>2023-04-17T03:55:21.000Z</published>
    <updated>2023-04-17T06:48:33.577Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天要來研究 新增的數據結構 Symbol</p><p><img src="https://media.tenor.com/CCHDqLErO7oAAAAd/haha-so.gif" alt="無奈"></p><span id="more"></span><h2 id="簡單數據類型"><a href="#簡單數據類型" class="headerlink" title="簡單數據類型"></a>簡單數據類型</h2><p>ES5中有5中簡單數據類型，</p><ul><li>Undefined</li><li>Null</li><li>Boolean</li><li>Number</li><li>String</li></ul><p>相信大家都很熟悉，也使用的相當流利</p><p><img src="https://media.tenor.com/wIxFiobxxbIAAAAd/john-jonah-jameson-lol.gif" alt="嘿嘿"></p><p>之後再來整理來給未來的我複習複習</p><blockquote><p>今天重點要來整理<code>Symbol</code>到底能用在哪邊</p></blockquote><p>根據<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">MDN-Symbol</a>說明，只有兩種類型可以做為<code>Obj</code>的key值</p><ul><li>String 類型</li><li>Symbol 類型</li></ul><p>如果使用另一種類型，例如數字，它會被自動轉換為字符串。<br>→ <code>obj[1]</code> 與 <code>obj[&quot;1&quot;]</code> 相同<br>→ <code>obj[true]</code> 與 <code>obj[&quot;true&quot;]</code> 相同</p><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><h3 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Symbol</span>([description])</span><br></pre></td></tr></table></figure><h3 id="參數"><a href="#參數" class="headerlink" title="參數"></a>參數</h3><p>description<br>可以選擇的<code>String</code>類型。<br>對 <code>symbol</code> 的描述，可用於調適 但不是訪問 <code>symbol</code> 本身。</p><h2 id="Symbol-例子"><a href="#Symbol-例子" class="headerlink" title="Symbol 例子"></a>Symbol 例子</h2><blockquote><p>“symbol” 值表示唯一的標識符。</p></blockquote><p>可以給symbol 一個描述（也稱為symbol 名），這在代碼調試時非常有用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// id 是描述為 &quot;id&quot; 的 symbol</span></span><br><span class="line"><span class="keyword">let</span> id = <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure><p>symbol 保證是唯一的。<br>即使我們創建了許多具有相同描述的symbol，它們的值也是不同。<br><code>ID</code>只是一個標籤，不影響任何東西。<br>例如，這裡有兩個描述相同的symbol —— 它們不相等：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id1 = <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> id2 = <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(id1 == id2); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="例子二"><a href="#例子二" class="headerlink" title="例子二"></a>例子二</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1) <span class="comment">// Symbol(foo)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2) <span class="comment">// Symbol(bar)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 === s2) <span class="comment">// false</span></span><br><span class="line"><span class="comment">//---------------------------------------------------</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;Cody&quot;</span>,</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>(obj) <span class="comment">// 如果参数是Object的時候，會自動調用該對象toString方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s) <span class="comment">// Symbol(Cody)</span></span><br></pre></td></tr></table></figure><h2 id="關於description"><a href="#關於description" class="headerlink" title="關於description"></a>關於description</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>()</span><br><span class="line">s.<span class="property">name</span> = <span class="string">&quot;Cody&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s) <span class="comment">// Symbol&#123;&#125; // Symbol不是對象，不能用對待對象的方式對待Symbol</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">description</span>) <span class="comment">// undefind</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">name</span>) <span class="comment">// undefind</span></span><br><span class="line"><span class="comment">//---------------------------------------------</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">description</span>) <span class="comment">// foo</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Symbol 需要給一個值，<code>description</code>才找的到東西</p></blockquote><h2 id="Symbol-for"><a href="#Symbol-for" class="headerlink" title="Symbol.for"></a>Symbol.for</h2><ul><li>通過Symbol.for相當於定義在全局的變量，<br>如果之前聲明過，後面再通過Symbol.for的時候，會在全局找，<br>如果描述一樣的話，會和上一個一樣。</li></ul><blockquote><p>可以簡單理解為對象指向同一個堆內存地址。</p></blockquote><p>舉個例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"> <span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="property">log</span> (s1) <span class="comment">// Symbol(foo) </span></span><br><span class="line"> <span class="variable language_">console</span> log (s1 === s2) <span class="comment">// true </span></span><br><span class="line"><span class="comment">// 即使是在函數定義域內，通過Symbol.for也會將該Symbol註冊在全局</span></span><br><span class="line"><span class="keyword">function</span>  <span class="title function_">foo</span> ()&#123;</span><br><span class="line">     <span class="keyword">return</span>  <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> x = foo ()</span><br><span class="line"> <span class="keyword">const</span> y = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(x === y) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>這樣理解為，Function return 的Symbol.for(‘foo’)<br>指向都是同一個地址的 (‘foo’)<br>而且<strong>Symbol.for</strong>會將指向只到<strong>全域</strong></p><p>所以最後一行 X &#x3D;&#x3D;&#x3D; Y 才會等於 <code>True</code></p><p><font size=5 > 完蛋!!打完都覺得要想十分鐘才轉得過來</font></p><p><img src="https://media.tenor.com/53zhDFlKE8gAAAAd/kabangu-upset.gif" alt="眼神死"></p><h2 id="Symbol-keyFor"><a href="#Symbol-keyFor" class="headerlink" title="Symbol.keyFor"></a>Symbol.keyFor</h2><blockquote><p>查看是否在全局登記Symbol裡面的描述。與上面的Symbol.for對應。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(s1)) <span class="comment">// undefind </span></span><br><span class="line"><span class="keyword">const</span> s2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="property">log</span> (<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(s1)) <span class="comment">// foo</span></span><br></pre></td></tr></table></figure><p>這樣表示 <strong>s1</strong> 的Symbol 不是全域參數<br><strong>s2</strong> 指向全域的地址 ，所以 <strong>Symbol.keyFor</strong>才搜尋的到</p><p>好了!!!看到這邊我知道你已經混亂了<br>該來點實際案例!!!!!!</p><p><img src="https://media.tenor.com/Sg7JaLXCkhoAAAAC/awkward-in-trouble.gif" alt="驚訝"></p><h2 id="實際應用"><a href="#實際應用" class="headerlink" title="實際應用"></a>實際應用</h2><h3 id="應用一：解決對象-Obj-中key重複-但是表示不同訊息的情況"><a href="#應用一：解決對象-Obj-中key重複-但是表示不同訊息的情況" class="headerlink" title="應用一：解決對象 Obj 中key重複 但是表示不同訊息的情況"></a>應用一：解決對象 Obj 中key重複 但是表示不同訊息的情況</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 對象對於相同的key的訊息會進行覆蓋</span></span><br><span class="line"><span class="keyword">const</span> grade = &#123;</span><br><span class="line">     zhangsan :&#123;</span><br><span class="line">         address : <span class="string">&quot;xxx&quot;</span> , tel : <span class="string">&quot;111&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    lisi :&#123;</span><br><span class="line">         address : <span class="string">&quot;yyy&quot;</span> , tel : <span class="string">&quot;222&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    lisi :&#123;</span><br><span class="line">         address : <span class="string">&quot;zzz&quot;</span> , tel : <span class="string">&quot;333&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span> (grade) <span class="comment">// &#123;zhangsan:&#123;address:&quot;xxx&quot;,tel:&quot;111&quot;&#125;,lisi:&#123;address:&quot;zzz&quot;,tel:&quot;333&quot;&#125;&#125; </span></span><br><span class="line"><span class="comment">// 通過變量構建對象</span></span><br><span class="line"><span class="keyword">const</span> stu1 = <span class="string">&quot;lisi&quot;</span> </span><br><span class="line"><span class="keyword">const</span> stu2 = <span class="string">&quot;lisi&quot;</span> </span><br><span class="line"><span class="keyword">const</span> grade = &#123;</span><br><span class="line">    [stu1]:&#123;</span><br><span class="line">        address : <span class="string">&quot;yyy&quot;</span> , tel : <span class="string">&quot;222&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    [stu2]:&#123;</span><br><span class="line">        address : <span class="string">&quot;zzz&quot;</span> , tel : <span class="string">&quot;333&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span> . log (grade) <span class="comment">// &#123;lisi:&#123;address:&quot;zzz&quot;,tel:&quot;333&quot;&#125;&#125; </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// es6通過Symbol解決key相同，訊息不同情況</span></span><br><span class="line"> <span class="keyword">const</span> stu1 = <span class="title class_">Symbol</span> ( <span class="string">&quot;lisi&quot;</span> )</span><br><span class="line"> <span class="keyword">const</span> stu2 = <span class="title class_">Symbol</span> ( <span class="string">&quot;lisi&quot;</span> )</span><br><span class="line"> <span class="keyword">const</span> grade = &#123;</span><br><span class="line">    [stu1]:&#123;</span><br><span class="line">        address : <span class="string">&quot;yyy&quot;</span> , tel : <span class="string">&quot;222&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    [stu2]:&#123;</span><br><span class="line">        address : <span class="string">&quot;zzz&quot;</span> , tel : <span class="string">&quot;333&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span> (grade) <span class="comment">// &#123;Symbol(lisi):&#123;address:&quot;yyy&quot;,tel:&quot;222&quot;&#125;,Symbol(lisi):&#123;address:&quot;zzz&quot;,tel:&quot;333&quot;&#125;&#125; </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span> (grade[stu1]) <span class="comment">// &#123;address:&quot;yyy&quot;,tel:&quot;222&quot;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="應用二：保護-Class-中的部分屬性"><a href="#應用二：保護-Class-中的部分屬性" class="headerlink" title="應用二：保護 Class 中的部分屬性"></a>應用二：保護 <strong>Class</strong> 中的部分屬性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定義基本類和類中方法調用</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">User</span> &#123;</span><br><span class="line">     <span class="title function_">constructor</span> ( name )&#123;</span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line">    getName ()&#123;</span><br><span class="line">         <span class="keyword">return</span>  <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span>  <span class="title class_">User</span> ( <span class="string">&quot;lilei&quot;</span> )</span><br><span class="line"> <span class="variable language_">console</span> . log (user. getName ()) <span class="comment">// lilei </span></span><br><span class="line"><span class="comment">// 不同循環遍歷方式獲取類內部屬性，根據是否可以獲取Symbol作為key的情況</span></span><br><span class="line"><span class="keyword">const</span> sym = <span class="title class_">Symbol</span> ( <span class="string">&quot;AILI&quot;</span> )</span><br><span class="line"> <span class="keyword">class</span>  <span class="title class_">User</span> &#123;</span><br><span class="line">     <span class="title function_">constructor</span> ( name )&#123;</span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">         <span class="variable language_">this</span>[sym] = <span class="string">&quot;AILI.com&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    getName ()&#123;</span><br><span class="line">         <span class="keyword">return</span>  <span class="variable language_">this</span>.<span class="property">name</span> + <span class="variable language_">this</span> [sym]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span>  <span class="title class_">User</span> ( <span class="string">&quot;lilei&quot;</span> )</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(user. getName ()) <span class="comment">// lileiAILI.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通過for...in 無法遍歷到Symbol屬性</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> key <span class="keyword">in</span> user)&#123;</span><br><span class="line">     <span class="variable language_">console</span> . log (key) <span class="comment">// name</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同樣不能獲取到Symbol屬性</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> key <span class="keyword">of</span>  <span class="title class_">Object</span> . keys (user))&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="property">log</span> (key) <span class="comment">// name</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只能取到Symbol屬性</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> key <span class="keyword">of</span>  <span class="title class_">Object</span> . getOwnPropertySymbols (user))&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="property">log</span> (key) <span class="comment">// Symbol(AILI)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 即能獲取到普通屬性，又能獲取到Symbol屬性</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> key <span class="keyword">of</span>  <span class="title class_">Reflect</span> . ownKeys (user))&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="property">log</span> (key) <span class="comment">// name Symbol(AILI) </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="應用三：消除魔法字符串（比較長或者難以辨認，容易出錯的字符串）"><a href="#應用三：消除魔法字符串（比較長或者難以辨認，容易出錯的字符串）" class="headerlink" title="應用三：消除魔法字符串（比較長或者難以辨認，容易出錯的字符串）"></a>應用三：消除魔法字符串（比較長或者難以辨認，容易出錯的字符串）</h3><p>真實開發情況</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getArea</span>(<span class="params">shape</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> area = <span class="number">0</span></span><br><span class="line">    <span class="keyword">switch</span>(shape)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;Triangle&quot;</span>:</span><br><span class="line">            area = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;Circle&quot;</span>:</span><br><span class="line">            area = <span class="number">2</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> area</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getArea</span>(<span class="string">&quot;Triangle&quot;</span>)) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>可以修改為下方情況</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在這個函數中，【Triangle】和【Circle】已經不重要，只要區分開即可，利用Symbol不一致性</span></span><br><span class="line"><span class="keyword">const</span> shapeType = &#123;</span><br><span class="line">     triangle : <span class="title class_">Symbol</span> (),</span><br><span class="line">     circle : <span class="title class_">Symbol</span> ()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span>  <span class="title function_">getArea</span> ( shape )&#123;</span><br><span class="line">     <span class="keyword">let</span> area = <span class="number">0</span> </span><br><span class="line">    <span class="keyword">switch</span> (shape)&#123;</span><br><span class="line">         <span class="keyword">case</span> shapeType.<span class="property">triangle</span> :</span><br><span class="line">            area = <span class="number">1</span> </span><br><span class="line">            <span class="keyword">break</span> </span><br><span class="line">        <span class="keyword">case</span> shapeType.<span class="property">circle</span> :</span><br><span class="line">            area = <span class="number">2</span> </span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> area</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getArea (shapeType.<span class="property">triangle</span> )) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>這樣代碼就會簡潔很多</p><p>以上整理</p><p>希望會有<strong>比較</strong>清楚的感覺</p><p><img src="https://media.tenor.com/yaB9PFnaEtgAAAAC/no-not-in-my-house.gif" alt="搖頭"></p><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://zh.javascript.info/symbol">symbol 类型</a></li><li><a href="https://segmentfault.com/a/1190000040207993">ES6中的新数据类型——Symbol</a></li><li><a href="https://www.cnblogs.com/yaopengfei/p/16030113.html">第十四节：ES6之Symbol、Set和WeakSet、Map和WeakMap详解</a></li><li><a href="https://juejin.cn/post/7107030052709072903#heading-0">一文搞清楚ES6新增数据结构 Symbol Map WeakMap Set WeakSet</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">MDN-Symbol</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天要來研究 新增的數據結構 Symbol&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.tenor.com/CCHDqLErO7oAAAAd/haha-so.gif&quot; alt=&quot;無奈&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="https://supermarpig.github.io/tags/ES6/"/>
    
    <category term="ECMAScript 6" scheme="https://supermarpig.github.io/tags/ECMAScript-6/"/>
    
    <category term="JavaScript" scheme="https://supermarpig.github.io/tags/JavaScript/"/>
    
    <category term="每天一點點" scheme="https://supermarpig.github.io/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E/"/>
    
  </entry>
  
  <entry>
    <title>React 警告 Invalid DOM property for</title>
    <link href="https://supermarpig.github.io/2023/04/17/React-%E8%AD%A6%E5%91%8A-Invalid-DOM-property-for/"/>
    <id>https://supermarpig.github.io/2023/04/17/React-%E8%AD%A6%E5%91%8A-Invalid-DOM-property-for/</id>
    <published>2023-04-17T02:38:11.000Z</published>
    <updated>2023-04-17T02:53:08.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>警告不影響使用 ，但影響美觀</p><span id="more"></span><p><img src="https://www.jiyik.com/uploads/220621/I_2022062122313268a1fe.png" alt="Invalid"></p><p>來看看是哪兒出問題</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ⛔️ Warning: Invalid DOM property `for`. Did you mean `htmlFor`?</span></span><br><span class="line">      &lt;input type=<span class="string">&quot;checkbox&quot;</span> id=<span class="string">&quot;menu&quot;</span>&gt;&lt;/input&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;menu&quot;</span> <span class="attr">className</span>=<span class="string">&quot;line&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;menu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>問題是使用 for 屬性將label標籤與input綁定，<br>但 for 是 JavaScript 中的保留字。</p><blockquote><p>在React 中需要更換成 htmlFor 而不是for</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> id=<span class="string">&quot;menu&quot;</span>&gt;&lt;/input&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;menu&quot;</span> <span class="attr">className</span>=<span class="string">&quot;line&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;menu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>我們必須在React 中使用 htmlFor 的原因是因為 for 關鍵字是一個保留字- 它用於for 循環。</p><p>這也是使用 className 屬性而不是 class 的原因。<br>class這個詞是保留的，因為它被用來聲明一個ES6 類。</p><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.jiyik.com/tm/xwzj/web_1243.html">Invalid DOM</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;警告不影響使用 ，但影響美觀&lt;/p&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="React" scheme="https://supermarpig.github.io/tags/React/"/>
    
    <category term="開發筆記" scheme="https://supermarpig.github.io/tags/%E9%96%8B%E7%99%BC%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>少用vw來控制字體大小</title>
    <link href="https://supermarpig.github.io/2023/04/17/%E5%B0%91%E7%94%A8vw%E4%BE%86%E6%8E%A7%E5%88%B6%E5%AD%97%E9%AB%94%E5%A4%A7%E5%B0%8F/"/>
    <id>https://supermarpig.github.io/2023/04/17/%E5%B0%91%E7%94%A8vw%E4%BE%86%E6%8E%A7%E5%88%B6%E5%AD%97%E9%AB%94%E5%A4%A7%E5%B0%8F/</id>
    <published>2023-04-17T01:50:00.000Z</published>
    <updated>2023-04-17T02:05:44.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>控制文字大小用<code>vw</code> 來做RWD時，<br>發現按住ctrl+滾輪縮放時，文字大小竟然不會跟著變動</p><span id="more"></span><h2 id="vw、vh、vMin、vMax-的含義"><a href="#vw、vh、vMin、vMax-的含義" class="headerlink" title="vw、vh、vMin、vMax 的含義"></a>vw、vh、vMin、vMax 的含義</h2><ul><li>vw、vh、vMin、vMax 是一種單位，也是相對單位。<br>它相對的不是父節點或者頁面的根節點。<br>而是由螢幕（Viewport）大小來決定的，單位 1，代表類似於 1%。</li></ul><p>螢幕( Viewport )是你的瀏覽器實際顯示內容的區域—，<br>換句話說是你的不包括工具欄和按鈕的網頁瀏覽器。</p><ul><li>vw：螢幕寬度的百分比（1vw 代表螢幕的寬度為 1%）</li><li>vh：螢幕高度的百分比</li><li>vMin：當前 vw 和 vh 中較小的一個值</li><li>vMax：當前 vw 和 vh 中較大的一個值</li></ul><h2 id="vw、vh-與-百分比的區別"><a href="#vw、vh-與-百分比的區別" class="headerlink" title="vw、vh 與% 百分比的區別"></a>vw、vh 與% 百分比的區別</h2><p>（1）% 是相對於父元素的大小設定的比率，vw、vh 是視窗大小決定的。</p><p>（2）vw、vh 優勢在於能夠直接獲取高度，而用 % 在沒有設置 body 高度的情況下，是無法正確獲得可視區域的高度的，所以這是挺不錯的優勢。</p><h2 id="vMin、vMax-用處"><a href="#vMin、vMax-用處" class="headerlink" title="vMin、vMax 用處"></a>vMin、vMax 用處</h2><p>做移動頁面開發時，如果使用 vw、wh 設置字體大小（比如 5vw），在豎屏和橫屏狀態下顯示的字體大小是不一樣的。</p><p>由於 vMin 和 vMax 是當前較小的 vw 和 vh 和當前較大的 vw 和 vh。這裡就可以用到 vMin 和 vMax。使得文字大小在橫豎屏下保持一致。</p><h2 id="瀏覽器兼容性"><a href="#瀏覽器兼容性" class="headerlink" title="瀏覽器兼容性"></a>瀏覽器兼容性</h2><p>（1）桌面 PC</p><ul><li>Chrome：自 26 版起就完美支持（2013年2月）</li><li>Firefox：自 19 版起就完美支持（2013年1月）</li><li>Safari：自 6.1 版起就完美支持（2013年10月）</li><li>Opera：自 15 版起就完美支持（2013年7月）</li><li>IE：自 IE10 起（包括 Edge）到現在還只是部分支持（不支持 vmax，同時  vm 代替 vmin）</li></ul><p>（2）移動設備</p><ul><li>Android：自 4.4 版起就完美支持（2013年12月）</li><li>iOS：自 iOS8 版起就完美支持（2014年9月）</li></ul><hr><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>看了一下網路上的文章</p><p>都比較建議用 <code>rem</code> or <code>em</code><br>來當文字的縮放尺寸<br>也有少部分的說明用 <code>%</code>也可以<br>就是沒有說用<code>vw</code> or <code>vh</code></p><p>主要原因可能就是它有可能會失效!!</p><p>如果真的想要使用<code>vw</code> 來配合控制文字大小</p><p>可以使用 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/clamp">CSS clamp()</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">clamp</span>(<span class="number">1rem</span>, <span class="number">3vw</span>, <span class="number">2rem</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/clamp">MDN-clamp()</a></p></li><li><p><a href="https://www.hoeser.dev/webdev-sins/2022-02-07-vw-font-size/">Don’t use vw for font sizes</a></p></li><li><p><a href="https://www.reddit.com/r/css/comments/eahhvg/is_it_a_good_habit_to_use_vw_for_font_size_and/">Is it a good habit to use vw for font size and % for padding?</a></p></li><li><p><a href="https://blog.csdn.net/zhangchen124/article/details/87710579">font-size用VW来写的方法</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;控制文字大小用&lt;code&gt;vw&lt;/code&gt; 來做RWD時，&lt;br&gt;發現按住ctrl+滾輪縮放時，文字大小竟然不會跟著變動&lt;/p&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="開發筆記" scheme="https://supermarpig.github.io/tags/%E9%96%8B%E7%99%BC%E7%AD%86%E8%A8%98/"/>
    
    <category term="文字大小" scheme="https://supermarpig.github.io/tags/%E6%96%87%E5%AD%97%E5%A4%A7%E5%B0%8F/"/>
    
  </entry>
  
</feed>
