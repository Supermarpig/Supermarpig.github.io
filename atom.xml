<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cody Di Da Di</title>
  
  <subtitle>搭拉拉拉搭搭搭</subtitle>
  <link href="https://supermarpig.github.io/atom.xml" rel="self"/>
  
  <link href="https://supermarpig.github.io/"/>
  <updated>2023-04-17T02:50:40.500Z</updated>
  <id>https://supermarpig.github.io/</id>
  
  <author>
    <name>Cody</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React 警告 Invalid DOM property for</title>
    <link href="https://supermarpig.github.io/2023/04/17/React-%E8%AD%A6%E5%91%8A-Invalid-DOM-property-for/"/>
    <id>https://supermarpig.github.io/2023/04/17/React-%E8%AD%A6%E5%91%8A-Invalid-DOM-property-for/</id>
    <published>2023-04-17T02:38:11.000Z</published>
    <updated>2023-04-17T02:50:40.500Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>警告不影響使用 ，但影響美觀</p><span id="more"></span><p><img src="https://www.jiyik.com/uploads/220621/I_2022062122313268a1fe.png" alt="Invalid"></p><p>來看看是哪兒出問題</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ⛔️ Warning: Invalid DOM property `for`. Did you mean `htmlFor`?</span></span><br><span class="line">      &lt;input type=<span class="string">&quot;checkbox&quot;</span> id=<span class="string">&quot;menu&quot;</span>&gt;&lt;/input&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;menu&quot;</span> <span class="attr">className</span>=<span class="string">&quot;line&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;menu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>問題是使用 for 屬性將label標籤與input綁定，<br>但 for 是 JavaScript 中的保留字。</p><blockquote><p>在React 中需要更換成 htmlFor 而不是for</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> id=<span class="string">&quot;menu&quot;</span>&gt;&lt;/input&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;menu&quot;</span> <span class="attr">className</span>=<span class="string">&quot;line&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;menu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>我們必須在React 中使用 htmlFor 的原因是因為 for 關鍵字是一個保留字- 它用於for 循環。</p><p>這也是使用 className 屬性而不是 class 的原因。<br>class這個詞是保留的，因為它被用來聲明一個ES6 類。</p><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.jiyik.com/tm/xwzj/web_1243.html">Invalid DOM</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;警告不影響使用 ，但影響美觀&lt;/p&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="開發筆記" scheme="https://supermarpig.github.io/tags/%E9%96%8B%E7%99%BC%E7%AD%86%E8%A8%98/"/>
    
    <category term="React" scheme="https://supermarpig.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>少用vw來控制字體大小</title>
    <link href="https://supermarpig.github.io/2023/04/17/%E5%B0%91%E7%94%A8vw%E4%BE%86%E6%8E%A7%E5%88%B6%E5%AD%97%E9%AB%94%E5%A4%A7%E5%B0%8F/"/>
    <id>https://supermarpig.github.io/2023/04/17/%E5%B0%91%E7%94%A8vw%E4%BE%86%E6%8E%A7%E5%88%B6%E5%AD%97%E9%AB%94%E5%A4%A7%E5%B0%8F/</id>
    <published>2023-04-17T01:50:00.000Z</published>
    <updated>2023-04-17T02:05:44.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>控制文字大小用<code>vw</code> 來做RWD時，<br>發現按住ctrl+滾輪縮放時，文字大小竟然不會跟著變動</p><span id="more"></span><h2 id="vw、vh、vMin、vMax-的含義"><a href="#vw、vh、vMin、vMax-的含義" class="headerlink" title="vw、vh、vMin、vMax 的含義"></a>vw、vh、vMin、vMax 的含義</h2><ul><li>vw、vh、vMin、vMax 是一種單位，也是相對單位。<br>它相對的不是父節點或者頁面的根節點。<br>而是由螢幕（Viewport）大小來決定的，單位 1，代表類似於 1%。</li></ul><p>螢幕( Viewport )是你的瀏覽器實際顯示內容的區域—，<br>換句話說是你的不包括工具欄和按鈕的網頁瀏覽器。</p><ul><li>vw：螢幕寬度的百分比（1vw 代表螢幕的寬度為 1%）</li><li>vh：螢幕高度的百分比</li><li>vMin：當前 vw 和 vh 中較小的一個值</li><li>vMax：當前 vw 和 vh 中較大的一個值</li></ul><h2 id="vw、vh-與-百分比的區別"><a href="#vw、vh-與-百分比的區別" class="headerlink" title="vw、vh 與% 百分比的區別"></a>vw、vh 與% 百分比的區別</h2><p>（1）% 是相對於父元素的大小設定的比率，vw、vh 是視窗大小決定的。</p><p>（2）vw、vh 優勢在於能夠直接獲取高度，而用 % 在沒有設置 body 高度的情況下，是無法正確獲得可視區域的高度的，所以這是挺不錯的優勢。</p><h2 id="vMin、vMax-用處"><a href="#vMin、vMax-用處" class="headerlink" title="vMin、vMax 用處"></a>vMin、vMax 用處</h2><p>做移動頁面開發時，如果使用 vw、wh 設置字體大小（比如 5vw），在豎屏和橫屏狀態下顯示的字體大小是不一樣的。</p><p>由於 vMin 和 vMax 是當前較小的 vw 和 vh 和當前較大的 vw 和 vh。這裡就可以用到 vMin 和 vMax。使得文字大小在橫豎屏下保持一致。</p><h2 id="瀏覽器兼容性"><a href="#瀏覽器兼容性" class="headerlink" title="瀏覽器兼容性"></a>瀏覽器兼容性</h2><p>（1）桌面 PC</p><ul><li>Chrome：自 26 版起就完美支持（2013年2月）</li><li>Firefox：自 19 版起就完美支持（2013年1月）</li><li>Safari：自 6.1 版起就完美支持（2013年10月）</li><li>Opera：自 15 版起就完美支持（2013年7月）</li><li>IE：自 IE10 起（包括 Edge）到現在還只是部分支持（不支持 vmax，同時  vm 代替 vmin）</li></ul><p>（2）移動設備</p><ul><li>Android：自 4.4 版起就完美支持（2013年12月）</li><li>iOS：自 iOS8 版起就完美支持（2014年9月）</li></ul><hr><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>看了一下網路上的文章</p><p>都比較建議用 <code>rem</code> or <code>em</code><br>來當文字的縮放尺寸<br>也有少部分的說明用 <code>%</code>也可以<br>就是沒有說用<code>vw</code> or <code>vh</code></p><p>主要原因可能就是它有可能會失效!!</p><p>如果真的想要使用<code>vw</code> 來配合控制文字大小</p><p>可以使用 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/clamp">CSS clamp()</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">clamp</span>(<span class="number">1rem</span>, <span class="number">3vw</span>, <span class="number">2rem</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/clamp">MDN-clamp()</a></p></li><li><p><a href="https://www.hoeser.dev/webdev-sins/2022-02-07-vw-font-size/">Don’t use vw for font sizes</a></p></li><li><p><a href="https://www.reddit.com/r/css/comments/eahhvg/is_it_a_good_habit_to_use_vw_for_font_size_and/">Is it a good habit to use vw for font size and % for padding?</a></p></li><li><p><a href="https://blog.csdn.net/zhangchen124/article/details/87710579">font-size用VW来写的方法</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;控制文字大小用&lt;code&gt;vw&lt;/code&gt; 來做RWD時，&lt;br&gt;發現按住ctrl+滾輪縮放時，文字大小竟然不會跟著變動&lt;/p&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="開發筆記" scheme="https://supermarpig.github.io/tags/%E9%96%8B%E7%99%BC%E7%AD%86%E8%A8%98/"/>
    
    <category term="文字大小" scheme="https://supermarpig.github.io/tags/%E6%96%87%E5%AD%97%E5%A4%A7%E5%B0%8F/"/>
    
  </entry>
  
  <entry>
    <title>每天一點點，學習ES6(四)Spread syntax 展開運算子</title>
    <link href="https://supermarpig.github.io/2023/04/14/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E5%9B%9B-Spread-syntax/"/>
    <id>https://supermarpig.github.io/2023/04/14/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E5%9B%9B-Spread-syntax/</id>
    <published>2023-04-14T01:27:16.000Z</published>
    <updated>2023-04-14T03:41:26.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>I don’t wanna tell you what to do, but I know it works, so I say it as plainly as I can: Just write, keep on writing.<br>–&lt; <a href="https://robert.bearblog.dev/just-write/">Robert Birming</a> &gt;</p></blockquote><p>持續學習，努力努力</p><span id="more"></span><p>展開&#x2F;其餘運算子(Spread operator&#x2F;Rest operator)<br>都是 Javascript ES6 中的特性，兩者的符號雖然都是 <code>…</code> ，<br>但是在使用上略有差異。</p><blockquote><p>先來看看展開運算子<code>Spread operator</code></p></blockquote><p>先來看一下MDN 的官方定義 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">Spread syntax (…)</a></p><blockquote><p>展開語法(Spread syntax), 可以在<code>函數調用/數組構造</code>時, 將<code>數組表達式</code>或者<code>string</code>在語法層面展開；<br>還可以在<code>構造字面量</code>時, 將對象Obj表達式按key-value的方式展開。<br>(字面量一般指[1, 2, 3] 或者{name: “mdn”} 這種簡潔的構造方式)</p></blockquote><p>從定義我們可以了解到展開語法的<code>使用場景</code>如下</p><ul><li>函數調用</li><li>數組構造</li><li>構造字面量對象(ES2018)</li></ul><p>消化一下原文整理 <code>Spread syntax</code>的作用如下</p><ul><li>展開數組</li><li>展開字符串</li><li>展開對象 (只能用於<code>構造字面量對象</code>)</li></ul><h2 id="在函數中調用時使用"><a href="#在函數中調用時使用" class="headerlink" title="在函數中調用時使用"></a>在函數中調用時使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 展開數組</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span> (...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">// 1 2 3 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 展開字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span> (...<span class="string">&#x27;hello world&#x27;</span>) <span class="comment">// h e l l o   w o r l d</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 展開對象【無法使用，會報錯】</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span> (...&#123; a : <span class="number">1</span> &#125;) <span class="comment">// Uncaught TypeError</span></span><br></pre></td></tr></table></figure><h3 id="與rest參數對比"><a href="#與rest參數對比" class="headerlink" title="與rest參數對比"></a>與rest參數對比</h3><p>在函數調用時使用展開語法時，需要特別注意<code>數組</code>、<code>字符串</code>其實是被展開成了<code>參數序列</code>。</p><table><thead><tr><th align="center">語法</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">其餘參數 <code>...</code></td><td align="center">將一個不確定數量的參數集合在一個陣列中</td></tr><tr><td align="center">展開運算子 <code>...</code></td><td align="center">將陣列中的值展開為個別值</td></tr></tbody></table><p>舉個例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>  <span class="title function_">test</span> ( x, y, ...params ) &#123;</span><br><span class="line">   <span class="comment">// 定義一個函數時，使用的是rest參數</span></span><br><span class="line">  <span class="variable language_">console</span> . log (...params) <span class="comment">// 調用一個函數時，使用的是rest參數</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="作為apply的語法糖"><a href="#作為apply的語法糖" class="headerlink" title="作為apply的語法糖"></a>作為apply的語法糖</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numArr = [ <span class="number">1</span> , <span class="number">10</span> , <span class="number">2</span> , <span class="number">234</span> ]</span><br><span class="line"> <span class="title class_">Math</span>.<span class="property">max</span>.<span class="property">apply</span> ( <span class="literal">null</span> , numArr)</span><br><span class="line"> <span class="comment">// 完全等於</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="property">max</span> (...numArr) <span class="comment">// 將numArr展開為參數序列</span></span><br></pre></td></tr></table></figure><h3 id="在new的時候使用"><a href="#在new的時候使用" class="headerlink" title="在new的時候使用"></a>在new的時候使用</h3><p>因為new的時候是無法調用apply的，所以展開語法這個時候起到了很有用的腳色</p><p>先拿一個當例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>  <span class="title function_">Person</span> ( name, age, weight ) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">weight</span> = weight </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> blues = <span class="keyword">new</span> <span class="title class_">Person</span> ( <span class="string">&#x27;blues1&#x27;</span> , <span class="string">&#x27;16&#x27;</span> , <span class="string">&#x27;60&#x27;</span> )</span><br><span class="line"> <span class="comment">// 完全等價於let blues = new Person (...[ &#x27;blues1&#x27; , &#x27;16&#x27; , &#x27;60&#x27; ])</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>這在需要生產很多個的例子時，非常有用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>  <span class="title function_">Person</span> ( name, age, weight ) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">weight</span> = weight </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> persons = [[ <span class="string">&#x27;blues1&#x27;</span> , <span class="string">&#x27;16&#x27;</span> , <span class="string">&#x27;60&#x27;</span> ], [ <span class="string">&#x27;blues2&#x27;</span> , <span class="string">&#x27;16&#x27;</span> , <span class="string">&#x27;60&#x27;</span> ], [ <span class="string">&#x27;blues3&#x27;</span> , <span class="string">&#x27;16&#x27;</span> , <span class="string">&#x27;60&#x27;</span> ]]</span><br><span class="line"> <span class="keyword">let</span> createdPersons = &#123;&#125; </span><br><span class="line">persons.<span class="property">forEach</span> ( <span class="function"><span class="params">e</span> =&gt;</span>&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(e[<span class="number">0</span>]) </span><br><span class="line">  createdPersons[e[<span class="number">0</span>]] = <span class="keyword">new</span> <span class="title class_">Person</span> (...e) </span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="在數組構造時使用"><a href="#在數組構造時使用" class="headerlink" title="在數組構造時使用"></a>在數組構造時使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 展開數組</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [ <span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> ]</span><br><span class="line"> <span class="keyword">let</span> arr2 = [ <span class="number">0</span> , ...arr1, <span class="number">4</span> ] <span class="comment">// [0, 1, 2, 3, 4] </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 展開字符串</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [ <span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> , ... <span class="string">&#x27;456&#x27;</span> ] <span class="comment">// [1, 2, 3, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="代替將已有數組元素插入到新數組重的所有API"><a href="#代替將已有數組元素插入到新數組重的所有API" class="headerlink" title="代替將已有數組元素插入到新數組重的所有API"></a>代替將已有數組元素插入到新數組重的所有API</h3><blockquote><p>以往我們將已有數組的元素插入到新數組的中，<br>需要藉用一些API例如<code>push</code>&#x2F;<code>unshift</code>&#x2F;<code>splice</code>&#x2F;<code>concat</code>，<br>現在我們使用<code>展開語法</code>可以對上述api進行替換。<br>需要特別強調的是，這在<code>創建新數組</code>的時候才比較方便</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ <span class="number">4</span> , <span class="number">5</span> ]</span><br><span class="line"> <span class="keyword">let</span> arr2 = [ <span class="number">6</span> , <span class="number">7</span> , <span class="number">8</span> ]</span><br><span class="line"> <span class="comment">// 在數組任意位置增加元素</span></span><br><span class="line"><span class="keyword">let</span> newArr1 = [ <span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> , ...arr] <span class="comment">// [1, 2, 3, 4, 5] </span></span><br><span class="line"><span class="keyword">let</span> newArr2 = [...arr, <span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> ] <span class="comment">// [4, 5, 1, 2, 3] </span></span><br><span class="line"><span class="keyword">let</span> newArr3 = [ <span class="number">1</span> , ...arr, <span class="number">2</span> , <span class="number">3</span> ] <span class="comment">// [1, 4, 5, 2, 3] </span></span><br><span class="line"><span class="keyword">let</span> newArr4 = [ <span class="number">1</span> , <span class="number">2</span> , ...arr,<span class="number">3</span> ] <span class="comment">// [1, 2, 4, 5, 3] </span></span><br><span class="line"><span class="comment">// 連接兩個數組</span></span><br><span class="line"><span class="keyword">let</span> newArr5 = [...arr, ...arr2] <span class="comment">// [4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure><p>如果是對<code>原有</code>的數組進行操作，<br>原有API+在函數調用中使用展開語法比較方便</p><p>但通常都不建議修改原數組</p><h3 id="實現對數組的淺拷貝-Array"><a href="#實現對數組的淺拷貝-Array" class="headerlink" title="實現對數組的淺拷貝 Array"></a>實現對數組的淺拷貝 Array</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; a : <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">let</span> arr = [ <span class="number">2</span> , <span class="number">1</span> , <span class="string">&#x27;的&#x27;</span> , obj]</span><br><span class="line"> <span class="comment">// 在數組任意位置增加元素</span></span><br><span class="line"><span class="keyword">let</span> newArr = [...arr] <span class="comment">// [2, 1, &#x27;的&#x27;, &#123;a: 1&#125;] </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但僅僅是淺拷貝，新數組中的&#123;a:1&#125;與obj還是指向了相同的地址</span></span><br><span class="line">newArr[ <span class="number">3</span> ]. a = <span class="number">2</span> </span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span> (obj) <span class="comment">// &#123;a: 2&#125;</span></span><br></pre></td></tr></table></figure><h2 id="在構造字面量對象時使用"><a href="#在構造字面量對象時使用" class="headerlink" title="在構造字面量對象時使用"></a>在構造字面量對象時使用</h2><h3 id="實現對象的淺拷貝-Object"><a href="#實現對象的淺拷貝-Object" class="headerlink" title="實現對象的淺拷貝 Object"></a>實現對象的淺拷貝 Object</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 遍歷let newObj = &#123;&#125;</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; a : <span class="string">&#x27;10&#x27;</span> , b : &#123; c : <span class="number">10</span> &#125;, d : [ <span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> ]&#125; </span><br><span class="line"> <span class="keyword">for</span> ( <span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123; </span><br><span class="line">  newObj[key] = obj[key] </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 2.使用assign let newObj1 = Object . assign (&#123;&#125;, obj)</span></span><br><span class="line"></span><br><span class="line"> <span class="variable language_">console</span>.<span class="property">log</span> (newObj) <span class="comment">//&#123;a: &#x27;10&#x27;, b: &#123;…&#125;, d: Array(3)&#125;</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="property">log</span> (newObj1)</span><br></pre></td></tr></table></figure><blockquote><p>使用展開語法實現</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newObj2 = &#123;...obj&#125; <span class="comment">//&#123;a: &#x27;10&#x27;, b: &#123;…&#125;, d: Array(3)&#125;</span></span><br></pre></td></tr></table></figure><h2 id="常見用途-—-將可迭代-literable-的物件轉為陣列"><a href="#常見用途-—-將可迭代-literable-的物件轉為陣列" class="headerlink" title="常見用途  — 將可迭代 (literable) 的物件轉為陣列"></a>常見用途  — 將可迭代 (literable) 的物件轉為陣列</h2><p>Javascript 中可迭代的物件有 String, Array, TypedArray, Map, Set 物件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;emma&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> spreadName = [...name];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(spreadName)  <span class="comment">// [&#x27;e&#x27;,&#x27;m&#x27;,&#x27;m&#x27;,&#x27;a&#x27;]</span></span><br></pre></td></tr></table></figure><hr><h2 id="其餘運算子-Rest-operator"><a href="#其餘運算子-Rest-operator" class="headerlink" title="其餘運算子(Rest operator)"></a>其餘運算子(Rest operator)</h2><blockquote><p>其餘參數之所以被創造就是要用來取代ES5的<code>arguments</code>物件</p></blockquote><p>ES6之前 要將 arguments 轉為 Array<br>很麻煩要打很多東西，例子如下，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">result</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> arg = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">result</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>在ES6之前只有arguments物件可以使用時，可能還需要透過一些手法處理後才能使用陣列的方法，但ES6之後有了其餘參數一切都變得省事許多！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">result</span>(<span class="params">...a</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> arg = a</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">result</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p><font size=9> 484清楚很多 </font></p><p><img src="https://media.tenor.com/UVmpVqlpVhQAAAAd/yess-yes.gif" alt="yes"></p><h3 id="常見用途-1-—-其餘參數-Rest-parameters"><a href="#常見用途-1-—-其餘參數-Rest-parameters" class="headerlink" title="常見用途 1 — 其餘參數 (Rest parameters)"></a>常見用途 1 — 其餘參數 (Rest parameters)</h3><p>用於想要傳入一個不確定數量的值給函式作為參數：<br><code>須注意在傳入函式時，必須是參數中的最後一位，而且參數中只能有一個其餘參數</code></p><ul><li>傳入多個參數：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">many</span>(<span class="params">x,y, ...z</span>)&#123; <span class="comment">// 指定了兩個參數和一個剩餘參數</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x:&#x27;</span>,x);    <span class="comment">// 印出 x</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y:&#x27;</span>,y);    <span class="comment">// 印出 y</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;z:&#x27;</span>,z);    <span class="comment">// 印出剩餘參數 z</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">many</span>(<span class="string">&#x27;emma&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;years&#x27;</span>, <span class="string">&#x27;old&#x27;</span>);</span><br><span class="line"><span class="comment">// x: emma</span></span><br><span class="line"><span class="comment">// y: is</span></span><br><span class="line"><span class="comment">// z: [18,&#x27;years&#x27;,&#x27;old&#x27;]  // 後面剩下的被組成一個陣列了</span></span><br></pre></td></tr></table></figure><blockquote><p>即使只有傳入一個值，也會被組成陣列：</p></blockquote><blockquote><p>如果沒有傳入值，就會成為一個空的陣列，而不是 undefined：</p></blockquote><h3 id="常見用途-2-—-解構賦值-destructuring"><a href="#常見用途-2-—-解構賦值-destructuring" class="headerlink" title="常見用途 2 — 解構賦值 (destructuring)"></a>常見用途 2 — 解構賦值 (destructuring)</h3><p>解構賦值可以想像成<code>鏡像</code>的方式來進行賦值，</p><ul><li>一般的解構陣列：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a,b] = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>其餘運算子解構陣列：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, ...b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// [2, 3]</span></span><br></pre></td></tr></table></figure><hr><ul><li>一般解構物件：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, ...b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// [2, 3]</span></span><br></pre></td></tr></table></figure><ul><li>其餘運算子解構物件 ：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a, b, ...rest&#125; = &#123; <span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>, <span class="attr">d</span>:<span class="number">4</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rest); <span class="comment">// &#123;c:3, d:4&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果和其餘參數出現一樣的狀況，數量不相等時，也會成為空的陣列：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [c, ...d] = [<span class="number">1</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d); <span class="comment">// []</span></span><br></pre></td></tr></table></figure><h2 id="總結與差異-Summary-amp-Differences"><a href="#總結與差異-Summary-amp-Differences" class="headerlink" title="總結與差異 Summary&amp;Differences"></a>總結與差異 Summary&amp;Differences</h2><p>展開運算子的概念可以想成是一種灑進去的感覺，<br>把陣列或是可迭代的物件展開成一個一個獨立的值，<br>再灑進使用他的地方。<br>而其餘運算子則是 <mark> 集合剩下來的值組合成陣列&#96;</mark>，<br>讓我們可以傳遞未知數量的參數至函式中</p><p><img src="https://media.tenor.com/2ltFTMd5OToAAAAC/i-love-you-boo.gif" alt="love"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><p><a href="https://medium.com/itsems-frontend/javascript-es6-spread-rest-operator-de8e0e020792">Javascript ES6 中的展開&#x2F;其餘運算子(Spread operator&#x2F;Rest operator)</a></p></li><li><p><a href="https://segmentfault.com/a/1190000016071130">ES6指北【5】——展開語法(spread syntax)</a></p></li><li><p><a href="https://juejin.cn/post/7106662697562800164">重學ES6-ES12(四)函數的補充展開語法</a></p></li><li><p><a href="https://medium.com/@luke_smaki/javascript-es6-spread-operator-and-rest-parameters-b3e89d112281">JavaScript ES6: Spread Operator and Rest Parameters</a></p></li><li><p><a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/rest_spread.html">展開運算符與其餘運算符</a></p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">MDN-Spread syntax (…)</a></p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters">MDN-Rest parameters</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;I don’t wanna tell you what to do, but I know it works, so I say it as plainly as I can: Just write, keep on writing.&lt;br&gt;–&amp;lt; &lt;a href=&quot;https://robert.bearblog.dev/just-write/&quot;&gt;Robert Birming&lt;/a&gt; &amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;持續學習，努力努力&lt;/p&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="https://supermarpig.github.io/tags/ES6/"/>
    
    <category term="ECMAScript 6" scheme="https://supermarpig.github.io/tags/ECMAScript-6/"/>
    
    <category term="JavaScript" scheme="https://supermarpig.github.io/tags/JavaScript/"/>
    
    <category term="每天一點點" scheme="https://supermarpig.github.io/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown 語法大補帖</title>
    <link href="https://supermarpig.github.io/2023/04/13/MarkDown-%E8%AA%9E%E6%B3%95/"/>
    <id>https://supermarpig.github.io/2023/04/13/MarkDown-%E8%AA%9E%E6%B3%95/</id>
    <published>2023-04-13T07:06:25.000Z</published>
    <updated>2023-04-13T09:13:21.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>找了很多語法教學，不如整理一篇常用的</p><span id="more"></span><p>Markdown 的目標是實現「易讀易寫」，並強調它的「可讀性」，因此 Markdown 的語法全由標點符號所組成，並經過嚴謹慎選，是為了讓它們看起來就像所要表達的意思；以下是 Markdown 大部分的語法。</p><h2 id="標題"><a href="#標題" class="headerlink" title="標題"></a>標題</h2><p>為了使段落展示的更加清晰，Markdown中設置了多級標題的表達形式，級別用#來表示，幾個#就表示幾級標題，代碼形式如下：</p><p><font color="red">注意#後要有一個空格</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 等級一標題</span><br><span class="line">## 等級二標題</span><br><span class="line">### 等級三標題</span><br><span class="line">#### 等級四標題</span><br><span class="line">##### 等級五標題</span><br><span class="line">###### 等級六標題</span><br></pre></td></tr></table></figure><blockquote><p>展示畫面 ↓</p></blockquote><h1 id="等級一標題"><a href="#等級一標題" class="headerlink" title="等級一標題"></a>等級一標題</h1><h2 id="等級二標題"><a href="#等級二標題" class="headerlink" title="等級二標題"></a>等級二標題</h2><h3 id="等級三標題"><a href="#等級三標題" class="headerlink" title="等級三標題"></a>等級三標題</h3><h4 id="等級四標題"><a href="#等級四標題" class="headerlink" title="等級四標題"></a>等級四標題</h4><h5 id="等級五標題"><a href="#等級五標題" class="headerlink" title="等級五標題"></a>等級五標題</h5><h6 id="等級六標題"><a href="#等級六標題" class="headerlink" title="等級六標題"></a>等級六標題</h6><hr><h2 id="常用字體"><a href="#常用字體" class="headerlink" title="常用字體"></a>常用字體</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">*斜體字*</span><br><span class="line">**粗體字**</span><br><span class="line">***斜體兼粗體***</span><br><span class="line">~~刪除線~~</span><br><span class="line">_斜體2_</span><br><span class="line">__斜粗2__</span><br><span class="line">正常 ^上標^</span><br><span class="line">正常~下標~</span><br><span class="line">++底線++</span><br><span class="line">==螢光標記==</span><br></pre></td></tr></table></figure><blockquote><p>展示畫面 ↓</p></blockquote><p><em>斜體字</em><br><em>斜體2</em><br><strong>粗體字</strong><br><em><strong>斜體兼粗體</strong></em><br><strong>斜粗2</strong><br><del>刪除線</del><br>正常^上標^<br>正常<del>下標</del><br>++底線++<br>&#x3D;&#x3D;螢光標記&#x3D;&#x3D;  </p><hr><h2 id="文字顏色"><a href="#文字顏色" class="headerlink" title="文字顏色"></a>文字顏色</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;font color=#<span class="title class_">FF0000</span>&gt;紅色&lt;/font&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;green&quot;</span>&gt;</span>綠色<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span>  </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#0000FF</span>&gt;</span>深藍色<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>展示畫面 ↓</p></blockquote><p><font color=#FF0000>紅色</font><br><font color="green">綠色</font><br><font color=#0000FF>深藍色</font>  </p><p>或是在color&#x3D;<code>換成你想要的顏色</code></p><hr><h2 id="文字大小"><a href="#文字大小" class="headerlink" title="文字大小"></a>文字大小</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;font size=<span class="number">1</span>&gt;<span class="number">1</span>號字&lt;/font&gt;  </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">3</span>&gt;</span>3號字<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span>  </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">5</span>&gt;</span>5號字<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span>  </span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>展示畫面 ↓</p></blockquote><p><font size=1>1號字</font><br><font size=3>3號字</font><br><font size=5>5號字</font>  </p><hr><h2 id="文字格式"><a href="#文字格式" class="headerlink" title="文字格式"></a>文字格式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;font face=<span class="string">&quot;黑體&quot;</span>&gt;黑體&lt;/font&gt;  </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;標楷體&quot;</span>&gt;</span>標楷體<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span>  </span><br></pre></td></tr></table></figure><blockquote><p>展示畫面 ↓</p></blockquote><p><font face="黑體">黑體</font><br><font face="標楷體">標楷體</font>  </p><hr><h2 id="組合使用"><a href="#組合使用" class="headerlink" title="組合使用"></a>組合使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;font color=<span class="string">&quot;green&quot;</span> face=<span class="string">&quot;標楷體&quot;</span> size=<span class="number">5</span>&gt;綠色五號大小的標楷體&lt;/font&gt;  </span><br></pre></td></tr></table></figure><blockquote><p>展示畫面 ↓</p></blockquote><p><font color="green" face="標楷體" size=5>綠色五號大小的標楷體</font>  </p><p>到這還可以嗎?!</p><p><img src="https://media.tenor.com/LY_NJgzmL9MAAAAC/annoyed-so.gif" alt="暈倒"></p><hr><h2 id="文字螢光筆重點效果"><a href="#文字螢光筆重點效果" class="headerlink" title="文字螢光筆重點效果"></a>文字螢光筆重點效果</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mark&gt;文字螢光筆重點效果&lt;/mark&gt;</span><br></pre></td></tr></table></figure><blockquote><p>展示畫面 ↓</p></blockquote><p><mark>文字螢光筆重點效果</mark></p><hr><h2 id="添加背景色"><a href="#添加背景色" class="headerlink" title="添加背景色"></a>添加背景色</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span>給我黃色背景<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span>&lt;/table&gt;</span><br></pre></td></tr></table></figure><blockquote><p>展示畫面 ↓</p></blockquote><table><tr><td bgcolor="yellow">給我黃色背景</td></tr></table><hr><h2 id="文本注音"><a href="#文本注音" class="headerlink" title="文本注音"></a>文本注音</h2><blockquote><p>當遇到不會念的字可以添加注音</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ruby&gt;魑魅魍魎&lt;rt&gt;ㄔ ㄇㄟˋ ㄨㄤˇ ㄌ一ㄤˇ&lt;<span class="regexp">/rt&gt;&lt;/</span>ruby&gt;</span><br></pre></td></tr></table></figure><blockquote><p>展示畫面 ↓</p></blockquote><p><ruby>魑魅魍魎<rt>ㄔ ㄇㄟˋ ㄨㄤˇ ㄌ一ㄤˇ</rt></ruby></p><hr><h2 id="底線"><a href="#底線" class="headerlink" title="底線"></a>底線</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;底線&lt;/u&gt;</span><br></pre></td></tr></table></figure><blockquote><p>展示畫面 ↓</p></blockquote><p><u>底線</u></p><hr><h2 id="分隔線"><a href="#分隔線" class="headerlink" title="分隔線"></a>分隔線</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line">---</span><br><span class="line"><span class="number">2.</span></span><br><span class="line">***</span><br><span class="line"><span class="number">3.</span></span><br><span class="line">- - -</span><br><span class="line"><span class="number">4.</span></span><br><span class="line">* * *</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>展示畫面 ↓</p></blockquote><ol><li></li></ol><hr><ol start="2"><li></li></ol><hr><ol start="3"><li></li></ol><hr><ol start="4"><li></li></ol><hr><blockquote><p>都是長的一樣 ，所以選順手的就可以了</p></blockquote><hr><h2 id="縮排-換行"><a href="#縮排-換行" class="headerlink" title="縮排+換行"></a>縮排+換行</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[tab]縮排 <span class="comment">//縮排</span></span><br><span class="line"></span><br><span class="line">今天  </span><br><span class="line">天氣  </span><br><span class="line">真好    <span class="comment">//換行→行末按兩個空格  産生斷行</span></span><br></pre></td></tr></table></figure><blockquote><p>展示畫面 ↓</p></blockquote><pre><code>縮排</code></pre><p>今天<br>天氣<br>真好</p><hr><h2 id="巢狀標號"><a href="#巢狀標號" class="headerlink" title="巢狀標號"></a>巢狀標號</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- 無序清單</span><br><span class="line">- 無序清單</span><br><span class="line">    - 無序清單子清單</span><br><span class="line">        - 無序清單子子清單</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 有序清單</span><br><span class="line"><span class="number">2.</span> 有序清單</span><br><span class="line">    <span class="number">1.</span> 有序清單子清單</span><br><span class="line">        <span class="number">1.</span> 有序清單子子清單</span><br></pre></td></tr></table></figure><blockquote><p>展示如下↓</p></blockquote><ul><li>無序清單</li><li>無序清單<ul><li>無序清單子清單<ul><li>無序清單子子清單</li></ul></li></ul></li></ul><ol><li>有序清單</li><li>有序清單<ol><li>有序清單子清單<ol><li>有序清單子子清單</li></ol></li></ol></li></ol><hr><h2 id="區塊引用"><a href="#區塊引用" class="headerlink" title="區塊引用"></a>區塊引用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; 外層區塊</span><br><span class="line">&gt;&gt; 第<span class="number">1</span>層區塊</span><br><span class="line">&gt;&gt;&gt; 第<span class="number">2</span>層區塊</span><br><span class="line">&gt;&gt;&gt;&gt; 第<span class="number">3</span>層</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; 第<span class="number">4</span>層</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt; 第<span class="number">5</span>層</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; <span class="number">6</span></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <span class="number">7</span></span><br></pre></td></tr></table></figure><blockquote><p>展示如下↓</p></blockquote><blockquote><p>外層區塊</p><blockquote><p>第1層區塊</p><blockquote><p>第2層區塊</p><blockquote><p>第3層</p><blockquote><p>第4層</p><blockquote><p>第5層</p><blockquote><p>6</p><blockquote><p>7</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><hr><h2 id="文字超連結"><a href="#文字超連結" class="headerlink" title="文字超連結"></a>文字超連結</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[連結名稱](<span class="attr">https</span>:<span class="comment">//google.com &quot;游標顯示&quot;)</span></span><br><span class="line">[奇摩首頁](<span class="attr">https</span>:<span class="comment">//tw.yahoo.com/)</span></span><br><span class="line">[<span class="title class_">Google</span>首頁](<span class="attr">https</span>:<span class="comment">//www.google.com/)</span></span><br><span class="line">[<span class="title class_">Facebook</span>](<span class="attr">https</span>:<span class="comment">//www.facebook.com/)</span></span><br></pre></td></tr></table></figure><blockquote><p>展示如下↓</p></blockquote><p><a href="https://tw.yahoo.com/">奇摩首頁</a><br><a href="https://www.google.com/">Google首頁</a><br><a href="https://www.facebook.com/">Facebook</a>  </p><hr><h2 id="圖片"><a href="#圖片" class="headerlink" title="圖片"></a>圖片</h2><blockquote><p>圖片跟連結很像，只是前面增加一個<code>!</code><br>我最常用來放GIF圖</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![圖片名稱](網址 <span class="string">&quot;游標顯示&quot;</span>)</span><br><span class="line">![貓咪抱抱](<span class="attr">https</span>:<span class="comment">//media.tenor.com/wSJZSQqIHhUAAAAC/love-cats-cat.gif &quot;變態&quot;)</span></span><br></pre></td></tr></table></figure><blockquote><p>展示如下↓</p></blockquote><p><img src="https://media.tenor.com/wSJZSQqIHhUAAAAC/love-cats-cat.gif" alt="貓咪抱抱" title="變態"></p><hr><h2 id="圖片連結"><a href="#圖片連結" class="headerlink" title="圖片連結"></a>圖片連結</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[![圖片](圖片網址)](連結網址)</span><br><span class="line">[![谷哥](https://www.google.com/images/branding/googlelogo/1x/googlelogo_light_color_272x92dp.png)](https://www.google.com/)</span><br></pre></td></tr></table></figure><blockquote><p>展示如下↓</p></blockquote><p><a href="https://www.google.com/"><img src="https://www.google.com/images/branding/googlelogo/1x/googlelogo_light_color_272x92dp.png" alt="谷哥"></a></p><hr><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><blockquote><p>MD中添加表格的方式比較單一，添加表格的時候可以控製文字的對齊方式：<br><code>-:</code>設置內容和標題欄居右對齊。<br><code>:-</code>設置內容和標題欄居左對齊。<br><code>:-:</code>設置內容和標題欄居中對齊。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 欄位<span class="number">1</span> | 欄位<span class="number">2</span> | 欄位<span class="number">3</span> |</span><br><span class="line">| :-- | --: |:--:|</span><br><span class="line">| 置左  | 置右 | 置中 |</span><br><span class="line">| 置左  | 置右 | 置中 |</span><br><span class="line">| 置左  | 置右 | 置中 |</span><br></pre></td></tr></table></figure><blockquote><p>展示如下↓</p></blockquote><table><thead><tr><th align="left">欄位1</th><th align="right">欄位2</th><th align="center">欄位3</th></tr></thead><tbody><tr><td align="left">置左</td><td align="right">置右</td><td align="center">置中</td></tr><tr><td align="left">置左</td><td align="right">置右</td><td align="center">置中</td></tr><tr><td align="left">置左</td><td align="right">置右</td><td align="center">置中</td></tr></tbody></table><hr><h2 id="CheckBox"><a href="#CheckBox" class="headerlink" title="CheckBox"></a>CheckBox</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- [ ] uncheck</span><br><span class="line">- [x] check</span><br><span class="line">- [ ] uncheck</span><br><span class="line">- [x] check</span><br></pre></td></tr></table></figure><blockquote><p>展示如下↓</p></blockquote><ul><li><input disabled="" type="checkbox"> uncheck</li><li><input checked="" disabled="" type="checkbox"> check</li><li><input disabled="" type="checkbox"> uncheck</li><li><input checked="" disabled="" type="checkbox"> check</li></ul><hr><h2 id="數學公式"><a href="#數學公式" class="headerlink" title="數學公式"></a>數學公式</h2><blockquote><p>對於數學相關學者來說，通常需要編寫數學公式，在Markdown可以使用$$來作為公式塊，在其中進行Latex類型公式的輸入。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$y=x^<span class="number">2</span>+<span class="number">1</span>$</span><br><span class="line">$$y=x^<span class="number">2</span>+<span class="number">1</span>$$</span><br><span class="line"></span><br><span class="line">$$ y = \sum_&#123;i=n&#125;&#123;x_i&#125; $$</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\left[</span><br><span class="line">\begin&#123;matrix&#125;</span><br><span class="line">   <span class="number">1</span> &amp; <span class="number">2</span> &amp; <span class="number">3</span> \\\\</span><br><span class="line">   <span class="number">4</span> &amp; <span class="number">5</span> &amp; <span class="number">6</span> \\\\</span><br><span class="line">   <span class="number">7</span> &amp; <span class="number">8</span> &amp; <span class="number">9</span></span><br><span class="line">\end&#123;matrix&#125;</span><br><span class="line">\right] </span><br><span class="line">\tag&#123;n&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><blockquote><p>展示如下↓</p></blockquote><p>$y&#x3D;x^2+1$<br>$$y&#x3D;x^2+1$$</p><p>$$ y &#x3D; \sum_{i&#x3D;n}{x_i} $$</p><p>$$<br>\left[<br>\begin{matrix}<br>   1 &amp; 2 &amp; 3 \\<br>   4 &amp; 5 &amp; 6 \\<br>   7 &amp; 8 &amp; 9<br>\end{matrix}<br>\right]<br>\tag{n}<br>$$</p><hr><h2 id="註解"><a href="#註解" class="headerlink" title="註解"></a>註解</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">所有的腳註會自動放到整篇文章的末尾</span><br><span class="line"></span><br><span class="line">子曰：靠！點腳註能跳轉[^<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">[^<span class="number">1</span>]: 《論語》</span><br></pre></td></tr></table></figure><blockquote><p>展示如下↓</p></blockquote><p>所有的腳註會自動放到整篇文章的末尾</p><p>子曰：靠！點腳註能跳轉<a href="%E3%80%8A%E8%AB%96%E8%AA%9E%E3%80%8B">^1</a></p><hr><blockquote><p>其實還有很多東西可以放上來<br>但是小的我 能力不佳 還在研究學習中</p></blockquote><p><img src="https://media.tenor.com/ZFc20z8DItkAAAAd/facepalm-really.gif" alt="懊惱"></p><p><font size=8>以上 祝大家寫得順利 : )</font></p><hr><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><p><a href="https://ed521.github.io/2019/08/hexo-markdown/">[教學] 撰寫 Hexo 文章 - Markdown 語法大全</a></p></li><li><p><a href="https://blog.csdn.net/qq_35164554/article/details/120013432">Markdown骚操作</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;找了很多語法教學，不如整理一篇常用的&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="https://supermarpig.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="https://supermarpig.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="MarkDown" scheme="https://supermarpig.github.io/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>CSS 動畫 ：transition</title>
    <link href="https://supermarpig.github.io/2023/04/13/CSS%20%E5%8B%95%E7%95%AB%20%EF%BC%9Atransition/"/>
    <id>https://supermarpig.github.io/2023/04/13/CSS%20%E5%8B%95%E7%95%AB%20%EF%BC%9Atransition/</id>
    <published>2023-04-13T02:51:44.000Z</published>
    <updated>2023-04-13T07:11:10.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>日常開發遇到不會 就筆記</p></blockquote><span id="more"></span><h2 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h2><p><code>transition:all</code>是CSS 中的一個屬性，它控制元素在用戶交互或者更改樣式時發生動畫效果的速度。</p><p>它是 transition 屬性的簡寫，代表所有的可以過渡的CSS 屬性。</p><p>語法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">transition</span>: &lt;property&gt; &lt;duration&gt; &lt;timing-function&gt; &lt;delay&gt;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>property</code>是要過渡的CSS 屬性的名稱，如果使用all，則表示所有的可以過渡的屬性。</li><li><code>duration</code>是過渡效果的持續時間，以秒或毫秒為單位。</li><li><code>timing-function</code>是過渡效果的速度曲線，可以是<ul><li><code>linear（勻速）</code></li><li><code>ease（慢快慢）</code></li><li><code>ease-in（慢開始）</code></li><li><code>ease-out（慢結束）</code></li><li><code>ease-in-out（慢開始慢結束）</code></li></ul></li><li><code>delay</code>是過渡效果的延遲時間，以秒或毫秒為單位</li></ul><p>舉個例子</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">2s</span> ease-in-out <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>這意味著當對這個元素的樣式進行更改時，<br>所有的可以過渡的屬性將以2秒的時間、<br>慢開始慢結束的速度曲線、<br>0.5秒的延遲時間進行過渡</p></blockquote><p> 整理表格如下</p><table><thead><tr><th>名稱</th><th>說明</th></tr></thead><tbody><tr><td>property name</td><td>指定的屬性名稱</td></tr><tr><td>duration</td><td>轉場動畫持續的時間</td></tr><tr><td>timimg function</td><td>描述轉場時間的變化函式</td></tr><tr><td>delay</td><td>延遲執行轉場動畫的時間</td></tr></tbody></table><h2 id="transition-propert-屬姓名稱"><a href="#transition-propert-屬姓名稱" class="headerlink" title="transition-propert 屬姓名稱"></a>transition-propert 屬姓名稱</h2><p>定義哪些 CSS 屬性名稱要綁定 Transition 動畫。<br>transition-propert 有三種內建屬性：</p><ul><li>none : 無設定屬性，該值為預設值。</li><li>all : 綁定所有 CSS 屬性。</li><li>custom-ident : 依據 CSS 的 class 名稱指定屬性。</li></ul><p>而要是 <code>transition-propert</code> 的值長度與其他 <code>transition 屬性質</code>長度不符合時，多餘的值將會被自動忽略。</p><p>再舉個例子</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">transition-property</span>: opacity, left, top, width;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">2s</span>, <span class="number">4s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上面範例得知，property 屬性的值長度超過 duration 屬型的值長度時 duration 屬性會重複匹配 property屬性。<br>因此 top 的過場時間為 2s，width 的過場時間為 4s。</p><blockquote><p>要注意的一點是，transition 所綁定的 CSS 屬性必須是 可被計算之屬性。<br>舉例來說</p></blockquote><ul><li><p>可被計算屬性：</p><ul><li>width: 100px;</li><li>backgraound-color: #fff;</li><li>text-indent: 30px;</li><li>margin-left: -50%;</li></ul></li><li><p>不可被計算屬性：</p><ul><li>display: block;</li><li>test-aling: center;</li><li>vertical-align: middle;</li></ul></li></ul><p> <strong>484很簡單啊~~~</strong><br><img src="https://media.tenor.com/Is7pMDGXQrkAAAAd/ogvhs-nope.gif" alt="就是這樣"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><p><a href="https://ithelp.ithome.com.tw/articles/10240496">第四章、今晚，我想來點…雙重口感切換的 Transition</a></p></li><li><p><a href="https://dwatow.github.io/2018/01-01-iron-man-2018/iron-man-2018-day22/">前端新手村 Transition</a></p></li></ul><p>-<a href="https://medium.com/@lai0706/css3-%E5%8B%95%E7%95%AB-transitions-d0f41a4ea68b">講講 CSS3 動畫Transitions</a></p><p>-<a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/transition">MDN - transitions</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;日常開發遇到不會 就筆記&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="日常問題紀錄" scheme="https://supermarpig.github.io/tags/%E6%97%A5%E5%B8%B8%E5%95%8F%E9%A1%8C%E7%B4%80%E9%8C%84/"/>
    
    <category term="CSS" scheme="https://supermarpig.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>每天一點點，學習ES6(三) Tagged templates</title>
    <link href="https://supermarpig.github.io/2023/04/13/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E4%B8%89-Tagged-templates/"/>
    <id>https://supermarpig.github.io/2023/04/13/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E4%B8%89-Tagged-templates/</id>
    <published>2023-04-13T00:59:28.000Z</published>
    <updated>2023-04-13T06:53:51.310Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天來學習 <code>Tagged templates</code></p><span id="more"></span><p>在找資料的時候發現有兩種 templates</p><ul><li>Tagged templates</li><li>Tagged template literal</li></ul><blockquote><p>This unusual backtick syntax is a new JavaScript feature called a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates">tagged template literal</a>.</p></blockquote><h2 id="Template-Strings"><a href="#Template-Strings" class="headerlink" title="Template Strings"></a>Template Strings</h2><p>在ES6以前 ，組合字串上需要用冗長的加號不斷的拼湊。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name =<span class="string">&#x27;Cody&#x27;</span></span><br><span class="line"><span class="keyword">var</span> age  =<span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6以前</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hi 我是&quot;</span>+name +<span class="string">&quot;,今年&quot;</span>+age+<span class="string">&quot;歲&quot;</span>)  <span class="comment">//Hi 我是 Cody,今年18歲 </span></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi 我是<span class="subst">$&#123;name&#125;</span> ,今年<span class="subst">$&#123;age&#125;</span>歲`</span>)  <span class="comment">//Hi 我是 Cody,今年18歲 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>甚至 template strings 也可以利用 multi-line 的效果進而達到換行的效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES6以前</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hi 我是&quot;</span>+name +<span class="string">&quot;,\n今年&quot;</span>+age+<span class="string">&quot;歲&quot;</span>)  </span><br><span class="line"><span class="comment">//Hi 我是 Cody,</span></span><br><span class="line"><span class="comment">//今年18歲 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi 我是<span class="subst">$&#123;name&#125;</span> ,</span></span><br><span class="line"><span class="string">今年<span class="subst">$&#123;age&#125;</span>歲`</span>)</span><br><span class="line"><span class="comment">//Hi 我是 Cody,</span></span><br><span class="line"><span class="comment">//今年18歲 </span></span><br></pre></td></tr></table></figure><p>這樣清楚了嗎~<br><img src="https://media.tenor.com/BmCbsCskdA4AAAAM/omg-oh-my-god.gif" alt="茅塞頓開"></p><h2 id="Tagged-Template-Literal"><a href="#Tagged-Template-Literal" class="headerlink" title="Tagged Template Literal"></a>Tagged Template Literal</h2><p>簡單來說 就是另一種函数调用的一种特殊形式</p><p>直接舉個例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a, b, c,</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//這是一般函數的調用</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>) <span class="comment">//Hello World undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Tagged Template Literal</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;why&quot;</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span></span><br><span class="line"><span class="comment">// [&#x27;Hello&#x27;, &#x27;Wo&#x27;, &#x27;rld&#x27;]</span></span><br><span class="line">foo<span class="string">`Hello<span class="subst">$&#123;name&#125;</span>Wo<span class="subst">$&#123;age&#125;</span>rld`</span><span class="comment">//(3)[&#x27;Hello&#x27;,&#x27;Wo&#x27;,&#x27;rld&#x27;,row:Array(3)] &#x27;Cody&#x27; 18</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>這樣的寫法 不太好理解<br>可以改成ES6 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Functions/rest_parameters">rest_parameters</a>的寫法<br>把變數都變成陣列，所以要使用變數時要記得解構出來，整體寫法範例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a, ...b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">&#125;</span><br><span class="line">foo<span class="string">`Hello<span class="subst">$&#123;name&#125;</span>Wo<span class="subst">$&#123;age&#125;</span>rld`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(3)[&#x27;Hello&#x27;,&#x27;Wo&#x27;,&#x27;rld&#x27;,row:Array(3)]</span></span><br><span class="line"><span class="comment">//(2) [&#x27;Cody&#x27;, 18]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>講那麼多 ，來點實際的案例會比較清楚</p><p><img src="https://media.tenor.com/BP70qe8X0J8AAAAC/crycat-crying-cat.gif" alt="OK"></p><h2 id="實際案例"><a href="#實際案例" class="headerlink" title="實際案例"></a>實際案例</h2><p>一開始並不會覺得厲害之處，平時工作中也不會用到，但是這些知識是有用的，在很多場景中會用到它。</p><h3 id="react的styled-components"><a href="#react的styled-components" class="headerlink" title="react的styled-components"></a>react的styled-components</h3><p>可以直接生成組件，動態生成樣式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Button</span> = styled.<span class="property">button</span><span class="string">`</span></span><br><span class="line"><span class="string">  background: <span class="subst">$&#123;props =&gt; props.primary ? <span class="string">&#x27;palevioletred&#x27;</span> : <span class="string">&#x27;white&#x27;</span>&#125;</span>;</span></span><br><span class="line"><span class="string">  color: <span class="subst">$&#123;props =&gt; props.primary ? <span class="string">&#x27;white&#x27;</span> : <span class="string">&#x27;palevioletred&#x27;</span>&#125;</span>;</span></span><br><span class="line"><span class="string">  font-size: 1em;</span></span><br><span class="line"><span class="string">  margin: 1em;</span></span><br><span class="line"><span class="string">  padding: 0.25em 1em;</span></span><br><span class="line"><span class="string">  border: 2px solid palevioletred;</span></span><br><span class="line"><span class="string">  border-radius: 3px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多語言轉化-國際化處理"><a href="#多語言轉化-國際化處理" class="headerlink" title="多語言轉化(國際化處理)"></a>多語言轉化(國際化處理)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i18n<span class="string">`Welcome to <span class="subst">$&#123;siteName&#125;</span>, you are visitor number <span class="subst">$&#123;visitorNumber&#125;</span>!`</span></span><br><span class="line"><span class="comment">// &quot;歡迎訪問XXX，您是第XXXX位訪問者！&quot;</span></span><br></pre></td></tr></table></figure><h3 id="動態處理函數裡面內容的轉換"><a href="#動態處理函數裡面內容的轉換" class="headerlink" title="動態處理函數裡面內容的轉換"></a>動態處理函數裡面內容的轉換</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;鄭鐵&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sex&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;role&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;time&quot;</span>: <span class="number">1640678098887</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> invite = <span class="keyword">function</span> (<span class="params">arrs, nameExp, sexExp, roleExp, timeExp</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> strName = nameExp;</span><br><span class="line">    <span class="comment">// 性別處理</span></span><br><span class="line">    <span class="keyword">let</span> strSex = [<span class="string">&#x27;先生&#x27;</span>, <span class="string">&#x27;女士&#x27;</span>][sexExp];</span><br><span class="line">    <span class="comment">// 角色處理</span></span><br><span class="line">    <span class="keyword">const</span> role = &#123;</span><br><span class="line">        <span class="string">&quot;1&quot;</span>: <span class="string">&quot;選手&quot;</span>,</span><br><span class="line">        <span class="string">&quot;2&quot;</span>: <span class="string">&quot;裁判&quot;</span>,</span><br><span class="line">        <span class="string">&quot;3&quot;</span>: <span class="string">&quot;計分員&quot;</span>,</span><br><span class="line">        <span class="string">&quot;4&quot;</span>: <span class="string">&quot;攝影師&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> strRole = role[roleExp];</span><br><span class="line">    <span class="comment">// 日期處理</span></span><br><span class="line">    <span class="keyword">let</span> strTime = <span class="keyword">new</span> <span class="title class_">Date</span>(timeExp).<span class="title function_">toLocaleDateString</span>(<span class="literal">undefined</span>, &#123;</span><br><span class="line">        <span class="attr">year</span>: <span class="string">&#x27;numeric&#x27;</span>,</span><br><span class="line">        <span class="attr">month</span>: <span class="string">&#x27;long&#x27;</span>,</span><br><span class="line">        <span class="attr">day</span>: <span class="string">&#x27;numeric&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 輸出內容</span></span><br><span class="line">    <span class="keyword">let</span> output = [arrs[<span class="number">0</span>]];</span><br><span class="line"></span><br><span class="line">    [strName, strSex, strRole, strTime].<span class="title function_">forEach</span>(<span class="function">(<span class="params">str, index</span>) =&gt;</span> &#123;</span><br><span class="line">        output.<span class="title function_">push</span>(str, arrs[index + <span class="number">1</span>] || <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> content = invite<span class="string">`誠摯邀請<span class="subst">$&#123;data.name&#125;</span><span class="subst">$&#123;data.sex&#125;</span>作為<span class="subst">$&#123;data.role&#125;</span>於<span class="subst">$&#123;data.time&#125;</span>参加上海張江杯垂釣競技大賽。</span></span><br><span class="line"><span class="string">主辦方：上海市浦東釣魚協會`</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(content);</span><br></pre></td></tr></table></figure><blockquote><p>誠摯邀請鄧鐵先生作為選手於2021年12月28日參加上海張江杯垂釣競技大賽。<br>主辦方：上海市浦東釣魚協會</p></blockquote><p>以上都清楚了嗎</p><p>不清楚沒關係</p><p>我是很清楚了拉~</p><p><img src="https://media.tenor.com/SN8okO86hicAAAAM/angry-mad.gif" alt="生氣"></p><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><p><a href="https://www.zhangxinxu.com/wordpress/2021/12/js-tagged-templates/">JS 标签模板（Tagged templates）什么时候使用？</a></p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates">MDN-Template literals (Template strings)</a></p></li><li><p><a href="https://www.zhangxinxu.com/wordpress/2021/12/js-tagged-templates/">JS 标签模板（Tagged templates）什么时候使用？</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天來學習 &lt;code&gt;Tagged templates&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="https://supermarpig.github.io/tags/ES6/"/>
    
    <category term="ECMAScript 6" scheme="https://supermarpig.github.io/tags/ECMAScript-6/"/>
    
    <category term="JavaScript" scheme="https://supermarpig.github.io/tags/JavaScript/"/>
    
    <category term="每天一點點" scheme="https://supermarpig.github.io/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E/"/>
    
  </entry>
  
  <entry>
    <title>每天一點點，學習ES6(二) Var Let Const</title>
    <link href="https://supermarpig.github.io/2023/04/12/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E4%BA%8C-Var-Let-Const/"/>
    <id>https://supermarpig.github.io/2023/04/12/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E4%BA%8C-Var-Let-Const/</id>
    <published>2023-04-12T01:12:06.000Z</published>
    <updated>2023-04-12T02:28:25.942Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>今天看到很多面試題在問這三個的區別，所以來整理一下筆記</p></blockquote><span id="more"></span><h2 id="先來介紹var"><a href="#先來介紹var" class="headerlink" title="先來介紹var"></a>先來介紹<code>var</code></h2><ul><li>在Es5中，聲明變量的方式幾乎以 <strong>var</strong> 為準，從頭到尾 Var 到底  雖然很省事但還有一些明顯的問題</li></ul><p><img src="https://i.imgur.com/TV7vGiN.png" alt="驚訝"><br>(source:)<a href="https://i.imgur.com/TV7vGiN.png">網路</a></p><h2 id="var-有什麼缺點？"><a href="#var-有什麼缺點？" class="headerlink" title="var 有什麼缺點？"></a><font color=#FF0000>var</font> 有什麼缺點？</h2><ul><li><h3 id="語法允許重複宣告-Re-Declaring"><a href="#語法允許重複宣告-Re-Declaring" class="headerlink" title="語法允許重複宣告 (Re-Declaring)"></a>語法允許重複宣告 (Re-Declaring)</h3></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);     <span class="comment">// ReferenceError: x is not defined (註)</span></span><br><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);     <span class="comment">// undefined</span></span><br><span class="line">x = <span class="number">123</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);     <span class="comment">// 123</span></span><br><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);     <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><blockquote><p>註：以上這段程式如果完整執行，第一個 <code>console.log(x)</code>; 實際上會印出 <code>undefined</code> 而不是 <code>Error</code>，因為變數宣告有 Hoisting 效果。關於 Hoisting ，預計後續的文章再作詳細介紹，<code>本篇先單純關注 var 的問題</code>。</p></blockquote><p>一段很長的程式，我們可能不記得前面宣告過同名的變數，後面再次宣告時往往當成第一次宣告，容易疏忽造成小 Bug。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;John&#x27;</span>;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>( name === <span class="literal">undefined</span> )&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The first time to execute.&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一個較好且普遍的程式編寫習慣：將需要宣告的變數集中在該作用域的一開始，並賦予初始值。</p></blockquote><hr><ul><li><h3 id="不支援區塊作用域-Block-Scope"><a href="#不支援區塊作用域-Block-Scope" class="headerlink" title="不支援區塊作用域 (Block Scope)"></a>不支援區塊作用域 (Block Scope)</h3></li></ul><p>舉個例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">var</span> name = <span class="string">&quot;Apple&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fun(): name=&quot;</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fun</span>();  <span class="comment">//fun():name=Apple</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由上面的例子看，在裡面用<code>var</code>宣告的<code>name</code> 會被外面的區域讀取到</p><h4 id="用-var-宣告的變數並不具-Block-Scope-效果"><a href="#用-var-宣告的變數並不具-Block-Scope-效果" class="headerlink" title="用 var 宣告的變數並不具 Block Scope 效果"></a>用 var 宣告的變數並不具 Block Scope 效果</h4><blockquote><p>簡單來說：<br>Block Scope 就是用大括號去定義範疇。</p></blockquote><p><img src="https://media.tenor.com/yzabDiVfgFsAAAAC/horrified-surprised.gif" alt="驚訝"></p><hr><ul><li><h3 id="不支援常數-Constant-特性"><a href="#不支援常數-Constant-特性" class="headerlink" title="不支援常數 (Constant) 特性"></a>不支援常數 (Constant) 特性</h3></li></ul><p>常數 (Constant) 指的是「固定不變的數值」。</p><p>在程式裡常需要宣告一些變數，但變數裡的值只需要作一次初始化，不需要也不希望在程式執行過程被更改，也就是我們希望這類變數具有常數性質。</p><p>例如數學 pi 為3.14 、後續不希望能更動這個數字。使用var 就不太行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pi = <span class="number">3.14</span>;</span><br><span class="line">pi = <span class="number">1234</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pi) <span class="comment">//1234 </span></span><br></pre></td></tr></table></figure><hr><h2 id="let-x2F-const-運用方式"><a href="#let-x2F-const-運用方式" class="headerlink" title="let &#x2F; const 運用方式"></a>let &#x2F; const 運用方式</h2><ul><li><p>let:</p><ul><li>從直觀的角度來說，let和var是沒有太大的區別的，都是用於聲明一個變量</li></ul></li><li><p>const:</p><ul><li>const關鍵字是constant的單詞的縮寫，表示常量、衡量的意思;</li><li>它表示保存的數據一旦被賦值，就不能被修改;</li><li>但是如果賦值的是引用類型，那麼可以通過引用找到對應的對象，修改對象的內容;</li></ul></li></ul><blockquote><p>注意:另外let、const不允許重複聲明變量;</p></blockquote><hr><h2 id="let-x2F-const作用域提升"><a href="#let-x2F-const作用域提升" class="headerlink" title="let&#x2F;const作用域提升"></a>let&#x2F;const作用域提升</h2><p>舉個例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo) <span class="comment">//foo</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">&quot;foo&quot;</span></span><br><span class="line"></span><br><span class="line">-------------------------------</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo) <span class="comment">//Uncaught ReferenceError: foo is not defined</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="string">&quot;foo&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Reference(引用)Error: Cannot access &#x27;foo&#x27; before initialization(初始化)</span></span><br><span class="line"><span class="comment">// let/const 他們沒有作用域提升</span></span><br><span class="line"><span class="comment">// foo雖然有被創建出來, 但是不能被訪問</span></span><br></pre></td></tr></table></figure><blockquote><p><code>作用域提升</code>: 能提前被訪問</p></blockquote><p>let、const沒有進行作用域提升，但是會在解析階段被創建出來。</p><h2 id="暫時性死區-TDZ"><a href="#暫時性死區-TDZ" class="headerlink" title="暫時性死區 TDZ"></a>暫時性死區 TDZ</h2><p>在ES6中，我們還有一個概念稱之為暫時性死區:</p><p>它表達的意思是在一個代碼中，使用let、const聲明的變量，在聲明之前，變量都是不可以訪問的;</p><p>我們將這種現象稱之為temporal dead zone(暫時性死區，TDZ);</p><h2 id="let-const-與window的關係"><a href="#let-const-與window的關係" class="headerlink" title="let const 與window的關係"></a>let const 與window的關係</h2><ul><li>全局通過var來聲明一個變量，事實上會在window上添加一個屬性</li></ul><blockquote><p>佔記憶體 !!能用但不優!!!</p></blockquote><ul><li>但是let、const是不會給window上添加任何屬性的。</li></ul><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p><img src="https://ithelp.ithome.com.tw/upload/images/20190923/20119924wIduk8VJxp.jpg" alt="var let const 差異"></p><p>總結 let 和 const 的重點：</p><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><ul><li>支援 Block Scope。</li><li>禁止同一層 Block 重複宣告變數。</li><li>不會產生 Global Scope 變數。</li></ul><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><ul><li>具備 let 的所有特性。</li><li>定義時必須初始化 (Initialization)。</li><li>後續不能更改值。</li></ul><hr><blockquote><p>應避免使用 var，改用 let 和 const</p></blockquote><hr><p>ES6 導入 let 和 const，改善 var 在變數宣告和管制上的不足，讓程式的變數控管可以更加嚴謹，減少出錯的機率。</p><p>對於let和const來說，是目前開發中推薦使用的</p><blockquote><ul><li>簡單整理如下<br>   <strong>變量不被更改</strong> → <code>const</code><br>   <strong>變量需要變動</strong> → <code>let</code></li></ul></blockquote><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><p><a href="https://www.w3schools.com/js/js_variables.asp">JavaScript Variables</a></p></li><li><p><a href="https://juejin.cn/post/7105918550975447076">var let const的选择</a></p></li><li><p><a href="https://blog.techbridge.cc/2018/11/10/javascript-hoisting/">TechBridge：我知道你懂 hoisting，可是你了解到多深？</a></p></li><li><p><a href="https://juejin.cn/post/7105918550975447076">每天3分鐘，重學ES6-ES12(二)var let const的選擇</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;今天看到很多面試題在問這三個的區別，所以來整理一下筆記&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="https://supermarpig.github.io/tags/ES6/"/>
    
    <category term="ECMAScript 6" scheme="https://supermarpig.github.io/tags/ECMAScript-6/"/>
    
    <category term="JavaScript" scheme="https://supermarpig.github.io/tags/JavaScript/"/>
    
    <category term="每天一點點" scheme="https://supermarpig.github.io/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E/"/>
    
  </entry>
  
  <entry>
    <title>每天一點點，學習ES6(一) Enhanced Object Literals</title>
    <link href="https://supermarpig.github.io/2023/04/11/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E4%B8%80/"/>
    <id>https://supermarpig.github.io/2023/04/11/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E4%B8%80/</id>
    <published>2023-04-11T01:09:33.000Z</published>
    <updated>2023-04-11T03:11:37.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>沒事多複習，多複習沒事</p></blockquote><span id="more"></span><h3 id="為什麼學習ES6"><a href="#為什麼學習ES6" class="headerlink" title="為什麼學習ES6"></a>為什麼學習ES6</h3><blockquote><p>ES6的語法相信大家都爛熟於心，已經在開發中日常使用</p></blockquote><p>我知道螢幕前的你肯定都會了。</p><h2 id="ES6是ECMAScript-6的縮寫簡稱，這個好理解"><a href="#ES6是ECMAScript-6的縮寫簡稱，這個好理解" class="headerlink" title="ES6是ECMAScript 6的縮寫簡稱，這個好理解"></a>ES6是ECMAScript 6的縮寫簡稱，這個好理解</h2><blockquote><p>顧名思義，它是ECMAScript的第6個版本，也就是說它有更早的版本，以後還會有更多版本。  </p></blockquote><p>ES6也可以說是一個泛指，指5.1版本以後的JavaScript的下一代標準，涵蓋了ES2015,ES2016,ES2017等；亦指下一代JavaScript語言</p><h2 id="什麼是物件實字-Object-Literals"><a href="#什麼是物件實字-Object-Literals" class="headerlink" title="什麼是物件實字 (Object Literals)"></a>什麼是物件實字 (Object Literals)</h2><p>平常我們用大括號 ({}) 來建立物件的語法，就稱為物件實字 (Object Literals)。</p><p>以下例子是典型的物件實字語法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> player = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, </span><br><span class="line">    <span class="attr">age</span>: <span class="number">23</span>,</span><br><span class="line">    <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"> &#125;,</span><br><span class="line">    <span class="attr">language1</span>: <span class="string">&quot;JavaScript&quot;</span>,</span><br><span class="line">    <span class="attr">language2</span>: <span class="string">&quot;Java&quot;</span>,</span><br><span class="line">    <span class="attr">language3</span>: <span class="string">&quot;C&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="物件實字的語法重點"><a href="#物件實字的語法重點" class="headerlink" title="物件實字的語法重點"></a>物件實字的語法重點</h3><ul><li>用大括號表示。</li><li>裡面的屬性 (Properties) 用名值對 (name-value pairs) 表示。</li><li>多個屬性以逗號 (comma) 分隔。</li><li>宣告完後，還是可以再增加 Properties 進去。</li></ul><p style="text-align:center">到這裡都很輕鬆 </p><p><img src="https://ritchie.top/images/post/markdown.gif" alt="到這都很輕鬆! 耶"></p><h2 id="1-物件屬性初始化的語法簡寫"><a href="#1-物件屬性初始化的語法簡寫" class="headerlink" title="1. 物件屬性初始化的語法簡寫"></a>1. 物件屬性初始化的語法簡寫</h2><h3 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setNameAge</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">     <span class="attr">name</span>: name,</span><br><span class="line">  <span class="attr">age</span>: age</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title function_">setNameAge</span>(<span class="string">&quot;John&quot;</span>, <span class="number">23</span>) );   <span class="comment">// &#123;name: &quot;John&quot;, age: 23&#125;</span></span><br></pre></td></tr></table></figure><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setNameAge</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">     name,</span><br><span class="line">  age</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title function_">setNameAge</span>(<span class="string">&quot;John&quot;</span>, <span class="number">23</span>) );   <span class="comment">// &#123;name: &quot;John&quot;, age: 23&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>在 ES5 以前，必須把<strong>屬性名稱</strong>和<strong>進行賦值的變數名稱</strong>都標明清楚。<br>    ES6 提供更簡單的寫法。</p></blockquote><hr><h2 id="2-物件函式的語法簡寫"><a href="#2-物件函式的語法簡寫" class="headerlink" title="2.物件函式的語法簡寫"></a>2.物件函式的語法簡寫</h2><h3 id="ES5-1"><a href="#ES5-1" class="headerlink" title="ES5"></a>ES5</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setNameAge</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">`Hi, I am <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title function_">setNameAge</span>(<span class="string">&quot;John&quot;</span>, <span class="number">23</span>).<span class="title function_">sayHi</span>() ); <span class="comment">// &quot;Hi, I am John&quot;</span></span><br></pre></td></tr></table></figure><h3 id="ES6-1"><a href="#ES6-1" class="headerlink" title="ES6"></a>ES6</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setNameAge</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">`Hi, I am <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title function_">setNameAge</span>(<span class="string">&quot;John&quot;</span>, <span class="number">23</span>).<span class="title function_">sayHi</span>() ); <span class="comment">// &quot;Hi, I am John&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>ES6 省略了<strong>function</strong> 和 <strong>:</strong></p></blockquote><h2 id="3-具運算性的屬性名稱"><a href="#3-具運算性的屬性名稱" class="headerlink" title="3. 具運算性的屬性名稱"></a>3. 具運算性的屬性名稱</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> name = <span class="string">&quot;yz&quot;</span></span><br><span class="line"> <span class="keyword">var</span> obj = &#123;</span><br><span class="line">  [name + <span class="number">123</span>]: <span class="string">&#x27;hehehehe&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123;yz123: &#x27;hehehehe&#x27;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>計算屬性名定義對象key的時候加上[]，可以動態定義對象名[]</p></blockquote><h2 id="解構-Destructuring"><a href="#解構-Destructuring" class="headerlink" title="解構 Destructuring"></a>解構 Destructuring</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><hr><ul><li><p>ES6中新增了一個從數組或對像中方便獲取數據的方法，稱之為解構Destructuring。</p></li><li><p>我們可以劃分為:數組的解構和對象的解構。</p></li></ul><hr><h3 id="數組結構"><a href="#數組結構" class="headerlink" title="數組結構"></a>數組結構</h3><hr><ul><li>數組的解構:<ul><li>基本解構過程</li><li>順序解構</li><li>解構出數組</li><li>默認值</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>]</span><br><span class="line"><span class="comment">// var item1 = names[0]</span></span><br><span class="line"><span class="comment">// var item2 = names[1]</span></span><br><span class="line"><span class="comment">// var item3 = names[2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 對數組的解構: []</span></span><br><span class="line"><span class="keyword">var</span> [item1, item2, item3] = names</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item1, item2, item3)</span><br><span class="line"><span class="comment">//  abc cba nba</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解構後面的元素</span></span><br><span class="line"><span class="keyword">var</span> [, , itemz] = names</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(itemz)</span><br><span class="line"><span class="comment">//  nba</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解構出一個元數，後面的元素放到一個新樹組中</span></span><br><span class="line"><span class="keyword">var</span> [itemX, ...newNames] = names</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(itemX, newNames)</span><br><span class="line"><span class="comment">// abc [&#x27;cba&#x27;, &#x27;nba&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构的默认值</span></span><br><span class="line"><span class="keyword">var</span> [itemA, itemB, itemC, itemD = <span class="string">&quot;aaa&quot;</span>] = names</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(itemD)</span><br><span class="line"><span class="comment">// aaa</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="對象結構"><a href="#對象結構" class="headerlink" title="對象結構"></a>對象結構</h3><hr><ul><li>對象的解構:<ul><li>基本解構過程</li><li>任意順序</li><li>重命名</li><li>默認值</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;yz&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">180</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 對象的解構: &#123;&#125;</span></span><br><span class="line"><span class="keyword">var</span> &#123; name, age, height &#125; = obj</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, age, height)</span><br><span class="line"><span class="comment">// yz 25 180</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123; age &#125; = obj</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br><span class="line"><span class="comment">// 25</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">name</span>: newName &#125; = obj</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newName)</span><br><span class="line"><span class="comment">// yz</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">address</span>: newAddress = <span class="string">&quot;台北市&quot;</span> &#125; = obj</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newAddress)</span><br><span class="line"><span class="comment">// 台北市</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">info</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">name</span>, info.<span class="property">age</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(obj)</span><br><span class="line"><span class="comment">// yz 25</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">&#123;name, age&#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bar</span>(obj)</span><br><span class="line"><span class="comment">// yz 25</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="應用場景"><a href="#應用場景" class="headerlink" title="應用場景"></a>應用場景</h2><hr><ul><li>解構目前在開發中使用是非常多的:<ul><li>比如在開發中拿到一個變量時，自動對其進行解構使用;</li><li>比如對函數的參數進行解構;</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;yz&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">24</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    <span class="comment">// es5</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>,obj.<span class="property">age</span>)</span><br><span class="line">    <span class="comment">// es6</span></span><br><span class="line">    <span class="keyword">const</span> &#123;name,age&#125; = obj</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name,age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(obj1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>ES6 提升了物件實字語法的簡潔性和靈活性，總共有 3 個部分的加強：</p><ul><li>物件屬性初始化的語法簡寫 (Shorthand for Initializing Properties)</li><li>物件函式的語法簡寫 (Shorthand for Writing Methods)</li><li>具運算性的屬性名稱 (Computed Properties and Object Literals)</li></ul><p>Enhanced Object Literal 是 ES6 中算滿簡單的新特性，唯一值得特別注意的是：透過 ES6 簡寫的物件函式，函數行為是傳統函數而非箭頭函數。</p><ul><li><p>字面量的增強方便我們寫對象屬性和方法時，少寫代碼</p></li><li><p>解構方便我們更容易的處理對像數組的屬性，少寫代碼</p></li></ul><p><img src="https://compote.slate.com/images/697b023b-64a5-49a0-8059-27b963453fb1.gif?crop=780,520,x0,y0&width=1280" alt="第一篇文章完成"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><p><a href="https://dev.to/sarah_chima/enhanced-object-literals-in-es6-a9d">Enhanced Object Literals in ES6 - DEV Community</a></p></li><li><p><a href="https://peter-chang.medium.com/es6-10-features-javascript-developer-must-know-98b9782bef44">[ES6] Javascript 開發者必須知道的 10 個新功能</a></p></li><li><p><a href="https://easonwang01.gitbooks.io/class/es6es7.html">ES6,ES7,ES8 · class - easonwang01 - GitBook</a></p></li><li><p><a href="https://juejin.cn/post/7105396296357249061">每天3分鐘，重學ES6</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;沒事多複習，多複習沒事&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="https://supermarpig.github.io/tags/ES6/"/>
    
    <category term="ECMAScript 6" scheme="https://supermarpig.github.io/tags/ECMAScript-6/"/>
    
    <category term="JavaScript" scheme="https://supermarpig.github.io/tags/JavaScript/"/>
    
    <category term="每天一點點" scheme="https://supermarpig.github.io/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇部落格文章</title>
    <link href="https://supermarpig.github.io/2023/04/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E9%83%A8%E8%90%BD%E6%A0%BC%E6%96%87%E7%AB%A0/"/>
    <id>https://supermarpig.github.io/2023/04/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E9%83%A8%E8%90%BD%E6%A0%BC%E6%96%87%E7%AB%A0/</id>
    <published>2023-04-10T05:45:37.000Z</published>
    <updated>2023-04-11T03:10:12.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>照著教學創網站 GOGO</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;照著教學創網站 GOGO&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
