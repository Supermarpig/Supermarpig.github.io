<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cody Di Da Di</title>
  
  <subtitle>搭拉拉拉搭搭搭</subtitle>
  <link href="https://supermarpig.github.io/atom.xml" rel="self"/>
  
  <link href="https://supermarpig.github.io/"/>
  <updated>2023-04-25T09:40:08.808Z</updated>
  <id>https://supermarpig.github.io/</id>
  
  <author>
    <name>Cody</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>每天一點點，學習ES6-八-Promise 實例</title>
    <link href="https://supermarpig.github.io/2023/04/25/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E5%85%AB-Promise-%E5%AF%A6%E4%BE%8B/"/>
    <id>https://supermarpig.github.io/2023/04/25/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E5%85%AB-Promise-%E5%AF%A6%E4%BE%8B/</id>
    <published>2023-04-25T01:12:15.000Z</published>
    <updated>2023-04-25T09:40:08.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天研究完原理 及 一點點低基礎 還有流程</p><p>趁著記憶猶新 來看看實際用法</p><p><img src="https://media.tenor.com/B5_d8kamVzcAAAAM/aaron-rodgers-smile.gif" alt="推眼鏡"></p><span id="more"></span><h2 id="Promise-實例"><a href="#Promise-實例" class="headerlink" title="Promise 實例"></a>Promise 實例</h2><p>Promise的 <strong><code>then</code></strong> 、**<code>catch</code><strong>、</strong><code>finally</code>** 方法，</p><p>都屬於<code>Promise</code>的實例方法，都是存放在 <strong><code>Promise</code></strong> 的 <strong><code>prototype</code></strong> 上的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(<span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>))</span><br></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7aff503ab0fa41d3a7c0f21280c817ee~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" alt="promise實例方法"></p><p>以上是<code>F12</code> 看到的實例方法</p><h3 id="then"><a href="#then" class="headerlink" title="then()"></a>then()</h3><p><code>then</code>是實例狀態發生改變時的<code>回調函數</code>，</p><ul><li>第一個參數是<code>resolved狀態</code>的回調函數</li><li>第二個參數是<code>rejected狀態</code>的回調函數</li></ul><blockquote><p><code>then</code>方法返回的是一個 <code>新的</code>Promise實例，也就是<code>promise</code>能 <strong><code>鍊式書寫</code></strong> 的原因</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getJSON</span>(<span class="string">&quot;/posts.json&quot;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">json</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> json.<span class="property">post</span>;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">post</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="catch"><a href="#catch" class="headerlink" title="catch()"></a>catch()</h3><p>catch()方法是 <code>.then(null, rejection)</code>或<code>.then(undefined, rejection)</code>的別名，</p><blockquote><p>用於指定發生錯誤時的回調函數</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getJSON</span>(<span class="string">&#x27;/posts.json&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">posts</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 處理 getJSON 和 前一個回調函數運行時發生的錯誤</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发生错误！&#x27;</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>Promise</code>對象的錯誤具有“冒泡”性質，會一直向後傳遞，直到<code>被捕獲</code>為止</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getJSON</span>(<span class="string">&#x27;/post/1.json&#x27;</span>).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">post</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">getJSON</span>(post.<span class="property">commentURL</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">comments</span>) &#123;</span><br><span class="line">  <span class="comment">// some code</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 處理前面三個Promise產生的錯誤</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>一般來說，使用<code>catch</code>方法代替<code>then()</code>第二個參數</p><p><code>Promise</code>對象拋出的錯誤不會傳遞到外層代碼，即不會有任何反應</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> someAsyncThing = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="comment">// 下面一行會報錯，因為X沒有聲明</span></span><br><span class="line">    <span class="title function_">resolve</span>(x + <span class="number">2</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>瀏覽器運行到這一行，<br>會打印出錯誤提示ReferenceError: x is not defined，<br>但是不會退出進程</p><p><code>catch()</code>方法之中，還能再拋出<code>錯誤</code>，通過後面<code>catch</code>方法<code>捕獲</code>到</p><p>再舉個例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&quot;111111&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;err1:&quot;</span>, err)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err2</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;err2:&quot;</span>, err2)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res result:&quot;</span>, res)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// err1: 111111</span></span><br><span class="line"><span class="comment">// res result: undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果希望後續能夠執行 <strong><code>catch</code></strong> ，那麼需要拋出一個異常</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&quot;111111&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res:&quot;</span>, res)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;err:&quot;</span>, err)</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;catch return value&quot;</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res result:&quot;</span>, res)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;err result:&quot;</span>, err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// err: 111111</span></span><br><span class="line"><span class="comment">// err result: Error: catch return value</span></span><br></pre></td></tr></table></figure><h3 id="finally"><a href="#finally" class="headerlink" title="finally()"></a>finally()</h3><p><code>finally()</code>方法用於指定不管<code>Promise</code> 對象最後狀態如何，<code>都會執行</code>的操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">promise</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;···&#125;);</span><br></pre></td></tr></table></figure><h2 id="Promise-API-也稱構造函數方法"><a href="#Promise-API-也稱構造函數方法" class="headerlink" title="Promise API 也稱構造函數方法"></a>Promise API 也稱構造函數方法</h2><p>總共有以下的方法：</p><table><thead><tr><th align="center">Promise API</th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">all()</td><td align="center"><code>Promise.all()</code>方法用於將多個 Promise實例，包裝成一個新的 Promise實例</td><td align="center"></td></tr><tr><td align="center">race()</td><td align="center"><code>Promise.race()</code>方法同樣是將多個Promise 實例，包裝成一個新的Promise 實例</td><td align="center"></td></tr><tr><td align="center">allSettled()</td><td align="center"><code>Promise.allSettled()</code>方法接受一組Promise 實例作為參數，包裝成一個新的Promise 實例<br>只有等到所有這些參數實例都返回結果，不管是<code>fulfilled</code>還是<code>rejected</code>，包裝實例才會結束</td><td align="center"></td></tr><tr><td align="center">resolve()</td><td align="center"><code>Promise.resolve()</code>將現有對象轉為 Promise對象</td><td align="center"></td></tr><tr><td align="center">reject()</td><td align="center"><code>Promise.reject(reason)</code>方法也會返回一個新的Promise 實例，該實例的狀態為rejected</td><td align="center"></td></tr></tbody></table><h3 id="all"><a href="#all" class="headerlink" title="all()"></a>all()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2, p3]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接受一個<code>數組Array</code>（疊代對象）作為參數，數組成員都應為Promise實例</p><p>實例p的狀態由<code>p1</code>、<code>p2</code>、<code>p3</code>決定，分為兩種：</p><ul><li>只有<code>p1</code>、<code>p2</code>、<code>p3</code>的狀態都變成<code>fulfilled</code>，p的狀態才會變成<code>fulfilled</code>，此時<code>p1</code>、<code>p2</code>、<code>p3</code>的返回值組成一個數組，傳遞給p的回調函數</li><li>只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一個被<code>rejected</code>，p的狀態就變成<code>rejected</code>，此時第一個被<code>reject</code>的實例的返回值，會傳遞給p的回調函數</li></ul><blockquote><p>注意，如果作為參數的 <code>Promise</code> 實例，自己定義了<code>catch</code>方法，那麼它一旦被<code>rejected</code>，並不會觸發 **<code>Promise.all()</code>**的catch方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> result)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> e);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;報錯囉&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> result)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> e);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2])</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e));</span><br><span class="line"><span class="comment">// [&quot;hello&quot;, Error: 報錯囉]</span></span><br></pre></td></tr></table></figure><p>如果p2沒有自己的<code>catch</code>方法，就會調用 **<code>Promise.all()</code>**的catch方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;報錯囉&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> result);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2])</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e));</span><br><span class="line"><span class="comment">// Error: 報錯囉</span></span><br></pre></td></tr></table></figure><hr><h3 id="race"><a href="#race" class="headerlink" title="race()"></a>race()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2, p3]);</span><br></pre></td></tr></table></figure><p>只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一個實例率先改變<code>狀態</code>，p的狀態就跟著改變</p><p>率先改變的<code>Promise</code> 實例的返回值則傳遞給p的<code>回調函數</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">race</span>([</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;/resource-that-may-take-a-while&#x27;</span>),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;request timeout&#x27;</span>)), <span class="number">5000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">p</span><br><span class="line">.<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">error</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="allSettled"><a href="#allSettled" class="headerlink" title="allSettled()"></a>allSettled()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promises = [</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;/api-1&#x27;</span>),</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;/api-2&#x27;</span>),</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;/api-3&#x27;</span>),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">allSettled</span>(promises);</span><br><span class="line"><span class="title function_">removeLoadingIndicator</span>();</span><br></pre></td></tr></table></figure><hr><h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve()"></a>resolve()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="comment">// 等於</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;foo&#x27;</span>))</span><br></pre></td></tr></table></figure><p>參數可以分成<code>四種</code>情況，分別如下：</p><ul><li>參數是一個<code>Promise</code> 實例，<code>promise.resolve</code>將不做任何修改、原封不動地返回這個實例</li><li>參數是一個<code>thenable</code>對象，<code>promise.resolve</code>會將這個對象轉為 Promise對象，然後就立即執行thenable對象的<code>then()</code>方法</li><li>參數不是<code>具有then()</code>方法的對象，或根本就不是對象，<code>Promise.resolve</code>()會返回一個新的Promise 對象，狀態為<code>resolved</code></li><li>沒有參數時，直接返回一個<code>resolved</code>狀態的Promise 對象</li></ul><hr><h3 id="reject"><a href="#reject" class="headerlink" title="reject()"></a>reject()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;出錯了&#x27;</span>);</span><br><span class="line"><span class="comment">// 等於</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">reject</span>(<span class="string">&#x27;出錯了&#x27;</span>))</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="literal">null</span>, <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 出錯了</span></span><br></pre></td></tr></table></figure><p><code>Promise.reject()</code>方法的參數，會原封不動地變成<code>後續方法</code>的參數</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;出錯了&#x27;</span>)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e === <span class="string">&#x27;出錯了&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><h2 id="使用場景"><a href="#使用場景" class="headerlink" title="使用場景"></a>使用場景</h2><blockquote><p>將圖片的加載寫成一個<code>Promise</code>，一旦加載完成，Promise的狀態就發生變化</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> preloadImage = <span class="keyword">function</span> (<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    image.<span class="property">onload</span>  = resolve;</span><br><span class="line">    image.<span class="property">onerror</span> = reject;</span><br><span class="line">    image.<span class="property">src</span> = path;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通過鍊式操作，將多個渲染數據分別給個<code>then</code>，讓其各司其職。<br>或當下個<code>異步請求</code>依賴上個請求結果的時候，我們也能夠通過<code>鍊式操作</code>友好解決問題!!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 各自做各自的事</span></span><br><span class="line"><span class="title function_">getInfo</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; bannerList &#125; = res</span><br><span class="line">    <span class="comment">//渲染輪播圖</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(bannerList)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> &#123; storeList &#125; = res</span><br><span class="line">    <span class="comment">//渲染店鋪列表</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(storeList)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; categoryList &#125; = res</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(categoryList)</span><br><span class="line">    <span class="comment">//渲染分類列表</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>通過<code>all()</code>實現多個請求合併在一起，匯總所有請求結果，只需設置一個<code>loading</code>即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">initLoad</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// loading.show() //加载loading</span></span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">getBannerList</span>(),<span class="title function_">getStoreList</span>(),<span class="title function_">getCategoryList</span>()]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">        loading.<span class="title function_">hide</span>() <span class="comment">//關閉loading</span></span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">        loading.<span class="title function_">hide</span>()<span class="comment">//關閉loading</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//數據初始化    </span></span><br><span class="line"><span class="title function_">initLoad</span>();</span><br></pre></td></tr></table></figure><p>通過<code>race()</code>可以設置圖片請求超時</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//請求圖片資源</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">requestImg</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">        img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="title function_">resolve</span>(img);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//img.src = &quot;https://b-gold-cdn.xitu.io/v3/static/img/logo.a7995ad.svg&quot;; 正確的</span></span><br><span class="line">        img.<span class="property">src</span> = <span class="string">&quot;https://b-gold-cdn.xitu.io/v3/static/img/logo.a7995ad.svg1&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//延時函數，用來給請求計時</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">timeout</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;圖片請求超時&#x27;</span>);</span><br><span class="line">        &#125;, <span class="number">5000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span></span><br><span class="line">.<span class="title function_">race</span>([<span class="title function_">requestImg</span>(), <span class="title function_">timeout</span>()])</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">results</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><p>看了那麼多網頁，終於有一點點點點理解了</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://media.tenor.com/uHhB_rq-SC4AAAAC/spongebob-squarepants-dance.gif" alt="ya"></h2><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://es6.ruanyifeng.com/#docs/promise">Promise 对象</a></li><li><a href="https://juejin.cn/post/7109467029241298958">重学ES6-ES12(九)Promise简单介绍</a></li><li><a href="https://github.com/getify/You-Dont-Know-JS">You Don’t Know JS: async &amp; performance</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise">MDN-promise</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10197427">JavaScript - Promise (1)</a></li><li><a href="https://pjchender.dev/javascript/js-promise/">[JS] Promise 的使用</a></li><li><a href="https://promisesaplus.com/">Promises&#x2F;A+</a><br>-<a href="https://github.com/eyesofkids/javascript-es6-promise">從 ES6 開始的 JavaScript 學習生活</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;昨天研究完原理 及 一點點低基礎 還有流程&lt;/p&gt;
&lt;p&gt;趁著記憶猶新 來看看實際用法&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.tenor.com/B5_d8kamVzcAAAAM/aaron-rodgers-smile.gif&quot; alt=&quot;推眼鏡&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="https://supermarpig.github.io/tags/ES6/"/>
    
    <category term="ECMAScript 6" scheme="https://supermarpig.github.io/tags/ECMAScript-6/"/>
    
    <category term="JavaScript" scheme="https://supermarpig.github.io/tags/JavaScript/"/>
    
    <category term="每天一點點" scheme="https://supermarpig.github.io/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E/"/>
    
    <category term="Promise" scheme="https://supermarpig.github.io/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>每天一點點，學習ES6-七-Promise</title>
    <link href="https://supermarpig.github.io/2023/04/24/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E4%B8%83-Promise/"/>
    <id>https://supermarpig.github.io/2023/04/24/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E4%B8%83-Promise/</id>
    <published>2023-04-24T03:45:59.000Z</published>
    <updated>2023-04-25T08:10:41.087Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天來研究 Promise</p><p>很多大哥學會 **<code>Promise</code>**後都覺得不過如此<br>但初次接觸 我完全看不懂啊~~~~~</p><p><img src="https://media.tenor.com/O3boKw1jQG4AAAAM/cute.gif" alt="懊惱"></p><span id="more"></span><p>在以往我們如果處理多層異步操作，我們往往會像下面那樣編寫我們的代碼</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">doSomething</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">  <span class="title function_">doSomethingElse</span>(result, <span class="keyword">function</span>(<span class="params">newResult</span>) &#123;</span><br><span class="line">    <span class="title function_">doThirdThing</span>(newResult, <span class="keyword">function</span>(<span class="params">finalResult</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;得到最终结果: &#x27;</span> + finalResult);</span><br><span class="line">    &#125;, failureCallback);</span><br><span class="line">  &#125;, failureCallback);</span><br><span class="line">&#125;, failureCallback);</span><br></pre></td></tr></table></figure><p>閱讀上面代碼，是不是很難受，上述形成了經典的<code>回調地獄</code></p><p>現在通過<code>Promise</code>的改寫上面的代碼</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">doSomething</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">doSomethingElse</span>(result);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">newResult</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">doThirdThing</span>(newResult);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">finalResult</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;得到最终结果: &#x27;</span> + finalResult);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(failureCallback);</span><br></pre></td></tr></table></figure><blockquote><p>一個 promise 代表一個異步運算的最終結果</p></blockquote><p>Promise 語法結構提供了更多的程式設計上的可能性，它是一個經過長時間實戰的結構，在許多知名的函式庫或框架中很早就有見到 Promise 物件的身影，例如 Dojo、jQuery、YUI、 Ember、Angular、WinJS、Q 等等，之後 Promises&#x2F;A+ 社區則提供了統一的標準。在最近新一代的 ES6 標準中將會包含了 Promise 的實作，提供原生的語言內建支援，這將是個開始，往後會有愈來愈多 API 以此為基礎架構在其上</p><p><code>Promise</code> 這種異步執行結構的需求，在伺服器端(Node.js)遠遠大於瀏覽器端，原因是瀏覽器通常只有會有一個使用者在操作，而且除了網路連線要求之類的 I&#x2F;O(例如 AJAX)、DOM 事件處理、動畫流程處理(計時器)外，並沒有太多需要異步執行 I&#x2F;O 處理的情況。伺服器端(Node.js)所面臨到情況就很嚴峻，除了與外部資源 I&#x2F;O 的處理情況到處都有之外，而且伺服器端(Node.js)是需要同時服務多人使用的情況。</p><p>Promise 是一個強大的異步執行流程語法結構，在 ES6 Promise 標準中，實作內容只有一個建構函式與一個then方法、一個catch方法，再加上四個必需以<code>Promise關鍵字</code>呼叫的靜態函式，<code>Promise.resolve</code>、<code>Promise.reject</code>、<code>Promise.all</code>、<code>Promise.race</code>。語法介紹頁面只有 7 頁，內容少之又少。但為何 Promise 結構不容易被理解？原因在於同步與異步回調函式執行的概念，以及其中很多流程運作，需要用另一種方式來思考要如何進行。當然，需要理解的規則也很多。</p><blockquote><p>以初學者來說，從規則來理解它的運作方式，會是比較容易進入的學習路徑。</p></blockquote><hr><p>說道 <strong><code>Promise</code></strong> 前要先了解 異步 Callback(回調)</p><h2 id="異步-Callback-回調"><a href="#異步-Callback-回調" class="headerlink" title="異步 Callback(回調)"></a>異步 Callback(回調)</h2><blockquote><p>Promise 中的所有回調函式，都是異步執行的</p></blockquote><p>但 並非所有使用Callback Function 的API 都是異步執行的!!!!</p><p>JS語言內建 API 中使用的回調函式不一定是異步執行的，也有<code>同步執行</code>的<br>例如 <strong><code>Array.forEach</code></strong></p><p>要讓開發者自訂的 <code>callbacks</code>(回調)的執行轉變為異步，有以下幾種方式:</p><ul><li>使用計時器(timer)函式: setTimeout, setInterval</li><li>特殊的函式: nextTick, setImmediate</li><li>執行 I&#x2F;O: 監聽網路、資料庫查詢或讀寫外部資源</li><li>訂閱事件</li></ul><blockquote><p>註: 執行 I&#x2F;O 的 API 通常會出現在伺服器端(Node.js)，例如讀寫檔案、資料庫互動等等，這些 API 都會經過特別的設計。瀏覽器端只有少數幾個。</p></blockquote><p>在 <code>Promise</code>結構中<code>異步回調函式</code>只是其中一個重要的參與分子，但 <code>Promise</code> 的重點並不只是在異步執行的回調函式，它可以把<code>多個異步執行的函式</code>，執行流程轉變為<code>序列執行</code>(一個接一個)，或是<code>並行執行</code>(全部都要處理完再說)，並且作更好的錯誤處理方式。也就是說，<code>Promise 結構</code>是一種異步執行的控制<code>流程架構</code></p><hr><h2 id="異步-Function-與-同步-Function"><a href="#異步-Function-與-同步-Function" class="headerlink" title="異步 Function 與 同步  Function"></a>異步 Function 與 同步  Function</h2><h3 id="同步-Function"><a href="#同步-Function" class="headerlink" title="同步 Function"></a>同步 Function</h3><blockquote><p>同步執行函式的結果要不就是回傳一個值，要不然就是執行到一半發生例外，中斷目前的程式然後拋出例外。</p></blockquote><h3 id="異步-Function"><a href="#異步-Function" class="headerlink" title="異步 Function"></a>異步 Function</h3><blockquote><p>異步執行函式的結果要不就是帶有回傳值的成功，要不就是帶有回傳理由的失敗。</p></blockquote><p>兩個看起來很像</p><p>可以理解成 ↓</p><ul><li>同步，程式 發生錯誤就會停止</li><li>異步，程式 發生錯誤還是會繼續，只是會給你一個錯誤的理由</li></ul><blockquote><p>Promise 物件的設計就是針對異步函式的執行結果所設計的，promise 物件最後的結果要不然就用一個回傳值來 fulfilled(實現)，要不然就用一個理由(錯誤)來 rejected(拒絕)。</p></blockquote><p>你可能會認為這種用失敗(或拒絕)或成功的兩分法結果，似乎有點太武斷了，但在許多異步的結構中，的確是用成功或失敗來作為代表，例如 AJAX 的語法結構。promise 物件用實現(解決)與拒絕來作為兩分法的分別字詞。對於有回傳值的情況，沒有什麼太多的考慮空間，必定都是實現狀態，但對於何時才算是拒絕的狀態，這有可能需要仔細考量，例如以下的情況:</p><ul><li><p>好的拒絕狀態應該是:</p><ul><li>I&#x2F;O 操作時發生錯誤，例如讀寫檔案或是網路上的資料時，中途發生例外情況</li><li>無法完成預期的工作，例如accessUsersContacts函式是要讀取手機上的聯絡人名單，因為權限不足而失敗</li><li>內部錯誤導致無法進行異步的程序，例如環境的問題或是程式開發者傳送錯誤的傳入值</li></ul></li><li><p>壞的拒絕狀態例如:</p><ul><li>沒有找到值或是輸出是空白的情況，例如對資料庫查詢，目前沒有找到結果，回傳值是 0。它不應該是個拒絕狀態，而是帶有 0 值的實現。</li><li>詢問類的函式，例如hasPermissionToAccessUsersContacts函式詢問是否有讀取手機上聯絡人名單的權限，當回傳的結果是 false，也就是沒有權限時，應該是一個帶有 false 值的實現。</li></ul></li></ul><blockquote><p>不同的想法會導致不同的設計，舉一個明確的實例來說明拒絕狀態的情境設計。</p></blockquote><p><code>jQuery</code> 的<code>ajax()</code>方法，它在<code>失敗</code>時會呼叫<code>fail處理函式</code>，  </p><p>失敗的情況除了網路連線的問題外，它會在雖然伺服器有回應，<br>但是是屬於失敗類型的 HTTP 狀態碼時，也算作是失敗的狀態。</p><p>但另一個可以用於類似功能的 <code>Fetch API</code> 並沒有，fetch使用 Promise 架構，只有在網路連線發生問題才會轉為 rejected(拒絕)狀態，只要是伺服器有回應都算已實現狀態。</p><blockquote><p>註: 在 JavaScript 中函式的設計，必定有回傳值，沒寫只是回傳 undefined，相當於return undefined</p></blockquote><hr><h2 id="Promise-狀態"><a href="#Promise-狀態" class="headerlink" title="Promise 狀態"></a>Promise 狀態</h2><p><code>promise</code>對象僅有<code>三種</code>狀態</p><ul><li><code>pending</code>（進行中）</li><li><code>fulfilled</code>（已成功）</li><li><code>rejected</code>（已失敗）</li></ul><h2 id="Promise-特點"><a href="#Promise-特點" class="headerlink" title="Promise 特點"></a>Promise 特點</h2><ul><li>對象的狀態不受外界影響，只有異步操作的結果，可以決定當前是哪一種狀態</li><li>一旦狀態改變（從<code>pending</code>變為<code>fulfilled</code> 和 從<code>pending</code>變為<code>rejected</code>），<br>就不會再變，任何時候都可以得到這個結果</li></ul><h2 id="Promise-流程"><a href="#Promise-流程" class="headerlink" title="Promise 流程"></a>Promise 流程</h2><p>認真閱讀<code>下圖</code>，我們能夠輕鬆了解promise整個流程</p><p><img src="https://static.vue-js.com/1b02ae90-58a9-11eb-85f6-6fac77c0c9b3.png" alt="promise流程"></p><h2 id="Promise-用法"><a href="#Promise-用法" class="headerlink" title="Promise 用法"></a>Promise 用法</h2><p><code>Promise</code>對像是一個構造函數，用來生成Promise實例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;&#125;);</span><br></pre></td></tr></table></figure><h2 id="Promise-代碼結構"><a href="#Promise-代碼結構" class="headerlink" title="Promise 代碼結構"></a>Promise 代碼結構</h2><ul><li>在通過new創建Promise對象時，我們需要傳入一個回調函數，我們稱之為executor;<ul><li>這個回調函數會被立即執行，並且給傳入另外兩個回調函數resolve、reject;</li><li>當我們調用resolve回調函數時，會執行Promise對象的then方法傳入的回調函數;</li><li>當我們調用reject回調函數時，會執行Promise對象的catch方法傳入的回調函數;</li></ul></li></ul><p>下面Promise使用過程，我們可以將它劃分成<code>三個狀態</code>:</p><ul><li><p>待定(pending): 初始狀態，既沒有被兌現，也沒有被拒絕;</p><ul><li>當執行executor中的代碼時，處於該狀態;</li></ul></li><li><p>已兌現(<code>fulfilled</code>): 意味著操作成功完成;</p><ul><li>執行了resolve時，處於該狀態;</li></ul></li><li><p>已拒絕(<code>rejected</code>): 意味著操作失敗;</p><ul><li>執行了reject時，處於該狀態;</li></ul></li></ul><table><thead><tr><th align="center">待定(<code>pending</code>)</th><th align="center">已兌現(<code>fulfilled</code>)</th><th align="center">已拒絕(<code>rejected</code>)</th></tr></thead><tbody><tr><td align="center">初始狀態，既沒有被兌現，也沒有被拒絕</td><td align="center">操作成功完成</td><td align="center">操作失敗</td></tr><tr><td align="center">當執行executor中的代碼時，<br>處於該狀態</td><td align="center">執行了resolve時，<br>處於該狀態</td><td align="center">執行了reject時，<br>處於該狀態</td></tr></tbody></table><p>我們來看一下<code>Promise</code>代碼結構:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Promise</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;success message&quot;</span>)</span><br><span class="line">    <span class="comment">// reject(&quot;failture message&quot;)</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fooPromise = <span class="title function_">foo</span>()</span><br><span class="line"><span class="comment">// then方法傳入的回調函數兩個回掉函數:</span></span><br><span class="line"><span class="comment">// &gt; 第一個, 會在Promise執行resolve函數時, 被回調</span></span><br><span class="line"><span class="comment">// &gt; 第二個, 會在Promise執行reject函數時, 被回調</span></span><br><span class="line"></span><br><span class="line">fooPromise.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//catch方法傳入的回調函數, 會在Promise執行reject函數時, 被回調</span></span><br><span class="line"></span><br><span class="line">fooPromise.<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 傳入的這個函數, 被稱之為 executor</span></span><br><span class="line"><span class="comment">// &gt; resolve: 回調函數, 在成功時, 回調resolve函數</span></span><br><span class="line"><span class="comment">// &gt; reject: 回調函數, 在失敗時, 回調reject函數</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise傳入的函數被執行了&quot;</span>)</span><br><span class="line">   <span class="comment">// resolve()</span></span><br><span class="line">    <span class="title function_">reject</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Promise重構請求"><a href="#Promise重構請求" class="headerlink" title="Promise重構請求"></a>Promise重構請求</h2><p>那麼有了Promise，我們就可以將之前的代碼進行重構了:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// request.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">requestData</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="comment">// 異步請求的代碼會被放入到executor中</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 模擬網路請求</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 拿到請求的结果</span></span><br><span class="line">      <span class="comment">// url傳入的是yz, 請求成功</span></span><br><span class="line">      <span class="keyword">if</span> (url === <span class="string">&quot;yz&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 成功</span></span><br><span class="line">        <span class="keyword">let</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>]</span><br><span class="line">        <span class="title function_">resolve</span>(names)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// 否則請求失敗</span></span><br><span class="line">        <span class="comment">// 失敗</span></span><br><span class="line">        <span class="keyword">let</span> errMessage = <span class="string">&quot;請求失敗, url錯誤&quot;</span></span><br><span class="line">        <span class="title function_">reject</span>(errMessage)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="title function_">requestData</span>(<span class="string">&quot;coderWhy&quot;</span>)</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;請求成功:&quot;</span>, res)</span><br><span class="line">&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;請求失敗:&quot;</span>, err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>今天先研究到這邊</p><p>明天再來研究<code>實例方法</code></p><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://es6.ruanyifeng.com/#docs/promise">Promise 对象</a></li><li><a href="https://juejin.cn/post/7109467029241298958">重学ES6-ES12(九)Promise简单介绍</a></li><li><a href="https://github.com/getify/You-Dont-Know-JS">You Don’t Know JS: async &amp; performance</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise">MDN-promise</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10197427">JavaScript - Promise (1)</a></li><li><a href="https://pjchender.dev/javascript/js-promise/">[JS] Promise 的使用</a></li><li><a href="https://promisesaplus.com/">Promises&#x2F;A+</a><br>-<a href="https://github.com/eyesofkids/javascript-es6-promise">從 ES6 開始的 JavaScript 學習生活</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天來研究 Promise&lt;/p&gt;
&lt;p&gt;很多大哥學會 **&lt;code&gt;Promise&lt;/code&gt;**後都覺得不過如此&lt;br&gt;但初次接觸 我完全看不懂啊~~~~~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.tenor.com/O3boKw1jQG4AAAAM/cute.gif&quot; alt=&quot;懊惱&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="https://supermarpig.github.io/tags/ES6/"/>
    
    <category term="ECMAScript 6" scheme="https://supermarpig.github.io/tags/ECMAScript-6/"/>
    
    <category term="JavaScript" scheme="https://supermarpig.github.io/tags/JavaScript/"/>
    
    <category term="每天一點點" scheme="https://supermarpig.github.io/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E/"/>
    
    <category term="Promise" scheme="https://supermarpig.github.io/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>React useState 修改 Object value</title>
    <link href="https://supermarpig.github.io/2023/04/21/React-useState-%E4%BF%AE%E6%94%B9-Object-value/"/>
    <id>https://supermarpig.github.io/2023/04/21/React-useState-%E4%BF%AE%E6%94%B9-Object-value/</id>
    <published>2023-04-21T03:10:42.000Z</published>
    <updated>2023-04-21T03:22:29.421Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>開發中筆記筆記!!</p><span id="more"></span><p>在一般Array中<br>裡面對有很多Obj<br>但想修改其中的內容該如何修正</p><p>以下範例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//這是一般Array內的內容</span></span><br><span class="line">  <span class="keyword">const</span> [todo, setTodo] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>)  <span class="comment">//放todo Array</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//將輸入的東西加入todo Array內</span></span><br><span class="line">            <span class="title function_">setTodo</span>([</span><br><span class="line">                ...todo,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">text</span>: inputText,</span><br><span class="line">                    <span class="attr">completed</span>: <span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">id</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1000</span>),</span><br><span class="line">                &#125;,</span><br><span class="line">            ])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果需要修改 <code>completed</code> 改成<code>true</code> Or <code>!todo.completed</code> 可以這樣寫：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//點擊修改 使否已完成</span></span><br><span class="line">   <span class="title function_">setTodo</span>(</span><br><span class="line">     todo.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (item.<span class="property">id</span> === id) &#123;   <span class="comment">//這句是判斷 是否有相同的id  可以依照各位想做的判斷自行修改</span></span><br><span class="line">         <span class="keyword">return</span> &#123;</span><br><span class="line">           ...item,</span><br><span class="line">           <span class="attr">completed</span>: !item.<span class="property">completed</span>,    </span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> item</span><br><span class="line">     &#125;),</span><br><span class="line">   )</span><br></pre></td></tr></table></figure><p>也可以不加判斷 ，將全部修改成<code>true</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中間列表  ---將全部的完成選取成TRUE</span></span><br><span class="line">     <span class="title function_">setTodo</span>(</span><br><span class="line">       todo.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> &#123;</span><br><span class="line">           ...item,</span><br><span class="line">           <span class="attr">completed</span>: <span class="literal">true</span>,</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">     )</span><br></pre></td></tr></table></figure><p>以上</p><p>希望有幫助到各位</p><p><img src="https://media.tenor.com/FcNL2m-rZTEAAAAd/sleepy-sleep.gif" alt="累"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.google.com/">我聰明的小腦袋</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;開發中筆記筆記!!&lt;/p&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="React" scheme="https://supermarpig.github.io/tags/React/"/>
    
    <category term="JS" scheme="https://supermarpig.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS魔術師 implicit coercion</title>
    <link href="https://supermarpig.github.io/2023/04/19/implicit-coercion/"/>
    <id>https://supermarpig.github.io/2023/04/19/implicit-coercion/</id>
    <published>2023-04-19T03:19:54.000Z</published>
    <updated>2023-04-19T05:58:47.307Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>和小夥伴討論到 implicit coercion 來研究研究</p><span id="more"></span><p>一開始討論到 為啥String前面 加上 一個 <strong>+</strong><br>JS 就會幫你轉成<strong>Number</strong><br>神奇神奇</p><p><img src="https://media.tenor.com/9LpC6GdyxiwAAAAM/otter-cute.gif" alt="amazing"></p><blockquote><p>來個例子</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">strNum</span>:<span class="string">&quot;456&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+obj.<span class="property">strNum</span> + <span class="number">789</span>)</span><br></pre></td></tr></table></figure><blockquote><p>輸出是 <strong>1245</strong></p></blockquote><ul><li>前面+會讓把type轉成number</li></ul><p>酷!!!</p><blockquote><p>JavaScript 的型別不在於變數本身，而在於變數被賦予的值。</p></blockquote><p>找了資料才發現叫做 ：「強制轉型」(<strong>coercion</strong>)</p><p>「強制轉型」有兩種</p><ul><li><p>隱含的強制轉型 — <code>implicit coercion</code></p></li><li><p>明確的強制傳型 — <code>explicit coercion</code></p></li></ul><h2 id="隱含的強制轉型-—-implicit-coercion"><a href="#隱含的強制轉型-—-implicit-coercion" class="headerlink" title="隱含的強制轉型 — implicit coercion"></a>隱含的強制轉型 — implicit coercion</h2><p>JavaScript 在運算的時候，如果看到兩個不同型別的值，就會自動判斷，把值轉換為相同型別，再做運算。</p><p>舉個例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;1&quot;</span>;      <span class="comment">//字串</span></span><br><span class="line">a = a + <span class="number">2</span>;        <span class="comment">//&#x27;12&#x27;， a為字串&quot;1&quot;，數字2與字串相加，被轉型為字串&quot;2&quot;</span></span><br><span class="line">a = a*<span class="number">2</span>           <span class="comment">//24 ， 在乘法的時候，字串&quot;12&quot;與2相乘，字串被轉型為數值，得出的結果是數值 12</span></span><br><span class="line">a = a + <span class="literal">true</span>      <span class="comment">//25， 布林值遇到數值，被轉為數字1，相加後變成25</span></span><br><span class="line">a = a * <span class="literal">null</span>      <span class="comment">//0 ， null遇到數值被轉為0，數值與0相乘變成0</span></span><br><span class="line">a = a / <span class="literal">undefined</span> <span class="comment">//NaN， undefined無法再被轉型為數字</span></span><br></pre></td></tr></table></figure><p>以上這些就是 JavaScript 變數的「<code>強制轉型</code>」，<br>而且是 JavaScript 親切的、自動的、在背後運作的、「**<code>隱含的強制轉型</code>**」（ implicit coercion ）。<br>一下變<code>字串</code>，一下有變成<code>數字</code>、一下變成<code>布林值</code>。</p><p>「隱含的轉型」（ implicit coercion ）基本上可以轉成三種型別：</p><ul><li>自動轉換為布林值( ToBoolean )</li><li>自動轉換為數值( ToNumber )</li><li>自動轉換為字串( ToString )</li></ul><h3 id="四則運算時的強制轉型"><a href="#四則運算時的強制轉型" class="headerlink" title="四則運算時的強制轉型"></a>四則運算時的強制轉型</h3><p>JavaScript在做四則運算的時候跟小學課本教的一樣，由左而右「先乘除後加減」。</p><p>其中以加法（＋）最需要注意！</p><p>如果是數值的運算，那沒有轉型的問題。「字串」的相加也沒有轉型的問題。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span> + <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);  <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> y = <span class="string">&#x27;歐陽鋒是&#x27;</span> + <span class="string">&#x27;一隻癩哈蟆&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y);  <span class="comment">//歐陽鋒是一隻癩哈蟆</span></span><br></pre></td></tr></table></figure><p>只有在 <strong><code>不同型別</code></strong> 的狀況下才有轉型的問題：</p><ul><li><p>當加號 <code>+</code> 兩側有一個是字串的情形下，會將「 <strong><code>非字串</code></strong> 」的那一邊「自動轉型」為<code>字串</code>，再將兩個字串連接在一起。  </p><ul><li>如果另一方為 <code>number</code> 、 <code>boolean</code> 、 <code>object</code> 的情況下，<br><code>number</code> 、 <code>boolean</code> 、 <code>object</code> 會去叫用它們的 *** <code>.toString 「原型方法」</code>**，把自己變成 **<code>字串</code>**，再去和另一個 <strong><code>字串</code></strong> 組合。</li></ul></li><li><p>當一邊是<code>數字</code>，一邊是 <code>undefined</code> 的時候，<br><code>undefined</code> 會被試著轉為<code>數字</code>，變成 <code>NaN</code> ，任何<code>數字</code>與 <code>NaN</code> 相加都是 <strong><code>NaN</code></strong> 。</p></li><li><p>當一邊是<code>數字</code>，加號另一邊是 <code>null</code> 的時候，<br><code>null</code> 會被轉為數字 <code>0</code> 。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//數字與字串相加</span></span><br><span class="line"><span class="number">77</span> + <span class="string">&#x27;49&#x27;</span>         <span class="comment">//&#x27;7749&#x27;</span></span><br><span class="line"><span class="number">77</span> + <span class="string">&#x27;四十九&#x27;</span>      <span class="comment">//&#x27;77四十九&#x27;</span></span><br><span class="line"><span class="comment">//字串與字串相加</span></span><br><span class="line"><span class="string">&#x27;七七&#x27;</span> + <span class="string">&#x27;四十九&#x27;</span>  <span class="comment">//&#x27;七七四十九&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">77</span> + &#123;&#125;           <span class="comment">//&#x27;77[object object]&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//當數字要跟undefined相加的時候，udefined會被嘗試轉為數字，也就是NaN，還記得NaN的型別是number嗎？</span></span><br><span class="line"><span class="number">77</span> + unfined      <span class="comment">//NaN</span></span><br><span class="line"><span class="string">&#x27;七七&#x27;</span> + unfined   <span class="comment">//&#x27;七七undefined&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//當數字要與null相加時，null會被轉成數字 0 ;</span></span><br><span class="line"><span class="number">77</span> + <span class="literal">null</span>          <span class="comment">//77</span></span><br><span class="line"><span class="string">&#x27;七七&#x27;</span> + <span class="literal">null</span>       <span class="comment">//77null</span></span><br></pre></td></tr></table></figure><p>而如果是減乘除法（ － ＊ ／ ）的情況，除了數值以外的其他基本型別都會透過 Number() 方法轉為數字。物件則在乘除的時候會透過 Number() 方法，轉為數字，在減法時透過 valueOf() 方法轉為數字。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">49</span> - <span class="string">&#x27;36&#x27;</span>   <span class="comment">//13</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字串會被轉為數字，也就是NaN</span></span><br><span class="line"><span class="number">49</span> - <span class="string">&#x27;abc&#x27;</span> <span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//布林值的true，會被轉行為數字 1</span></span><br><span class="line"><span class="number">49</span> - <span class="literal">true</span>  <span class="comment">//48</span></span><br><span class="line"><span class="comment">//布林值的false，會被轉行為數字 0</span></span><br><span class="line"><span class="number">49</span> - <span class="literal">false</span>  <span class="comment">//49</span></span><br><span class="line"></span><br><span class="line"><span class="number">49</span> - <span class="literal">undefined</span>  <span class="comment">//NaN</span></span><br><span class="line"><span class="comment">//null會轉為數字0</span></span><br><span class="line"><span class="number">49</span> - <span class="literal">null</span>       <span class="comment">//49</span></span><br><span class="line"><span class="number">49</span> - &#123;&#125;   　　　<span class="comment">//NaN</span></span><br><span class="line"><span class="number">49</span> * <span class="string">&#x27;10&#x27;</span>       <span class="comment">//490</span></span><br><span class="line"><span class="number">49</span> *  <span class="string">&#x27;四十九&#x27;</span>   <span class="comment">//NaN</span></span><br><span class="line"><span class="number">49</span> * <span class="literal">true</span>       <span class="comment">// 49</span></span><br><span class="line"><span class="number">49</span> * <span class="literal">false</span>      <span class="comment">//0</span></span><br><span class="line"><span class="number">49</span> * &#123;&#125;         <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><p>下面附上變數在四則運算時的「自動轉型」規則：</p><table><thead><tr><th align="center">四則運算</th><th align="center">數字</th><th align="center">基本型別非數字</th><th align="center">物件</th></tr></thead><tbody><tr><td align="center">減法</td><td align="center">正常運算</td><td align="center">Number()方法轉為數字</td><td align="center">透過valueOf()轉為數字</td></tr><tr><td align="center">乘法</td><td align="center">正常運算</td><td align="center">Number()方法轉為數字</td><td align="center">Number()方法轉為數字</td></tr><tr><td align="center">除法</td><td align="center">正常運算</td><td align="center">Number()方法轉為數字</td><td align="center">Number()方法轉為數字</td></tr><tr><td align="center">加法</td><td align="center">正常運算</td><td align="center">如果是number、boolean透過toString()方法轉為字串，<br>null或undefined透過String()轉為字串</td><td align="center">toString()轉為字串</td></tr></tbody></table><h3 id="比較運算子的強制轉型"><a href="#比較運算子的強制轉型" class="headerlink" title="比較運算子的強制轉型"></a>比較運算子的強制轉型</h3><p>比較運算子用來比較兩側的數值，比較之後得到布林值 true 或 false。</p><p>一個等號 <code>=</code>，我們知道是「指定、賦值」的意思。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">49</span>;  <span class="comment">//X 的值 =49</span></span><br></pre></td></tr></table></figure><p><code>==</code>是<code>相等</code>的意思，而 <code>===</code> 是<code>全等</code>的意思。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">49</span>;   <span class="comment">//數字</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="string">&#x27;49&#x27;</span>; <span class="comment">//字串</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x == y);</span><br><span class="line"><span class="comment">//true，因為 == 在比較兩側的變數是否相等的時候，會自動幫變數轉型。</span></span><br><span class="line"></span><br><span class="line"><span class="literal">true</span> == <span class="string">&#x27;1&#x27;</span>;   <span class="comment">//true</span></span><br><span class="line"><span class="literal">false</span> == <span class="string">&#x27;0&#x27;</span>;   <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">true</span> === <span class="string">&#x27;1&#x27;</span>;   <span class="comment">//false</span></span><br><span class="line"><span class="literal">false</span> === <span class="string">&#x27;0&#x27;</span>;  <span class="comment">//false</span></span><br><span class="line"><span class="number">1</span>===<span class="string">&#x27;1&#x27;</span> <span class="comment">//false   因為===比較嚴格 會連型態也一起比較</span></span><br></pre></td></tr></table></figure><p>使用 <code>==</code> 相等的時候，<code>會</code>自動替兩側的<code>變數</code>轉型。</p><p>當使用<code>===</code> 全等的時候，<code>不會</code>替變數自動轉型，是比較<code>嚴謹</code>的模式，也是比較推薦使用的方法。</p><p>比較特別的是，<code>NaN</code>不等於<code>NaN</code>，不管是 <code>==</code> 還是 <code>===</code>，<br>都是一樣 <code>NaN</code> 不等於 <code>NaN</code> 。</p><h4 id="x3D-x3D-的自動轉型規則"><a href="#x3D-x3D-的自動轉型規則" class="headerlink" title="&#x3D;&#x3D;的自動轉型規則"></a>&#x3D;&#x3D;的自動轉型規則</h4><ul><li>當遇到「<code>字串</code>」與「<code>數字</code>」做比較的時候，<br>字串會透過 <code>Number()</code> 嘗試轉為<code>數字</code>，再進行比較。</li><li>如果比較的一方為<code>布林值</code>，則 <code>true</code> 會轉為 <code>1</code>， <code>false</code> 會轉為 <code>0</code> 。</li><li>當&#x3D;&#x3D; 的一側為<code>物件型別</code>，另一側為<code>基本型別</code>，<br>物件型別會透過 <code>valueOf()</code> ，轉為對應的<code>基本型別</code>進行比較。</li></ul><h4 id="不等於-x3D-與-x3D-x3D"><a href="#不等於-x3D-與-x3D-x3D" class="headerlink" title="不等於!&#x3D; 與 !&#x3D;&#x3D;"></a>不等於!&#x3D; 與 !&#x3D;&#x3D;</h4><p><code>!=</code>與「<code>! ==</code>」兩者都是<code>不等於</code>，<br>但是 <code>!=</code> <code>會</code>替變數做<code>自動轉型</code>，<br>而 <code>!==</code> <code>不會</code>替變數<code>自動轉型</code>，推薦使用 !&#x3D;&#x3D;</p><hr><h3 id="大於＞與小於＜的強制轉型"><a href="#大於＞與小於＜的強制轉型" class="headerlink" title="大於＞與小於＜的強制轉型"></a>大於＞與小於＜的強制轉型</h3><p>有看到一個數字比大小的有趣例子，借來筆記一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> &lt; <span class="number">2</span> &lt; <span class="number">3</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &lt; <span class="number">2</span> &lt; <span class="number">1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>天哪！怎麼會是這樣的結果！ 3 &lt; 2 &lt; 1 的布林值竟然是 true</p><p><img src="https://media.tenor.com/8v_cOIsZ1H4AAAAC/no-way-seriously.gif" alt="驚訝"></p><p>其實是因為 ＜ 是由左向右( left to right )去做比較，下面來解釋一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> &lt; <span class="number">2</span> &lt; <span class="number">3</span>);</span><br><span class="line"><span class="number">1</span>&lt;<span class="number">2</span> <span class="comment">//true</span></span><br><span class="line"><span class="literal">true</span> &lt; <span class="number">3</span> <span class="comment">//true轉為數字1，1&lt;3，結果為true。</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &lt; <span class="number">2</span> &lt; <span class="number">1</span>); </span><br><span class="line"><span class="number">3</span> &lt; <span class="number">2</span> <span class="comment">//false</span></span><br><span class="line"><span class="literal">false</span> &lt; <span class="number">1</span> <span class="comment">// false轉為數字0，0&lt;1，所以結果為true</span></span><br></pre></td></tr></table></figure><p>所以才會得出 console.log( 3 &lt; 2 &lt; 1 );會變成 true 的結果。</p><p><img src="https://media.tenor.com/XeSeoxw1FGgAAAAC/i-see.gif" alt="I see "></p><h3 id="Boolean的強制傳型"><a href="#Boolean的強制傳型" class="headerlink" title="Boolean的強制傳型"></a>Boolean的強制傳型</h3><p>邏輯運算子( Logical Operator )有 <code>AND &amp;&amp;</code> 、 <code>OR ||</code> 、<code>NOT !</code> 三種。<br>運算子兩側的值經過 ToBoolean 轉換後會得到一個布林值，再由邏輯運算子比較後傳回其中一個值。</p><p><code>&amp;&amp;</code> 以及 <code>||</code> 進行判斷時，會對<code>左邊</code>的數值進行檢查，如果原本是布林值，就進行後續判斷。<br>如果不是，則透過 ToBoolean 轉換為 true 或 false 。</p><ul><li><p>AND &amp;&amp; ：(條件&#x2F;運算式 A ) &amp;&amp; (條件&#x2F;運算式 B )，<br>如果兩側的值都為 true ，得到 true 的結果；<br>如果其中一方為 false ，則得到 false 。<br>如果第一個值轉換為true，則回傳第二個值，否則回傳第一個值。</p></li><li><p>OR ：(條件&#x2F;運算式A) (條件&#x2F;運算式B)，<br>兩側的值只要有一側為 true ，就得到 true 的結果；<br>如果兩側都為 false ，才得到 false 。<br>如果第一個值轉換為true，則回傳第一個值，否則回傳第二個值。</p></li><li><p>NOT ! ： true 的結果透過 ! 轉換會得到 false ，而 false 的結果會變成 true。</p></li></ul><p>那些經過ToBoolean轉換後會得到true的狀況太多，而會得到false的值只有以下五種：</p><ul><li><strong><code>undefined</code></strong></li><li><strong><code>Null</code></strong></li><li><strong><code>+0、-0</code></strong></li><li><strong><code>NaN</code></strong></li><li><strong><code>空字串&quot;&quot;或’’</code></strong></li></ul><p>其他的值都會轉為true。</p><h2 id="明確的強制傳型（explicit-coercion）"><a href="#明確的強制傳型（explicit-coercion）" class="headerlink" title="明確的強制傳型（explicit coercion）"></a>明確的強制傳型（explicit coercion）</h2><p>也就是透過JavaScript提供的函式來進行變數型別轉換，例如：</p><ul><li>轉換為數值型別： <code>Number()</code> 、 <code>parseInt()</code> 、 <code>parseFloat()</code></li><li>轉換為字串型別： <code>toString()</code> 、 <code>String()</code></li><li>轉換為布林型別： <code>Boolean()</code></li></ul><h3 id="Number-、parseInt-、parseFloat"><a href="#Number-、parseInt-、parseFloat" class="headerlink" title="Number()、parseInt()、parseFloat()"></a>Number()、parseInt()、parseFloat()</h3><p>Number()可以將值「嘗試轉型」為「數值型別」，但要並非每種物件都可以順利轉成 number 型別，如果轉型失敗就會變成 NaN (非數值的數值)！</p><p>parseInt(str [, radix]) 函式能將輸入的字串轉成整數，第二個參數 radix 代表使用哪種進位制轉換。</p><p>它會忽略前後空白，在遇到字元被無法解析時，會忽略那個字元與後面的所有字元，停止解析，並回傳目前為止的結果。</p><p>如果第一個字元就無法被解析，會回傳 NaN。</p><p>parseFloat(str)能將字串轉換為以十進位表示的浮點數。</p><p>來看一下範例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;123&#x27;</span>);        <span class="comment">//123</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;華山論劍&#x27;</span>);   <span class="comment">//NaN</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;9陰真經&#x27;</span>);    <span class="comment">//NaN</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="literal">null</span>);         <span class="comment">//0</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="literal">true</span>)          <span class="comment">//1</span></span><br><span class="line"><span class="title class_">Number</span>([]);           <span class="comment">//0</span></span><br><span class="line"><span class="title class_">Number</span>([<span class="number">1</span>]);          <span class="comment">//1</span></span><br><span class="line"><span class="title class_">Number</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);      <span class="comment">//NaN</span></span><br><span class="line"><span class="title class_">Number</span>(&#123;&#125;);           <span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;9陰真經&#x27;</span>);  <span class="comment">//9</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;九陰真經&#x27;</span>); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">101010</span>,<span class="number">2</span>);   <span class="comment">//42</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&#x27;3.1416&#x27;</span>)  <span class="comment">//3.1416</span></span><br></pre></td></tr></table></figure><h3 id="toString-、String"><a href="#toString-、String" class="headerlink" title=".toString()、String()"></a>.toString()、String()</h3><p>String() 與 .toString() 都可以將值轉換為字串型別，<br>差別在於 .toString() 在收到 <code>null</code> 、 <code>undefined</code> 和<code>數字</code>時會報錯。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">String</span>(<span class="number">123</span>)          <span class="comment">//&#x27;123&#x27;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">null</span>)         <span class="comment">//&#x27;null&#x27;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="string">&#x27;undefined&#x27;</span>)  <span class="comment">//&#x27;undefined&#x27;</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">true</span>)         <span class="comment">//&#x27;true&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="literal">true</span>.<span class="title function_">toString</span>()      <span class="comment">//&#x27;true&#x27;</span></span><br><span class="line"><span class="number">123.</span><span class="title function_">toString</span>()</span><br><span class="line"><span class="comment">//Uncaught SyntaxError: Invalid or unexpected token</span></span><br><span class="line"><span class="literal">null</span>.<span class="title function_">toString</span>()</span><br><span class="line"><span class="comment">//Uncaught TypeError: Cannot read properties of null (reading &#x27;toString&#x27;)</span></span><br><span class="line">    </span><br><span class="line"><span class="literal">undefined</span>.<span class="title function_">toString</span>()</span><br><span class="line"><span class="comment">//Uncaught TypeError: Cannot read properties of undefined (reading &#x27;toString&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean()"></a>Boolean()</h3><p>Boolean() 可以用來將其他的資料型態轉型成布林值型態。</p><blockquote><p>還記得前面提過幾種會變成 <code>false</code> 的值嗎?</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Boolean</span>(<span class="number">100</span>)       <span class="comment">//true</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="string">&#x27;100&#x27;</span>)     <span class="comment">//true</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="string">&#x27;&#x27;</span>)        <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="literal">false</span>)     <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="literal">undefined</span>) <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="literal">null</span>)      <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="string">&#x27;&quot;&quot;&#x27;</span>)      <span class="comment">//true</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="string">&#x27;false&#x27;</span>)   <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>重點整理一下，如果可以掌握一些概念，之後還可以再仔細琢磨：</p><h3 id="強制轉型分為兩種"><a href="#強制轉型分為兩種" class="headerlink" title="強制轉型分為兩種"></a>強制轉型分為兩種</h3><ul><li><p>隱含的強制轉型：就是 JavaScript 在運算的過程中，依照它的規則在背地裡把值的型別轉換成其他類的型別。</p><ul><li>四則運算中加法如果遇到「字串」的轉型最需要留意，其他的減乘除都會試圖轉換成數字來處理。</li><li>使用「＝＝＝」相等的時候，會自動替兩側的變數轉型。當使用「＝＝＝」全等的時候，不會替變數自動轉型，建議使用「＝＝＝」來進行比較。</li><li>在布林值的轉型部分，請記得： undefined 、 Null 、 +0 、 -0 、 NaN 、空字串都會轉換成 false。</li></ul></li><li><p>明顯的強制轉型：透過 JavaScript 提供的函式來進行變數型別轉換。</p><ul><li>轉換為數值型別： Number() 、 parseInt() 、 parseFloat()</li><li>轉換為字串型別： toString() 、 String()</li><li>轉換為布林型別： Boolean()</li></ul></li></ul><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://karennnnovelty.medium.com/%E3%84%9F%E5%95%8F%E4%BD%A0%E5%96%94-%E5%BC%B7%E5%88%B6%E8%BD%89%E5%9E%8B%E6%98%AF%E4%BB%80%E9%BA%BC-%E8%BD%89%E6%8F%9B%E5%9E%8B%E5%88%A5%E6%9C%89%E8%A6%8F%E5%89%87%E5%8F%AF%E5%BE%AA%E5%97%8E-%E6%95%B8%E5%AD%97%E5%9E%8B%E5%88%A5%E7%AF%87-690586a391b1">ㄟ問你喔，強制轉型是什麼？轉換型別有規則可循嗎？(數字型別篇)</a></li><li><a href="https://karennnnovelty.medium.com/%E3%84%9F%E5%95%8F%E4%BD%A0%E5%96%94-%E5%BC%B7%E5%88%B6%E8%BD%89%E5%9E%8B%E6%98%AF%E4%BB%80%E9%BA%BC-%E8%BD%89%E6%8F%9B%E5%9E%8B%E5%88%A5%E6%9C%89%E8%A6%8F%E5%89%87%E5%8F%AF%E5%BE%AA%E5%97%8E-%E5%B8%83%E6%9E%97%E5%80%BC-%E5%AD%97%E4%B8%B2%E7%AF%87-a9d6d6cc91d">ㄟ問你喔，強制轉型是什麼？轉換型別有規則可循嗎？(布林值、字串篇)</a></li><li><a href="https://hackmd.io/eFKxFY8oRpmYvnxAkCHnmw">何謂強制轉型、以及如何作到轉換型別？</a></li><li><a href="https://jameshsu0407.github.io/blog/20211030_explicit-coercion_implicit-coercion/">[教學]何謂強制轉型、以及如何作到轉換型別？</a></li><li><a href="https://www.cythilya.tw/2018/10/15/coercion/">你懂 JavaScript 嗎？#8 強制轉型（Coercion）</a></li><li><a href="https://medium.com/stuarthsu/javascript-%E5%85%A8%E6%94%BB%E7%95%A5-%E5%85%8B%E6%9C%8D-js-%E7%9A%84%E5%A5%87%E6%80%AA%E9%83%A8%E5%88%86-cf44d08ffc0">JavaScript 全攻略：克服 JS 的奇怪部分</a></li><li><a href="https://www.796t.com/content/1546084624.html">Javascript型別轉換的技巧</a></li><li><a href="https://www.uj5u.com/qiye/254374.html">JavaScript資料型別轉換</a></li><li><a href="https://jimmywei01.github.io/2019/05/28/JS-%E7%B4%80%E9%8C%842-%E5%8C%85%E8%A3%B9%E7%89%A9%E4%BB%B6%E3%80%81%E8%87%AA%E5%8B%95%E8%BD%89%E5%9E%8B/">JS 紀錄2 - 包裹物件、自動轉型</a></li><li><a href="https://medium.com/unalai/%E8%AA%8D%E8%AD%98-parseint-parsefloat-%E8%88%87-number-%E8%BD%89%E6%8F%9B%E6%88%90%E6%95%B8%E5%AD%97%E7%9A%84%E4%B8%89%E7%A8%AE%E6%96%B9%E6%B3%95-276640aedb4e">認識 parseInt、parseFloat 與 Number 轉換成數字的三種方法</a></li><li><a href="https://blog.miniasp.com/post/2020/02/21/JavaScript-Numbers-Deep-Dive">前端工程研究：關於 JavaScript 中 Number 型別的常見地雷與建議作法</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;和小夥伴討論到 implicit coercion 來研究研究&lt;/p&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JS" scheme="https://supermarpig.github.io/tags/JS/"/>
    
    <category term="implicit coercion" scheme="https://supermarpig.github.io/tags/implicit-coercion/"/>
    
    <category term="語法糖" scheme="https://supermarpig.github.io/tags/%E8%AA%9E%E6%B3%95%E7%B3%96/"/>
    
  </entry>
  
  <entry>
    <title>每天一點點，學習ES6(六)數據結構 Set Map</title>
    <link href="https://supermarpig.github.io/2023/04/18/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E5%85%AD-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-Set-Map/"/>
    <id>https://supermarpig.github.io/2023/04/18/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E5%85%AD-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8B-Set-Map/</id>
    <published>2023-04-18T01:50:33.000Z</published>
    <updated>2023-04-18T06:40:50.328Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天剛研究完另一種數據結構<strong>Symbol</strong><br>趁記憶猶新的時候，把 <strong>Set</strong> 跟 <strong>Map</strong>一起解決!!</p><p><img src="https://media.tenor.com/GtZnj_mssJUAAAAM/yes.gif" alt="yes"></p><span id="more"></span><p>在ES6之前，儲存數據的結構主要有兩種:</p><ul><li><strong>Array</strong></li><li><strong>Object</strong></li></ul><blockquote><p>在ES6中新增了另外兩種數據結構: <strong>Set</strong>、<strong>Map</strong><br>以及它们的另外形式<strong>WeakSet</strong>、<strong>WeakMap</strong></p></blockquote><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p><code>Set</code>是<code>es6</code>新增的數據結構，類似於樹組，<br>但是裡面的值都是唯一的，沒有重複的值，我們一般稱為<code>集合</code></p><p>Set本身是一个構造函數，用來生成 Set 數據結構</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br></pre></td></tr></table></figure><h3 id="構造函數的三大特點"><a href="#構造函數的三大特點" class="headerlink" title="- 構造函數的三大特點"></a>- 構造函數的三大特點</h3><blockquote><p>構造函數的函數名的第一個字母通常大寫。<br>函數體內使用this關鍵字，代表所要生成的對象實例。<br>生成對象的時候，必須使用new命令來調用構造函數。</p></blockquote><h3 id="Set-的常見方法"><a href="#Set-的常見方法" class="headerlink" title="Set 的常見方法"></a>Set 的常見方法</h3><p><strong>Set常見的屬性</strong>:</p><ul><li><p>size:返回Set中元素的個數;<br><strong>Set常用的方法:</strong></p></li><li><p><strong>add(value)</strong>:添加某個元素，返回Set對象本身;</p></li><li><p><strong>delete(value)</strong>:從set中刪除和這個值相等的元素，返回Boolean類型;</p></li><li><p><strong>has(value)</strong>:判斷set中是否存在某個元素，返回Boolean類型;</p></li><li><p><strong>clear()</strong>:清空set中所有的元素，沒有返回值;</p></li><li><p><strong>forEach(callback, [ thisArg])</strong>:通過forEach遍歷set;</p></li></ul><h4 id="size"><a href="#size" class="headerlink" title="size"></a>size</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="property">size</span> <span class="comment">// 0   &lt;-----返回裡面的length</span></span><br></pre></td></tr></table></figure><h4 id="add-value"><a href="#add-value" class="headerlink" title="add(value)"></a>add(value)</h4><p>添加某個值，返回 Set 結構本身</p><p>當添加已經存在的元素，set不會進行處理添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="title function_">add</span>(<span class="number">1</span>).<span class="title function_">add</span>(<span class="number">2</span>).<span class="title function_">add</span>(<span class="number">2</span>); <span class="comment">// 2只被加了一次</span></span><br><span class="line"><span class="comment">//Set(2) &#123;1, 2&#125;</span></span><br></pre></td></tr></table></figure><hr><h4 id="delete-value"><a href="#delete-value" class="headerlink" title="delete(value)"></a>delete(value)</h4><p>删除某個值，返回一個布爾值(<strong>True</strong> or <strong>False</strong>)，表示删除是否成功</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="title function_">delete</span>(<span class="number">1</span>) <span class="comment">//false</span></span><br></pre></td></tr></table></figure><hr><h4 id="has-value"><a href="#has-value" class="headerlink" title="has(value)"></a>has(value)</h4><p>返回一个(<strong>True</strong> or <strong>False</strong>)，判斷該值是否為Set的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="title function_">has</span>(<span class="number">2</span>) <span class="comment">//false</span></span><br></pre></td></tr></table></figure><hr><h4 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h4><p>清除Set內所有元素，沒有返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure><hr><h4 id="遍歷"><a href="#遍歷" class="headerlink" title="遍歷"></a>遍歷</h4><p><code>Set</code>實現遍歷的方法有下：</p><ul><li>**keys()**：返回key值的遍歷器</li><li>**values()**：返回value值的遍歷器</li><li>**entries()**：返回entries的遍歷器</li><li>**forEach()**：使用回调函數遍歷每個元素</li></ul><blockquote><p><code>Set</code>的遍歷順序就是插入順序</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// blue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// blue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> set.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [&quot;red&quot;, &quot;red&quot;]</span></span><br><span class="line"><span class="comment">// [&quot;green&quot;, &quot;green&quot;]</span></span><br><span class="line"><span class="comment">// [&quot;blue&quot;, &quot;blue&quot;]</span></span><br></pre></td></tr></table></figure><blockquote><p><code>forEach()</code>用於對每個成員執行某種操作，沒有返回值，鍵值、鍵名都相等，<br>同樣的<code>forEach</code>方法有<code>第二個參數</code>，用於<code>綁定</code>處理函數的this</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]);</span><br><span class="line">set.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27; : &#x27;</span> + value))</span><br><span class="line"><span class="comment">// 1 : 1</span></span><br><span class="line"><span class="comment">// 4 : 4</span></span><br><span class="line"><span class="comment">// 9 : 9</span></span><br></pre></td></tr></table></figure><p><code>擴展運算符</code>和<code>Set 結構</code>相結合實現數組或字符串去重</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> unique = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]; <span class="comment">// [3, 5, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// String</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;352255&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> unique = [...<span class="keyword">new</span> <span class="title class_">Set</span>(str)].<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// &quot;352&quot;</span></span><br></pre></td></tr></table></figure><p>實現<code>並集</code>、<code>交集</code>、和<code>差集</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 並集</span></span><br><span class="line"><span class="keyword">let</span> union = <span class="keyword">new</span> <span class="title class_">Set</span>([...a, ...b]);</span><br><span class="line"><span class="comment">// Set &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">let</span> intersect = <span class="keyword">new</span> <span class="title class_">Set</span>([...a].<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> b.<span class="title function_">has</span>(x)));</span><br><span class="line"><span class="comment">// set &#123;2, 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// （a 相對於 b 的）差集</span></span><br><span class="line"><span class="keyword">let</span> difference = <span class="keyword">new</span> <span class="title class_">Set</span>([...a].<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> !b.<span class="title function_">has</span>(x)));</span><br><span class="line"><span class="comment">// Set &#123;1&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p><code>Map</code>類型是<code>key</code>值對的有序列表，而<code>key</code>和<code>value</code>都可以是任意類型</p><p><code>Map</code>本身是一個構造函數，用來生成 Map 數據結構</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br></pre></td></tr></table></figure><h3 id="Map的常見方法"><a href="#Map的常見方法" class="headerlink" title="Map的常見方法"></a>Map的常見方法</h3><p><strong>Map常見的屬性</strong>:</p><ul><li><p><strong>size</strong>:返回Map中元素的個數;<br><strong>Map常用的方法:</strong></p></li><li><p><strong>set(key, value)</strong>:在Map中添加<code>key</code>、<code>value</code>，並且返回整個Map對象</p></li><li><p><strong>get(key)</strong>:根據<code>key</code>獲取Map中的<code>value</code>;</p></li><li><p><strong>delete(value)</strong>:從Map中刪除和這個值相等的元素，返回Boolean類型;</p></li><li><p><strong>has(value)</strong>:判斷Map中是否存在某個元素，返回Boolean類型;</p></li><li><p><strong>clear()</strong>:清空Map中所有的元素，沒有返回值;</p></li><li><p><strong>forEach(callback, [ thisArg])</strong>:通過forEach遍歷Map;</p></li></ul><h4 id="Size"><a href="#Size" class="headerlink" title="Size"></a>Size</h4><p><code>size</code>屬性返回Map 結構的元素總數。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;bar&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">map.<span class="property">size</span> <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h4 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h4><p>設置<code>key</code>對應的鍵值為<code>value</code>，然後返回整個Map 結構</p><p>如果key已經有值，則<code>value</code>值會被更新，否則就新生成該<code>value</code></p><p>同時返回的是當前Map對象，可採用鍊式寫法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;edition&#x27;</span>, <span class="number">6</span>)        <span class="comment">// key是字符串</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">262</span>, <span class="string">&#x27;standard&#x27;</span>)     <span class="comment">// key是數值</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="literal">undefined</span>, <span class="string">&#x27;nah&#x27;</span>)    <span class="comment">// key是 undefined</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>).<span class="title function_">set</span>(<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>).<span class="title function_">set</span>(<span class="number">3</span>, <span class="string">&#x27;c&#x27;</span>) <span class="comment">// 鏈式寫法</span></span><br></pre></td></tr></table></figure><h4 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h4><p><code>get</code>方法讀取<code>key</code>對應的<code>value</code>值，如果找不到<code>key</code>，返回<code>undefined</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hello = <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);&#125;;</span><br><span class="line">m.<span class="title function_">set</span>(hello, <span class="string">&#x27;Hello ES6!&#x27;</span>) <span class="comment">// key是函数Function</span></span><br><span class="line"></span><br><span class="line">m.<span class="title function_">get</span>(hello)  <span class="comment">// Hello ES6!</span></span><br></pre></td></tr></table></figure><h4 id="has"><a href="#has" class="headerlink" title="has()"></a>has()</h4><p><code>has</code>方法返回一個<code>Boolean</code>，表示某個<code>key</code>是否在當前Map 對象之中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&#x27;edition&#x27;</span>, <span class="number">6</span>);</span><br><span class="line">m.<span class="title function_">set</span>(<span class="number">262</span>, <span class="string">&#x27;standard&#x27;</span>);</span><br><span class="line">m.<span class="title function_">set</span>(<span class="literal">undefined</span>, <span class="string">&#x27;nah&#x27;</span>);</span><br><span class="line"></span><br><span class="line">m.<span class="title function_">has</span>(<span class="string">&#x27;edition&#x27;</span>)     <span class="comment">// true</span></span><br><span class="line">m.<span class="title function_">has</span>(<span class="string">&#x27;years&#x27;</span>)       <span class="comment">// false</span></span><br><span class="line">m.<span class="title function_">has</span>(<span class="number">262</span>)           <span class="comment">// true</span></span><br><span class="line">m.<span class="title function_">has</span>(<span class="literal">undefined</span>)     <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="delete"><a href="#delete" class="headerlink" title="delete()"></a>delete()</h4><p><code>delete</code>方法刪除某個<code>key</code>，返回<code>true</code>。如果<code>刪除失敗</code>，返回<code>false</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">m.<span class="title function_">set</span>(<span class="literal">undefined</span>,<span class="string">&#x27;nah&#x27;</span>);</span><br><span class="line">m.<span class="title function_">has</span>(<span class="literal">undefined</span>)  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">m.<span class="title function_">delete</span>(<span class="literal">undefined</span>)</span><br><span class="line">m.<span class="title function_">has</span>(<span class="literal">undefined</span>)  <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h4 id="clear-1"><a href="#clear-1" class="headerlink" title="clear()"></a>clear()</h4><p><code>clear</code>方法清除所有元素，沒有返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;bar&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">map.<span class="property">size</span> <span class="comment">// 2</span></span><br><span class="line">map.<span class="title function_">clear</span>()</span><br><span class="line">map.<span class="property">size</span> <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h3 id="遍歷-1"><a href="#遍歷-1" class="headerlink" title="遍歷"></a>遍歷</h3><p><code>Map</code>結構原生提供<code>三個遍歷器生成函數</code>和<code>一個遍歷方法</code>：</p><ul><li>**keys()**：返回<code>key</code>的遍歷器</li><li>**values()**：返回<code>value</code>的遍歷器</li><li>**entries()**：返回<code>所有元素</code>的遍歷器</li><li>**forEach()**：遍歷Map 的所有<code>元素</code><br>遍歷順序就是插入順序</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;no&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;T&#x27;</span>,  <span class="string">&#x27;yes&#x27;</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;F&quot;</span></span><br><span class="line"><span class="comment">// &quot;T&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map.<span class="title function_">values</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;no&quot;</span></span><br><span class="line"><span class="comment">// &quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> map.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item[<span class="number">0</span>], item[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;F&quot; &quot;no&quot;</span></span><br><span class="line"><span class="comment">// &quot;T&quot; &quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;F&quot; &quot;no&quot;</span></span><br><span class="line"><span class="comment">// &quot;T&quot; &quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于使用map.entries()</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &quot;F&quot; &quot;no&quot;</span></span><br><span class="line"><span class="comment">// &quot;T&quot; &quot;yes&quot;</span></span><br><span class="line"></span><br><span class="line">map.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value, key, map</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Key: %s, Value: %s&quot;</span>, key, value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Key: F, Value: no</span></span><br><span class="line"><span class="comment">// Key: T, Value: yes</span></span><br></pre></td></tr></table></figure><h4 id="複製與合併"><a href="#複製與合併" class="headerlink" title="複製與合併"></a><code>複製</code>與<code>合併</code></h4><p><code>clone</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> original = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> clone = <span class="keyword">new</span> <span class="title class_">Map</span>(original);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(clone.<span class="title function_">get</span>(<span class="number">1</span>)); <span class="comment">// one</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(original === clone); <span class="comment">// false. Useful for shallow comparison</span></span><br></pre></td></tr></table></figure><p><code>合併</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> first = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="string">&#x27;three&#x27;</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> second = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="number">1</span>, <span class="string">&#x27;uno&#x27;</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">&#x27;dos&#x27;</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Merge two maps. The last repeated key wins.</span></span><br><span class="line"><span class="comment">// Spread operator essentially converts a Map to an Array</span></span><br><span class="line"><span class="keyword">var</span> merged = <span class="keyword">new</span> <span class="title class_">Map</span>([...first, ...second]);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(merged.<span class="title function_">get</span>(<span class="number">1</span>)); <span class="comment">// uno</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(merged.<span class="title function_">get</span>(<span class="number">2</span>)); <span class="comment">// dos</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(merged.<span class="title function_">get</span>(<span class="number">3</span>)); <span class="comment">// three</span></span><br></pre></td></tr></table></figure><p><code>Map</code>也可以跟 <code>Array</code> 合併：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> first = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="string">&#x27;three&#x27;</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> second = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="number">1</span>, <span class="string">&#x27;uno&#x27;</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="string">&#x27;dos&#x27;</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Merge maps with an array. The last repeated key wins.</span></span><br><span class="line"><span class="keyword">var</span> merged = <span class="keyword">new</span> <span class="title class_">Map</span>([...first, ...second, [<span class="number">1</span>, <span class="string">&#x27;eins&#x27;</span>]]);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(merged.<span class="title function_">get</span>(<span class="number">1</span>)); <span class="comment">// eins</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(merged.<span class="title function_">get</span>(<span class="number">2</span>)); <span class="comment">// dos</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(merged.<span class="title function_">get</span>(<span class="number">3</span>)); <span class="comment">// three</span></span><br></pre></td></tr></table></figure><hr><h2 id="WeakSet-和-WeakMap"><a href="#WeakSet-和-WeakMap" class="headerlink" title="WeakSet 和 WeakMap"></a><code>WeakSet</code> 和 <code>WeakMap</code></h2><h3 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h3><p>和<code>Set</code>類似的另外一個<code>數據結構</code>稱之為<code>WeakSet</code>，<br>也是<code>內部元素</code>不能重複的<code>數據結構</code>。</p><h4 id="與Set有何差異"><a href="#與Set有何差異" class="headerlink" title="與Set有何差異"></a>與<code>Set</code>有何差異</h4><ul><li><p>WeakSet中只能存放<code>引用類型</code>，不能是<code>其他類型的值</code>;</p><ul><li><code>引用類型</code>統稱為<code>object 類型</code>，細分的話有：<code>Object</code> 類型、<code>Array</code> 類型、<code>Date</code> 類型、<code>RegExp</code> 類型、<code>Function</code> 類型</li></ul></li><li><p>WeakSet對元素的引用是<code>弱引用</code>，如果沒有其他引用對某個對象進行引用，那麼<code>垃圾回收機制</code>可以對該<code>對象</code>進行回收;</p></li></ul><p>舉個例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> ws=<span class="keyword">new</span> <span class="title class_">WeakSet</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素不是引用類型</span></span><br><span class="line"><span class="keyword">let</span> weakSet=<span class="keyword">new</span> <span class="title class_">WeakSet</span>([<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakSet) </span><br><span class="line">  <span class="comment">//  報錯!!!</span></span><br><span class="line">  <span class="comment">//  Uncaught TypeError: Invalid value used in weak set</span></span><br><span class="line">  <span class="comment">//  at WeakSet.add (&lt;anonymous&gt;)</span></span><br><span class="line">  <span class="comment">//  at new WeakSet (&lt;anonymous&gt;)</span></span><br><span class="line">  <span class="comment">//  at &lt;anonymous&gt;:4:13</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素為引用類型</span></span><br><span class="line"><span class="keyword">let</span> obj1=&#123;<span class="attr">name</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj2=&#123;<span class="attr">name</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">let</span> ws=<span class="keyword">new</span> <span class="title class_">WeakSet</span>([obj1,obj2]); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ws) <span class="comment">//WeakSet &#123;&#123;…&#125;, &#123;…&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------------</span></span><br><span class="line"><span class="keyword">let</span> a = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]];</span><br><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="title class_">WeakSet</span>(a);</span><br><span class="line"><span class="comment">// WeakSet &#123;[1, 2], [3, 4]&#125;</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ws) <span class="comment">//WeakSet&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// weakSet a為null ，weakSet就會被垃圾回收機制一起清空   ----＞所謂的弱型別</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------------</span></span><br><span class="line"><span class="keyword">let</span> a = [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]];</span><br><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="title class_">Set</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ws) <span class="comment">// Set(2) &#123;Array(2), Array(2)&#125;</span></span><br><span class="line"></span><br><span class="line">a=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ws) <span class="comment">// Set(2) &#123;Array(2), Array(2)&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Set  a 為null ，不會被清空    ----＞ 所謂的強型別</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>來舉一個實際 <strong>Stack Overflow</strong> 的案例</p><blockquote><p>不能通過非構造方法創建出來的對象調用構造函數的方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> personSet = <span class="keyword">new</span> <span class="title class_">WeakSet</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    personSet.<span class="title function_">add</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">running</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!personSet.<span class="title function_">has</span>(<span class="variable language_">this</span>)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;不能通过非构造方法创建出来的对象调用running方法&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;running~&quot;</span>, <span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">p.<span class="title function_">running</span>()</span><br><span class="line">p = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">p.<span class="property">running</span>.<span class="title function_">call</span>(&#123;<span class="attr">name</span>: <span class="string">&quot;why&quot;</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h3><p>和<code>Map</code>類型的另外一個數據結構稱之為<code>WeakMap</code>，<br>也是以<code>key值對</code>的形式存在的。</p><h4 id="在API中WeakMap與Map有兩個區別"><a href="#在API中WeakMap與Map有兩個區別" class="headerlink" title="在API中WeakMap與Map有兩個區別"></a>在API中WeakMap與Map有兩個區別</h4><ul><li>沒有遍歷操作的<code>API</code></li><li>沒有<code>clear</code>清空方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WeakMap 可以使用 set 方法添加元素</span></span><br><span class="line"><span class="keyword">const</span> wm1 = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="keyword">const</span> key = &#123;<span class="attr">foo</span>: <span class="number">1</span>&#125;;</span><br><span class="line">wm1.<span class="title function_">set</span>(key, <span class="number">2</span>);</span><br><span class="line">wm1.<span class="title function_">get</span>(key) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// WeakMap 也可以接受一个Array，</span></span><br><span class="line"><span class="comment">// 作为構造函數的参数</span></span><br><span class="line"><span class="keyword">const</span> k1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> k2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> wm2 = <span class="keyword">new</span> <span class="title class_">WeakMap</span>([[k1, <span class="string">&#x27;foo&#x27;</span>], [k2, <span class="string">&#x27;bar&#x27;</span>]]);</span><br><span class="line">wm2.<span class="title function_">get</span>(k2) <span class="comment">// &quot;bar&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>WeakMap</code>只接受<code>Obj</code>作為<code>key</code>（null除外），不接受<code>其他類型</code>的值作為<code>key</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// TypeError: 1 is not an object!</span></span><br><span class="line">map.<span class="title function_">set</span>(<span class="title class_">Symbol</span>(), <span class="number">2</span>)</span><br><span class="line"><span class="comment">// TypeError: Invalid value used as weak map key</span></span><br><span class="line">map.<span class="title function_">set</span>(<span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// TypeError: Invalid value used as weak map key</span></span><br></pre></td></tr></table></figure><p><code>WeakMap</code>的<code>key</code>所指向的<code>Obj</code>，一旦不再需要，裡面的<code>key</code>和所對應的<code>value</code>會自動消失，不用手動刪除</p><p>舉個例子<code>: 在網頁的DOM 元素上添加數據，就可以使用</code>WeakMap<code>結構，當該DOM 元素被清除，其所對應的</code>WeakMap&#96;記錄就會自動被移除</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;example&#x27;</span>);</span><br><span class="line"></span><br><span class="line">wm.<span class="title function_">set</span>(element, <span class="string">&#x27;some information&#x27;</span>);</span><br><span class="line">wm.<span class="title function_">get</span>(element) <span class="comment">// &quot;some information&quot;</span></span><br></pre></td></tr></table></figure><p>注意：<code>WeakMap</code>弱引用的只是<code>key</code>，而不是<code>value</code>。<code>key</code>依然是正常引用</p><p>下面代碼中，<code>key</code>值obj會在WeakMap產生新的引用，當你修改obj不會影響到內部<code>value</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="keyword">let</span> key = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">foo</span>: <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">wm.<span class="title function_">set</span>(key, obj);</span><br><span class="line">obj = <span class="literal">null</span>;</span><br><span class="line">wm.<span class="title function_">get</span>(key)</span><br><span class="line"><span class="comment">// Object &#123;foo: 1&#125;</span></span><br></pre></td></tr></table></figure><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>新增了兩個<code>set</code>&amp;<code>map</code>數據結構，找資料發現還有他們對應的弱型別-.-+<br>搞得一個頭兩個大!!!</p><p>找了很多範例，終於是有一點點點點的<strong>明白</strong></p><p>希望大家也清楚了^_______________^</p><p><img src="https://media.tenor.com/dIlSHuNhTuAAAAAM/cats-cpr.gif" alt="清楚"></p><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><p><a href="https://es6.ruanyifeng.com/#docs/set-map">ECMAScript 6 入门</a></p></li><li><p><a href="http://caibaojian.com/es6/set-map.html">ES6 set和map数据结构</a></p></li><li><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Set">MDN-Set</a></p></li><li><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Map">MDN-MAp</a></p></li><li><p><a href="https://juejin.cn/post/6955064579109945380">JavaScript 中的構造函數</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;昨天剛研究完另一種數據結構&lt;strong&gt;Symbol&lt;/strong&gt;&lt;br&gt;趁記憶猶新的時候，把 &lt;strong&gt;Set&lt;/strong&gt; 跟 &lt;strong&gt;Map&lt;/strong&gt;一起解決!!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.tenor.com/GtZnj_mssJUAAAAM/yes.gif&quot; alt=&quot;yes&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="https://supermarpig.github.io/tags/ES6/"/>
    
    <category term="ECMAScript 6" scheme="https://supermarpig.github.io/tags/ECMAScript-6/"/>
    
    <category term="JavaScript" scheme="https://supermarpig.github.io/tags/JavaScript/"/>
    
    <category term="每天一點點" scheme="https://supermarpig.github.io/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E/"/>
    
  </entry>
  
  <entry>
    <title>每天一點點，學習ES6(五)數據結構Symbol</title>
    <link href="https://supermarpig.github.io/2023/04/17/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E4%BA%94-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8BSymbol/"/>
    <id>https://supermarpig.github.io/2023/04/17/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E4%BA%94-%E6%95%B8%E6%93%9A%E7%B5%90%E6%A7%8BSymbol/</id>
    <published>2023-04-17T03:55:21.000Z</published>
    <updated>2023-04-17T06:48:33.577Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天要來研究 新增的數據結構 Symbol</p><p><img src="https://media.tenor.com/CCHDqLErO7oAAAAd/haha-so.gif" alt="無奈"></p><span id="more"></span><h2 id="簡單數據類型"><a href="#簡單數據類型" class="headerlink" title="簡單數據類型"></a>簡單數據類型</h2><p>ES5中有5中簡單數據類型，</p><ul><li>Undefined</li><li>Null</li><li>Boolean</li><li>Number</li><li>String</li></ul><p>相信大家都很熟悉，也使用的相當流利</p><p><img src="https://media.tenor.com/wIxFiobxxbIAAAAd/john-jonah-jameson-lol.gif" alt="嘿嘿"></p><p>之後再來整理來給未來的我複習複習</p><blockquote><p>今天重點要來整理<code>Symbol</code>到底能用在哪邊</p></blockquote><p>根據<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">MDN-Symbol</a>說明，只有兩種類型可以做為<code>Obj</code>的key值</p><ul><li>String 類型</li><li>Symbol 類型</li></ul><p>如果使用另一種類型，例如數字，它會被自動轉換為字符串。<br>→ <code>obj[1]</code> 與 <code>obj[&quot;1&quot;]</code> 相同<br>→ <code>obj[true]</code> 與 <code>obj[&quot;true&quot;]</code> 相同</p><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><h3 id="語法"><a href="#語法" class="headerlink" title="語法"></a>語法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Symbol</span>([description])</span><br></pre></td></tr></table></figure><h3 id="參數"><a href="#參數" class="headerlink" title="參數"></a>參數</h3><p>description<br>可以選擇的<code>String</code>類型。<br>對 <code>symbol</code> 的描述，可用於調適 但不是訪問 <code>symbol</code> 本身。</p><h2 id="Symbol-例子"><a href="#Symbol-例子" class="headerlink" title="Symbol 例子"></a>Symbol 例子</h2><blockquote><p>“symbol” 值表示唯一的標識符。</p></blockquote><p>可以給symbol 一個描述（也稱為symbol 名），這在代碼調試時非常有用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// id 是描述為 &quot;id&quot; 的 symbol</span></span><br><span class="line"><span class="keyword">let</span> id = <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure><p>symbol 保證是唯一的。<br>即使我們創建了許多具有相同描述的symbol，它們的值也是不同。<br><code>ID</code>只是一個標籤，不影響任何東西。<br>例如，這裡有兩個描述相同的symbol —— 它們不相等：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id1 = <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> id2 = <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(id1 == id2); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="例子二"><a href="#例子二" class="headerlink" title="例子二"></a>例子二</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;bar&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1) <span class="comment">// Symbol(foo)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2) <span class="comment">// Symbol(bar)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 === s2) <span class="comment">// false</span></span><br><span class="line"><span class="comment">//---------------------------------------------------</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;Cody&quot;</span>,</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>(obj) <span class="comment">// 如果参数是Object的時候，會自動調用該對象toString方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s) <span class="comment">// Symbol(Cody)</span></span><br></pre></td></tr></table></figure><h2 id="關於description"><a href="#關於description" class="headerlink" title="關於description"></a>關於description</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>()</span><br><span class="line">s.<span class="property">name</span> = <span class="string">&quot;Cody&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s) <span class="comment">// Symbol&#123;&#125; // Symbol不是對象，不能用對待對象的方式對待Symbol</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">description</span>) <span class="comment">// undefind</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">name</span>) <span class="comment">// undefind</span></span><br><span class="line"><span class="comment">//---------------------------------------------</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">description</span>) <span class="comment">// foo</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Symbol 需要給一個值，<code>description</code>才找的到東西</p></blockquote><h2 id="Symbol-for"><a href="#Symbol-for" class="headerlink" title="Symbol.for"></a>Symbol.for</h2><ul><li>通過Symbol.for相當於定義在全局的變量，<br>如果之前聲明過，後面再通過Symbol.for的時候，會在全局找，<br>如果描述一樣的話，會和上一個一樣。</li></ul><blockquote><p>可以簡單理解為對象指向同一個堆內存地址。</p></blockquote><p>舉個例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"> <span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="property">log</span> (s1) <span class="comment">// Symbol(foo) </span></span><br><span class="line"> <span class="variable language_">console</span> log (s1 === s2) <span class="comment">// true </span></span><br><span class="line"><span class="comment">// 即使是在函數定義域內，通過Symbol.for也會將該Symbol註冊在全局</span></span><br><span class="line"><span class="keyword">function</span>  <span class="title function_">foo</span> ()&#123;</span><br><span class="line">     <span class="keyword">return</span>  <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> x = foo ()</span><br><span class="line"> <span class="keyword">const</span> y = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(x === y) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>這樣理解為，Function return 的Symbol.for(‘foo’)<br>指向都是同一個地址的 (‘foo’)<br>而且<strong>Symbol.for</strong>會將指向只到<strong>全域</strong></p><p>所以最後一行 X &#x3D;&#x3D;&#x3D; Y 才會等於 <code>True</code></p><p><font size=5 > 完蛋!!打完都覺得要想十分鐘才轉得過來</font></p><p><img src="https://media.tenor.com/53zhDFlKE8gAAAAd/kabangu-upset.gif" alt="眼神死"></p><h2 id="Symbol-keyFor"><a href="#Symbol-keyFor" class="headerlink" title="Symbol.keyFor"></a>Symbol.keyFor</h2><blockquote><p>查看是否在全局登記Symbol裡面的描述。與上面的Symbol.for對應。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(s1)) <span class="comment">// undefind </span></span><br><span class="line"><span class="keyword">const</span> s2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="property">log</span> (<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(s1)) <span class="comment">// foo</span></span><br></pre></td></tr></table></figure><p>這樣表示 <strong>s1</strong> 的Symbol 不是全域參數<br><strong>s2</strong> 指向全域的地址 ，所以 <strong>Symbol.keyFor</strong>才搜尋的到</p><p>好了!!!看到這邊我知道你已經混亂了<br>該來點實際案例!!!!!!</p><p><img src="https://media.tenor.com/Sg7JaLXCkhoAAAAC/awkward-in-trouble.gif" alt="驚訝"></p><h2 id="實際應用"><a href="#實際應用" class="headerlink" title="實際應用"></a>實際應用</h2><h3 id="應用一：解決對象-Obj-中key重複-但是表示不同訊息的情況"><a href="#應用一：解決對象-Obj-中key重複-但是表示不同訊息的情況" class="headerlink" title="應用一：解決對象 Obj 中key重複 但是表示不同訊息的情況"></a>應用一：解決對象 Obj 中key重複 但是表示不同訊息的情況</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 對象對於相同的key的訊息會進行覆蓋</span></span><br><span class="line"><span class="keyword">const</span> grade = &#123;</span><br><span class="line">     zhangsan :&#123;</span><br><span class="line">         address : <span class="string">&quot;xxx&quot;</span> , tel : <span class="string">&quot;111&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    lisi :&#123;</span><br><span class="line">         address : <span class="string">&quot;yyy&quot;</span> , tel : <span class="string">&quot;222&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    lisi :&#123;</span><br><span class="line">         address : <span class="string">&quot;zzz&quot;</span> , tel : <span class="string">&quot;333&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span> (grade) <span class="comment">// &#123;zhangsan:&#123;address:&quot;xxx&quot;,tel:&quot;111&quot;&#125;,lisi:&#123;address:&quot;zzz&quot;,tel:&quot;333&quot;&#125;&#125; </span></span><br><span class="line"><span class="comment">// 通過變量構建對象</span></span><br><span class="line"><span class="keyword">const</span> stu1 = <span class="string">&quot;lisi&quot;</span> </span><br><span class="line"><span class="keyword">const</span> stu2 = <span class="string">&quot;lisi&quot;</span> </span><br><span class="line"><span class="keyword">const</span> grade = &#123;</span><br><span class="line">    [stu1]:&#123;</span><br><span class="line">        address : <span class="string">&quot;yyy&quot;</span> , tel : <span class="string">&quot;222&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    [stu2]:&#123;</span><br><span class="line">        address : <span class="string">&quot;zzz&quot;</span> , tel : <span class="string">&quot;333&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span> . log (grade) <span class="comment">// &#123;lisi:&#123;address:&quot;zzz&quot;,tel:&quot;333&quot;&#125;&#125; </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// es6通過Symbol解決key相同，訊息不同情況</span></span><br><span class="line"> <span class="keyword">const</span> stu1 = <span class="title class_">Symbol</span> ( <span class="string">&quot;lisi&quot;</span> )</span><br><span class="line"> <span class="keyword">const</span> stu2 = <span class="title class_">Symbol</span> ( <span class="string">&quot;lisi&quot;</span> )</span><br><span class="line"> <span class="keyword">const</span> grade = &#123;</span><br><span class="line">    [stu1]:&#123;</span><br><span class="line">        address : <span class="string">&quot;yyy&quot;</span> , tel : <span class="string">&quot;222&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    [stu2]:&#123;</span><br><span class="line">        address : <span class="string">&quot;zzz&quot;</span> , tel : <span class="string">&quot;333&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span> (grade) <span class="comment">// &#123;Symbol(lisi):&#123;address:&quot;yyy&quot;,tel:&quot;222&quot;&#125;,Symbol(lisi):&#123;address:&quot;zzz&quot;,tel:&quot;333&quot;&#125;&#125; </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span> (grade[stu1]) <span class="comment">// &#123;address:&quot;yyy&quot;,tel:&quot;222&quot;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="應用二：保護-Class-中的部分屬性"><a href="#應用二：保護-Class-中的部分屬性" class="headerlink" title="應用二：保護 Class 中的部分屬性"></a>應用二：保護 <strong>Class</strong> 中的部分屬性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定義基本類和類中方法調用</span></span><br><span class="line"><span class="keyword">class</span>  <span class="title class_">User</span> &#123;</span><br><span class="line">     <span class="title function_">constructor</span> ( name )&#123;</span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line">    getName ()&#123;</span><br><span class="line">         <span class="keyword">return</span>  <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span>  <span class="title class_">User</span> ( <span class="string">&quot;lilei&quot;</span> )</span><br><span class="line"> <span class="variable language_">console</span> . log (user. getName ()) <span class="comment">// lilei </span></span><br><span class="line"><span class="comment">// 不同循環遍歷方式獲取類內部屬性，根據是否可以獲取Symbol作為key的情況</span></span><br><span class="line"><span class="keyword">const</span> sym = <span class="title class_">Symbol</span> ( <span class="string">&quot;AILI&quot;</span> )</span><br><span class="line"> <span class="keyword">class</span>  <span class="title class_">User</span> &#123;</span><br><span class="line">     <span class="title function_">constructor</span> ( name )&#123;</span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">         <span class="variable language_">this</span>[sym] = <span class="string">&quot;AILI.com&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    getName ()&#123;</span><br><span class="line">         <span class="keyword">return</span>  <span class="variable language_">this</span>.<span class="property">name</span> + <span class="variable language_">this</span> [sym]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span>  <span class="title class_">User</span> ( <span class="string">&quot;lilei&quot;</span> )</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(user. getName ()) <span class="comment">// lileiAILI.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通過for...in 無法遍歷到Symbol屬性</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> key <span class="keyword">in</span> user)&#123;</span><br><span class="line">     <span class="variable language_">console</span> . log (key) <span class="comment">// name</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同樣不能獲取到Symbol屬性</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> key <span class="keyword">of</span>  <span class="title class_">Object</span> . keys (user))&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="property">log</span> (key) <span class="comment">// name</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只能取到Symbol屬性</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> key <span class="keyword">of</span>  <span class="title class_">Object</span> . getOwnPropertySymbols (user))&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="property">log</span> (key) <span class="comment">// Symbol(AILI)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 即能獲取到普通屬性，又能獲取到Symbol屬性</span></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> key <span class="keyword">of</span>  <span class="title class_">Reflect</span> . ownKeys (user))&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="property">log</span> (key) <span class="comment">// name Symbol(AILI) </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="應用三：消除魔法字符串（比較長或者難以辨認，容易出錯的字符串）"><a href="#應用三：消除魔法字符串（比較長或者難以辨認，容易出錯的字符串）" class="headerlink" title="應用三：消除魔法字符串（比較長或者難以辨認，容易出錯的字符串）"></a>應用三：消除魔法字符串（比較長或者難以辨認，容易出錯的字符串）</h3><p>真實開發情況</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getArea</span>(<span class="params">shape</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> area = <span class="number">0</span></span><br><span class="line">    <span class="keyword">switch</span>(shape)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;Triangle&quot;</span>:</span><br><span class="line">            area = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;Circle&quot;</span>:</span><br><span class="line">            area = <span class="number">2</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> area</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getArea</span>(<span class="string">&quot;Triangle&quot;</span>)) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>可以修改為下方情況</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在這個函數中，【Triangle】和【Circle】已經不重要，只要區分開即可，利用Symbol不一致性</span></span><br><span class="line"><span class="keyword">const</span> shapeType = &#123;</span><br><span class="line">     triangle : <span class="title class_">Symbol</span> (),</span><br><span class="line">     circle : <span class="title class_">Symbol</span> ()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span>  <span class="title function_">getArea</span> ( shape )&#123;</span><br><span class="line">     <span class="keyword">let</span> area = <span class="number">0</span> </span><br><span class="line">    <span class="keyword">switch</span> (shape)&#123;</span><br><span class="line">         <span class="keyword">case</span> shapeType.<span class="property">triangle</span> :</span><br><span class="line">            area = <span class="number">1</span> </span><br><span class="line">            <span class="keyword">break</span> </span><br><span class="line">        <span class="keyword">case</span> shapeType.<span class="property">circle</span> :</span><br><span class="line">            area = <span class="number">2</span> </span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> area</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getArea (shapeType.<span class="property">triangle</span> )) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>這樣代碼就會簡潔很多</p><p>以上整理</p><p>希望會有<strong>比較</strong>清楚的感覺</p><p><img src="https://media.tenor.com/yaB9PFnaEtgAAAAC/no-not-in-my-house.gif" alt="搖頭"></p><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://zh.javascript.info/symbol">symbol 类型</a></li><li><a href="https://segmentfault.com/a/1190000040207993">ES6中的新数据类型——Symbol</a></li><li><a href="https://www.cnblogs.com/yaopengfei/p/16030113.html">第十四节：ES6之Symbol、Set和WeakSet、Map和WeakMap详解</a></li><li><a href="https://juejin.cn/post/7107030052709072903#heading-0">一文搞清楚ES6新增数据结构 Symbol Map WeakMap Set WeakSet</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol">MDN-Symbol</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天要來研究 新增的數據結構 Symbol&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.tenor.com/CCHDqLErO7oAAAAd/haha-so.gif&quot; alt=&quot;無奈&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="https://supermarpig.github.io/tags/ES6/"/>
    
    <category term="ECMAScript 6" scheme="https://supermarpig.github.io/tags/ECMAScript-6/"/>
    
    <category term="JavaScript" scheme="https://supermarpig.github.io/tags/JavaScript/"/>
    
    <category term="每天一點點" scheme="https://supermarpig.github.io/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E/"/>
    
  </entry>
  
  <entry>
    <title>React 警告 Invalid DOM property for</title>
    <link href="https://supermarpig.github.io/2023/04/17/React-%E8%AD%A6%E5%91%8A-Invalid-DOM-property-for/"/>
    <id>https://supermarpig.github.io/2023/04/17/React-%E8%AD%A6%E5%91%8A-Invalid-DOM-property-for/</id>
    <published>2023-04-17T02:38:11.000Z</published>
    <updated>2023-04-17T02:53:08.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>警告不影響使用 ，但影響美觀</p><span id="more"></span><p><img src="https://www.jiyik.com/uploads/220621/I_2022062122313268a1fe.png" alt="Invalid"></p><p>來看看是哪兒出問題</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ⛔️ Warning: Invalid DOM property `for`. Did you mean `htmlFor`?</span></span><br><span class="line">      &lt;input type=<span class="string">&quot;checkbox&quot;</span> id=<span class="string">&quot;menu&quot;</span>&gt;&lt;/input&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;menu&quot;</span> <span class="attr">className</span>=<span class="string">&quot;line&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;menu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>問題是使用 for 屬性將label標籤與input綁定，<br>但 for 是 JavaScript 中的保留字。</p><blockquote><p>在React 中需要更換成 htmlFor 而不是for</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> id=<span class="string">&quot;menu&quot;</span>&gt;&lt;/input&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;menu&quot;</span> <span class="attr">className</span>=<span class="string">&quot;line&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;menu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>我們必須在React 中使用 htmlFor 的原因是因為 for 關鍵字是一個保留字- 它用於for 循環。</p><p>這也是使用 className 屬性而不是 class 的原因。<br>class這個詞是保留的，因為它被用來聲明一個ES6 類。</p><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.jiyik.com/tm/xwzj/web_1243.html">Invalid DOM</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;警告不影響使用 ，但影響美觀&lt;/p&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="React" scheme="https://supermarpig.github.io/tags/React/"/>
    
    <category term="開發筆記" scheme="https://supermarpig.github.io/tags/%E9%96%8B%E7%99%BC%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>少用vw來控制字體大小</title>
    <link href="https://supermarpig.github.io/2023/04/17/%E5%B0%91%E7%94%A8vw%E4%BE%86%E6%8E%A7%E5%88%B6%E5%AD%97%E9%AB%94%E5%A4%A7%E5%B0%8F/"/>
    <id>https://supermarpig.github.io/2023/04/17/%E5%B0%91%E7%94%A8vw%E4%BE%86%E6%8E%A7%E5%88%B6%E5%AD%97%E9%AB%94%E5%A4%A7%E5%B0%8F/</id>
    <published>2023-04-17T01:50:00.000Z</published>
    <updated>2023-04-17T02:05:44.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>控制文字大小用<code>vw</code> 來做RWD時，<br>發現按住ctrl+滾輪縮放時，文字大小竟然不會跟著變動</p><span id="more"></span><h2 id="vw、vh、vMin、vMax-的含義"><a href="#vw、vh、vMin、vMax-的含義" class="headerlink" title="vw、vh、vMin、vMax 的含義"></a>vw、vh、vMin、vMax 的含義</h2><ul><li>vw、vh、vMin、vMax 是一種單位，也是相對單位。<br>它相對的不是父節點或者頁面的根節點。<br>而是由螢幕（Viewport）大小來決定的，單位 1，代表類似於 1%。</li></ul><p>螢幕( Viewport )是你的瀏覽器實際顯示內容的區域—，<br>換句話說是你的不包括工具欄和按鈕的網頁瀏覽器。</p><ul><li>vw：螢幕寬度的百分比（1vw 代表螢幕的寬度為 1%）</li><li>vh：螢幕高度的百分比</li><li>vMin：當前 vw 和 vh 中較小的一個值</li><li>vMax：當前 vw 和 vh 中較大的一個值</li></ul><h2 id="vw、vh-與-百分比的區別"><a href="#vw、vh-與-百分比的區別" class="headerlink" title="vw、vh 與% 百分比的區別"></a>vw、vh 與% 百分比的區別</h2><p>（1）% 是相對於父元素的大小設定的比率，vw、vh 是視窗大小決定的。</p><p>（2）vw、vh 優勢在於能夠直接獲取高度，而用 % 在沒有設置 body 高度的情況下，是無法正確獲得可視區域的高度的，所以這是挺不錯的優勢。</p><h2 id="vMin、vMax-用處"><a href="#vMin、vMax-用處" class="headerlink" title="vMin、vMax 用處"></a>vMin、vMax 用處</h2><p>做移動頁面開發時，如果使用 vw、wh 設置字體大小（比如 5vw），在豎屏和橫屏狀態下顯示的字體大小是不一樣的。</p><p>由於 vMin 和 vMax 是當前較小的 vw 和 vh 和當前較大的 vw 和 vh。這裡就可以用到 vMin 和 vMax。使得文字大小在橫豎屏下保持一致。</p><h2 id="瀏覽器兼容性"><a href="#瀏覽器兼容性" class="headerlink" title="瀏覽器兼容性"></a>瀏覽器兼容性</h2><p>（1）桌面 PC</p><ul><li>Chrome：自 26 版起就完美支持（2013年2月）</li><li>Firefox：自 19 版起就完美支持（2013年1月）</li><li>Safari：自 6.1 版起就完美支持（2013年10月）</li><li>Opera：自 15 版起就完美支持（2013年7月）</li><li>IE：自 IE10 起（包括 Edge）到現在還只是部分支持（不支持 vmax，同時  vm 代替 vmin）</li></ul><p>（2）移動設備</p><ul><li>Android：自 4.4 版起就完美支持（2013年12月）</li><li>iOS：自 iOS8 版起就完美支持（2014年9月）</li></ul><hr><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>看了一下網路上的文章</p><p>都比較建議用 <code>rem</code> or <code>em</code><br>來當文字的縮放尺寸<br>也有少部分的說明用 <code>%</code>也可以<br>就是沒有說用<code>vw</code> or <code>vh</code></p><p>主要原因可能就是它有可能會失效!!</p><p>如果真的想要使用<code>vw</code> 來配合控制文字大小</p><p>可以使用 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/clamp">CSS clamp()</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">clamp</span>(<span class="number">1rem</span>, <span class="number">3vw</span>, <span class="number">2rem</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/clamp">MDN-clamp()</a></p></li><li><p><a href="https://www.hoeser.dev/webdev-sins/2022-02-07-vw-font-size/">Don’t use vw for font sizes</a></p></li><li><p><a href="https://www.reddit.com/r/css/comments/eahhvg/is_it_a_good_habit_to_use_vw_for_font_size_and/">Is it a good habit to use vw for font size and % for padding?</a></p></li><li><p><a href="https://blog.csdn.net/zhangchen124/article/details/87710579">font-size用VW来写的方法</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;控制文字大小用&lt;code&gt;vw&lt;/code&gt; 來做RWD時，&lt;br&gt;發現按住ctrl+滾輪縮放時，文字大小竟然不會跟著變動&lt;/p&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="開發筆記" scheme="https://supermarpig.github.io/tags/%E9%96%8B%E7%99%BC%E7%AD%86%E8%A8%98/"/>
    
    <category term="文字大小" scheme="https://supermarpig.github.io/tags/%E6%96%87%E5%AD%97%E5%A4%A7%E5%B0%8F/"/>
    
  </entry>
  
  <entry>
    <title>每天一點點，學習ES6(四)Spread syntax 展開運算子</title>
    <link href="https://supermarpig.github.io/2023/04/14/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E5%9B%9B-Spread-syntax/"/>
    <id>https://supermarpig.github.io/2023/04/14/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E5%9B%9B-Spread-syntax/</id>
    <published>2023-04-14T01:27:16.000Z</published>
    <updated>2023-04-14T03:41:26.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>I don’t wanna tell you what to do, but I know it works, so I say it as plainly as I can: Just write, keep on writing.<br>–&lt; <a href="https://robert.bearblog.dev/just-write/">Robert Birming</a> &gt;</p></blockquote><p>持續學習，努力努力</p><span id="more"></span><p>展開&#x2F;其餘運算子(Spread operator&#x2F;Rest operator)<br>都是 Javascript ES6 中的特性，兩者的符號雖然都是 <code>…</code> ，<br>但是在使用上略有差異。</p><blockquote><p>先來看看展開運算子<code>Spread operator</code></p></blockquote><p>先來看一下MDN 的官方定義 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">Spread syntax (…)</a></p><blockquote><p>展開語法(Spread syntax), 可以在<code>函數調用/數組構造</code>時, 將<code>數組表達式</code>或者<code>string</code>在語法層面展開；<br>還可以在<code>構造字面量</code>時, 將對象Obj表達式按key-value的方式展開。<br>(字面量一般指[1, 2, 3] 或者{name: “mdn”} 這種簡潔的構造方式)</p></blockquote><p>從定義我們可以了解到展開語法的<code>使用場景</code>如下</p><ul><li>函數調用</li><li>數組構造</li><li>構造字面量對象(ES2018)</li></ul><p>消化一下原文整理 <code>Spread syntax</code>的作用如下</p><ul><li>展開數組</li><li>展開字符串</li><li>展開對象 (只能用於<code>構造字面量對象</code>)</li></ul><h2 id="在函數中調用時使用"><a href="#在函數中調用時使用" class="headerlink" title="在函數中調用時使用"></a>在函數中調用時使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 展開數組</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span> (...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">// 1 2 3 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 展開字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span> (...<span class="string">&#x27;hello world&#x27;</span>) <span class="comment">// h e l l o   w o r l d</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 展開對象【無法使用，會報錯】</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span> (...&#123; a : <span class="number">1</span> &#125;) <span class="comment">// Uncaught TypeError</span></span><br></pre></td></tr></table></figure><h3 id="與rest參數對比"><a href="#與rest參數對比" class="headerlink" title="與rest參數對比"></a>與rest參數對比</h3><p>在函數調用時使用展開語法時，需要特別注意<code>數組</code>、<code>字符串</code>其實是被展開成了<code>參數序列</code>。</p><table><thead><tr><th align="center">語法</th><th align="center">用途</th></tr></thead><tbody><tr><td align="center">其餘參數 <code>...</code></td><td align="center">將一個不確定數量的參數集合在一個陣列中</td></tr><tr><td align="center">展開運算子 <code>...</code></td><td align="center">將陣列中的值展開為個別值</td></tr></tbody></table><p>舉個例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>  <span class="title function_">test</span> ( x, y, ...params ) &#123;</span><br><span class="line">   <span class="comment">// 定義一個函數時，使用的是rest參數</span></span><br><span class="line">  <span class="variable language_">console</span> . log (...params) <span class="comment">// 調用一個函數時，使用的是rest參數</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="作為apply的語法糖"><a href="#作為apply的語法糖" class="headerlink" title="作為apply的語法糖"></a>作為apply的語法糖</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numArr = [ <span class="number">1</span> , <span class="number">10</span> , <span class="number">2</span> , <span class="number">234</span> ]</span><br><span class="line"> <span class="title class_">Math</span>.<span class="property">max</span>.<span class="property">apply</span> ( <span class="literal">null</span> , numArr)</span><br><span class="line"> <span class="comment">// 完全等於</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="property">max</span> (...numArr) <span class="comment">// 將numArr展開為參數序列</span></span><br></pre></td></tr></table></figure><h3 id="在new的時候使用"><a href="#在new的時候使用" class="headerlink" title="在new的時候使用"></a>在new的時候使用</h3><p>因為new的時候是無法調用apply的，所以展開語法這個時候起到了很有用的腳色</p><p>先拿一個當例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>  <span class="title function_">Person</span> ( name, age, weight ) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">weight</span> = weight </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> blues = <span class="keyword">new</span> <span class="title class_">Person</span> ( <span class="string">&#x27;blues1&#x27;</span> , <span class="string">&#x27;16&#x27;</span> , <span class="string">&#x27;60&#x27;</span> )</span><br><span class="line"> <span class="comment">// 完全等價於let blues = new Person (...[ &#x27;blues1&#x27; , &#x27;16&#x27; , &#x27;60&#x27; ])</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>這在需要生產很多個的例子時，非常有用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>  <span class="title function_">Person</span> ( name, age, weight ) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">weight</span> = weight </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> persons = [[ <span class="string">&#x27;blues1&#x27;</span> , <span class="string">&#x27;16&#x27;</span> , <span class="string">&#x27;60&#x27;</span> ], [ <span class="string">&#x27;blues2&#x27;</span> , <span class="string">&#x27;16&#x27;</span> , <span class="string">&#x27;60&#x27;</span> ], [ <span class="string">&#x27;blues3&#x27;</span> , <span class="string">&#x27;16&#x27;</span> , <span class="string">&#x27;60&#x27;</span> ]]</span><br><span class="line"> <span class="keyword">let</span> createdPersons = &#123;&#125; </span><br><span class="line">persons.<span class="property">forEach</span> ( <span class="function"><span class="params">e</span> =&gt;</span>&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(e[<span class="number">0</span>]) </span><br><span class="line">  createdPersons[e[<span class="number">0</span>]] = <span class="keyword">new</span> <span class="title class_">Person</span> (...e) </span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="在數組構造時使用"><a href="#在數組構造時使用" class="headerlink" title="在數組構造時使用"></a>在數組構造時使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 展開數組</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [ <span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> ]</span><br><span class="line"> <span class="keyword">let</span> arr2 = [ <span class="number">0</span> , ...arr1, <span class="number">4</span> ] <span class="comment">// [0, 1, 2, 3, 4] </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 展開字符串</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [ <span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> , ... <span class="string">&#x27;456&#x27;</span> ] <span class="comment">// [1, 2, 3, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="代替將已有數組元素插入到新數組重的所有API"><a href="#代替將已有數組元素插入到新數組重的所有API" class="headerlink" title="代替將已有數組元素插入到新數組重的所有API"></a>代替將已有數組元素插入到新數組重的所有API</h3><blockquote><p>以往我們將已有數組的元素插入到新數組的中，<br>需要藉用一些API例如<code>push</code>&#x2F;<code>unshift</code>&#x2F;<code>splice</code>&#x2F;<code>concat</code>，<br>現在我們使用<code>展開語法</code>可以對上述api進行替換。<br>需要特別強調的是，這在<code>創建新數組</code>的時候才比較方便</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [ <span class="number">4</span> , <span class="number">5</span> ]</span><br><span class="line"> <span class="keyword">let</span> arr2 = [ <span class="number">6</span> , <span class="number">7</span> , <span class="number">8</span> ]</span><br><span class="line"> <span class="comment">// 在數組任意位置增加元素</span></span><br><span class="line"><span class="keyword">let</span> newArr1 = [ <span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> , ...arr] <span class="comment">// [1, 2, 3, 4, 5] </span></span><br><span class="line"><span class="keyword">let</span> newArr2 = [...arr, <span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> ] <span class="comment">// [4, 5, 1, 2, 3] </span></span><br><span class="line"><span class="keyword">let</span> newArr3 = [ <span class="number">1</span> , ...arr, <span class="number">2</span> , <span class="number">3</span> ] <span class="comment">// [1, 4, 5, 2, 3] </span></span><br><span class="line"><span class="keyword">let</span> newArr4 = [ <span class="number">1</span> , <span class="number">2</span> , ...arr,<span class="number">3</span> ] <span class="comment">// [1, 2, 4, 5, 3] </span></span><br><span class="line"><span class="comment">// 連接兩個數組</span></span><br><span class="line"><span class="keyword">let</span> newArr5 = [...arr, ...arr2] <span class="comment">// [4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure><p>如果是對<code>原有</code>的數組進行操作，<br>原有API+在函數調用中使用展開語法比較方便</p><p>但通常都不建議修改原數組</p><h3 id="實現對數組的淺拷貝-Array"><a href="#實現對數組的淺拷貝-Array" class="headerlink" title="實現對數組的淺拷貝 Array"></a>實現對數組的淺拷貝 Array</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; a : <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">let</span> arr = [ <span class="number">2</span> , <span class="number">1</span> , <span class="string">&#x27;的&#x27;</span> , obj]</span><br><span class="line"> <span class="comment">// 在數組任意位置增加元素</span></span><br><span class="line"><span class="keyword">let</span> newArr = [...arr] <span class="comment">// [2, 1, &#x27;的&#x27;, &#123;a: 1&#125;] </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但僅僅是淺拷貝，新數組中的&#123;a:1&#125;與obj還是指向了相同的地址</span></span><br><span class="line">newArr[ <span class="number">3</span> ]. a = <span class="number">2</span> </span><br><span class="line"><span class="variable language_">console</span>.<span class="property">log</span> (obj) <span class="comment">// &#123;a: 2&#125;</span></span><br></pre></td></tr></table></figure><h2 id="在構造字面量對象時使用"><a href="#在構造字面量對象時使用" class="headerlink" title="在構造字面量對象時使用"></a>在構造字面量對象時使用</h2><h3 id="實現對象的淺拷貝-Object"><a href="#實現對象的淺拷貝-Object" class="headerlink" title="實現對象的淺拷貝 Object"></a>實現對象的淺拷貝 Object</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 遍歷let newObj = &#123;&#125;</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; a : <span class="string">&#x27;10&#x27;</span> , b : &#123; c : <span class="number">10</span> &#125;, d : [ <span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> ]&#125; </span><br><span class="line"> <span class="keyword">for</span> ( <span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123; </span><br><span class="line">  newObj[key] = obj[key] </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 2.使用assign let newObj1 = Object . assign (&#123;&#125;, obj)</span></span><br><span class="line"></span><br><span class="line"> <span class="variable language_">console</span>.<span class="property">log</span> (newObj) <span class="comment">//&#123;a: &#x27;10&#x27;, b: &#123;…&#125;, d: Array(3)&#125;</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="property">log</span> (newObj1)</span><br></pre></td></tr></table></figure><blockquote><p>使用展開語法實現</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newObj2 = &#123;...obj&#125; <span class="comment">//&#123;a: &#x27;10&#x27;, b: &#123;…&#125;, d: Array(3)&#125;</span></span><br></pre></td></tr></table></figure><h2 id="常見用途-—-將可迭代-literable-的物件轉為陣列"><a href="#常見用途-—-將可迭代-literable-的物件轉為陣列" class="headerlink" title="常見用途  — 將可迭代 (literable) 的物件轉為陣列"></a>常見用途  — 將可迭代 (literable) 的物件轉為陣列</h2><p>Javascript 中可迭代的物件有 String, Array, TypedArray, Map, Set 物件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;emma&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> spreadName = [...name];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(spreadName)  <span class="comment">// [&#x27;e&#x27;,&#x27;m&#x27;,&#x27;m&#x27;,&#x27;a&#x27;]</span></span><br></pre></td></tr></table></figure><hr><h2 id="其餘運算子-Rest-operator"><a href="#其餘運算子-Rest-operator" class="headerlink" title="其餘運算子(Rest operator)"></a>其餘運算子(Rest operator)</h2><blockquote><p>其餘參數之所以被創造就是要用來取代ES5的<code>arguments</code>物件</p></blockquote><p>ES6之前 要將 arguments 轉為 Array<br>很麻煩要打很多東西，例子如下，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">result</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> arg = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">result</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>在ES6之前只有arguments物件可以使用時，可能還需要透過一些手法處理後才能使用陣列的方法，但ES6之後有了其餘參數一切都變得省事許多！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">result</span>(<span class="params">...a</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> arg = a</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">result</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p><font size=9> 484清楚很多 </font></p><p><img src="https://media.tenor.com/UVmpVqlpVhQAAAAd/yess-yes.gif" alt="yes"></p><h3 id="常見用途-1-—-其餘參數-Rest-parameters"><a href="#常見用途-1-—-其餘參數-Rest-parameters" class="headerlink" title="常見用途 1 — 其餘參數 (Rest parameters)"></a>常見用途 1 — 其餘參數 (Rest parameters)</h3><p>用於想要傳入一個不確定數量的值給函式作為參數：<br><code>須注意在傳入函式時，必須是參數中的最後一位，而且參數中只能有一個其餘參數</code></p><ul><li>傳入多個參數：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">many</span>(<span class="params">x,y, ...z</span>)&#123; <span class="comment">// 指定了兩個參數和一個剩餘參數</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x:&#x27;</span>,x);    <span class="comment">// 印出 x</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;y:&#x27;</span>,y);    <span class="comment">// 印出 y</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;z:&#x27;</span>,z);    <span class="comment">// 印出剩餘參數 z</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">many</span>(<span class="string">&#x27;emma&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;years&#x27;</span>, <span class="string">&#x27;old&#x27;</span>);</span><br><span class="line"><span class="comment">// x: emma</span></span><br><span class="line"><span class="comment">// y: is</span></span><br><span class="line"><span class="comment">// z: [18,&#x27;years&#x27;,&#x27;old&#x27;]  // 後面剩下的被組成一個陣列了</span></span><br></pre></td></tr></table></figure><blockquote><p>即使只有傳入一個值，也會被組成陣列：</p></blockquote><blockquote><p>如果沒有傳入值，就會成為一個空的陣列，而不是 undefined：</p></blockquote><h3 id="常見用途-2-—-解構賦值-destructuring"><a href="#常見用途-2-—-解構賦值-destructuring" class="headerlink" title="常見用途 2 — 解構賦值 (destructuring)"></a>常見用途 2 — 解構賦值 (destructuring)</h3><p>解構賦值可以想像成<code>鏡像</code>的方式來進行賦值，</p><ul><li>一般的解構陣列：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a,b] = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>其餘運算子解構陣列：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, ...b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// [2, 3]</span></span><br></pre></td></tr></table></figure><hr><ul><li>一般解構物件：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, ...b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// [2, 3]</span></span><br></pre></td></tr></table></figure><ul><li>其餘運算子解構物件 ：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a, b, ...rest&#125; = &#123; <span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>, <span class="attr">d</span>:<span class="number">4</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rest); <span class="comment">// &#123;c:3, d:4&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果和其餘參數出現一樣的狀況，數量不相等時，也會成為空的陣列：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [c, ...d] = [<span class="number">1</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d); <span class="comment">// []</span></span><br></pre></td></tr></table></figure><h2 id="總結與差異-Summary-amp-Differences"><a href="#總結與差異-Summary-amp-Differences" class="headerlink" title="總結與差異 Summary&amp;Differences"></a>總結與差異 Summary&amp;Differences</h2><p>展開運算子的概念可以想成是一種灑進去的感覺，<br>把陣列或是可迭代的物件展開成一個一個獨立的值，<br>再灑進使用他的地方。<br>而其餘運算子則是 <mark> 集合剩下來的值組合成陣列&#96;</mark>，<br>讓我們可以傳遞未知數量的參數至函式中</p><p><img src="https://media.tenor.com/2ltFTMd5OToAAAAC/i-love-you-boo.gif" alt="love"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><p><a href="https://medium.com/itsems-frontend/javascript-es6-spread-rest-operator-de8e0e020792">Javascript ES6 中的展開&#x2F;其餘運算子(Spread operator&#x2F;Rest operator)</a></p></li><li><p><a href="https://segmentfault.com/a/1190000016071130">ES6指北【5】——展開語法(spread syntax)</a></p></li><li><p><a href="https://juejin.cn/post/7106662697562800164">重學ES6-ES12(四)函數的補充展開語法</a></p></li><li><p><a href="https://medium.com/@luke_smaki/javascript-es6-spread-operator-and-rest-parameters-b3e89d112281">JavaScript ES6: Spread Operator and Rest Parameters</a></p></li><li><p><a href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/rest_spread.html">展開運算符與其餘運算符</a></p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">MDN-Spread syntax (…)</a></p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters">MDN-Rest parameters</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;I don’t wanna tell you what to do, but I know it works, so I say it as plainly as I can: Just write, keep on writing.&lt;br&gt;–&amp;lt; &lt;a href=&quot;https://robert.bearblog.dev/just-write/&quot;&gt;Robert Birming&lt;/a&gt; &amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;持續學習，努力努力&lt;/p&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="https://supermarpig.github.io/tags/ES6/"/>
    
    <category term="ECMAScript 6" scheme="https://supermarpig.github.io/tags/ECMAScript-6/"/>
    
    <category term="JavaScript" scheme="https://supermarpig.github.io/tags/JavaScript/"/>
    
    <category term="每天一點點" scheme="https://supermarpig.github.io/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown 語法大補帖</title>
    <link href="https://supermarpig.github.io/2023/04/13/MarkDown-%E8%AA%9E%E6%B3%95/"/>
    <id>https://supermarpig.github.io/2023/04/13/MarkDown-%E8%AA%9E%E6%B3%95/</id>
    <published>2023-04-13T07:06:25.000Z</published>
    <updated>2023-04-19T04:10:08.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>找了很多語法教學，不如整理一篇常用的</p><span id="more"></span><p>Markdown 的目標是實現「易讀易寫」，並強調它的「可讀性」，因此 Markdown 的語法全由標點符號所組成，並經過嚴謹慎選，是為了讓它們看起來就像所要表達的意思；以下是 Markdown 大部分的語法。</p><h2 id="標題"><a href="#標題" class="headerlink" title="標題"></a>標題</h2><p>為了使段落展示的更加清晰，Markdown中設置了多級標題的表達形式，級別用#來表示，幾個#就表示幾級標題，代碼形式如下：</p><p><font color="red">注意#後要有一個空格</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 等級一標題</span><br><span class="line">## 等級二標題</span><br><span class="line">### 等級三標題</span><br><span class="line">#### 等級四標題</span><br><span class="line">##### 等級五標題</span><br><span class="line">###### 等級六標題</span><br></pre></td></tr></table></figure><blockquote><p>展示畫面 ↓</p></blockquote><h1 id="等級一標題"><a href="#等級一標題" class="headerlink" title="等級一標題"></a>等級一標題</h1><h2 id="等級二標題"><a href="#等級二標題" class="headerlink" title="等級二標題"></a>等級二標題</h2><h3 id="等級三標題"><a href="#等級三標題" class="headerlink" title="等級三標題"></a>等級三標題</h3><h4 id="等級四標題"><a href="#等級四標題" class="headerlink" title="等級四標題"></a>等級四標題</h4><h5 id="等級五標題"><a href="#等級五標題" class="headerlink" title="等級五標題"></a>等級五標題</h5><h6 id="等級六標題"><a href="#等級六標題" class="headerlink" title="等級六標題"></a>等級六標題</h6><hr><h2 id="常用字體"><a href="#常用字體" class="headerlink" title="常用字體"></a>常用字體</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">*斜體字*</span><br><span class="line">**粗體字**</span><br><span class="line">***斜體兼粗體***</span><br><span class="line">~~刪除線~~</span><br><span class="line">_斜體2_</span><br><span class="line">__斜粗2__</span><br><span class="line">正常 ^上標^</span><br><span class="line">正常~下標~</span><br><span class="line">++底線++</span><br><span class="line">==螢光標記==</span><br></pre></td></tr></table></figure><blockquote><p>展示畫面 ↓</p></blockquote><p><em>斜體字</em><br><em>斜體2</em><br><strong>粗體字</strong><br><em><strong>斜體兼粗體</strong></em><br><strong>斜粗2</strong><br><del>刪除線</del><br>正常^上標^<br>正常<del>下標</del><br>++底線++<br>&#x3D;&#x3D;螢光標記&#x3D;&#x3D;  </p><hr><h2 id="文字顏色"><a href="#文字顏色" class="headerlink" title="文字顏色"></a>文字顏色</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;font color=#<span class="title class_">FF0000</span>&gt;紅色&lt;/font&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;green&quot;</span>&gt;</span>綠色<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span>  </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#0000FF</span>&gt;</span>深藍色<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>展示畫面 ↓</p></blockquote><p><font color=#FF0000>紅色</font><br><font color="green">綠色</font><br><font color=#0000FF>深藍色</font>  </p><p>或是在color&#x3D;<code>換成你想要的顏色</code></p><hr><h2 id="文字大小"><a href="#文字大小" class="headerlink" title="文字大小"></a>文字大小</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;font size=<span class="number">1</span>&gt;<span class="number">1</span>號字&lt;/font&gt;  </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">3</span>&gt;</span>3號字<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span>  </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">5</span>&gt;</span>5號字<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span>  </span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>展示畫面 ↓</p></blockquote><p><font size=1>1號字</font><br><font size=3>3號字</font><br><font size=5>5號字</font>  </p><hr><h2 id="文字格式"><a href="#文字格式" class="headerlink" title="文字格式"></a>文字格式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;font face=<span class="string">&quot;黑體&quot;</span>&gt;黑體&lt;/font&gt;  </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;標楷體&quot;</span>&gt;</span>標楷體<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span>  </span><br></pre></td></tr></table></figure><blockquote><p>展示畫面 ↓</p></blockquote><p><font face="黑體">黑體</font><br><font face="標楷體">標楷體</font>  </p><hr><h2 id="組合使用"><a href="#組合使用" class="headerlink" title="組合使用"></a>組合使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;font color=<span class="string">&quot;green&quot;</span> face=<span class="string">&quot;標楷體&quot;</span> size=<span class="number">5</span>&gt;綠色五號大小的標楷體&lt;/font&gt;  </span><br></pre></td></tr></table></figure><blockquote><p>展示畫面 ↓</p></blockquote><p><font color="green" face="標楷體" size=5>綠色五號大小的標楷體</font>  </p><p>到這還可以嗎?!</p><p><img src="https://media.tenor.com/LY_NJgzmL9MAAAAC/annoyed-so.gif" alt="暈倒"></p><hr><h2 id="文字螢光筆重點效果"><a href="#文字螢光筆重點效果" class="headerlink" title="文字螢光筆重點效果"></a>文字螢光筆重點效果</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mark&gt;文字螢光筆重點效果&lt;/mark&gt;</span><br></pre></td></tr></table></figure><blockquote><p>展示畫面 ↓</p></blockquote><p><mark>文字螢光筆重點效果</mark></p><hr><h2 id="添加背景色"><a href="#添加背景色" class="headerlink" title="添加背景色"></a>添加背景色</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">&quot;yellow&quot;</span>&gt;</span>給我黃色背景<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span>&lt;/table&gt;</span><br></pre></td></tr></table></figure><blockquote><p>展示畫面 ↓</p></blockquote><table><tr><td bgcolor="yellow">給我黃色背景</td></tr></table><hr><h2 id="文本注音"><a href="#文本注音" class="headerlink" title="文本注音"></a>文本注音</h2><blockquote><p>當遇到不會念的字可以添加注音</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ruby&gt;魑魅魍魎&lt;rt&gt;ㄔ ㄇㄟˋ ㄨㄤˇ ㄌ一ㄤˇ&lt;<span class="regexp">/rt&gt;&lt;/</span>ruby&gt;</span><br></pre></td></tr></table></figure><blockquote><p>展示畫面 ↓</p></blockquote><p><ruby>魑魅魍魎<rt>ㄔ ㄇㄟˋ ㄨㄤˇ ㄌ一ㄤˇ</rt></ruby></p><hr><h2 id="底線"><a href="#底線" class="headerlink" title="底線"></a>底線</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;底線&lt;/u&gt;</span><br></pre></td></tr></table></figure><blockquote><p>展示畫面 ↓</p></blockquote><p><u>底線</u></p><hr><h2 id="分隔線"><a href="#分隔線" class="headerlink" title="分隔線"></a>分隔線</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line">---</span><br><span class="line"><span class="number">2.</span></span><br><span class="line">***</span><br><span class="line"><span class="number">3.</span></span><br><span class="line">- - -</span><br><span class="line"><span class="number">4.</span></span><br><span class="line">* * *</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>展示畫面 ↓</p></blockquote><ol><li></li></ol><hr><ol start="2"><li></li></ol><hr><ol start="3"><li></li></ol><hr><ol start="4"><li></li></ol><hr><blockquote><p>都是長的一樣 ，所以選順手的就可以了</p></blockquote><hr><h2 id="縮排-換行"><a href="#縮排-換行" class="headerlink" title="縮排+換行"></a>縮排+換行</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[tab]縮排 <span class="comment">//縮排</span></span><br><span class="line"></span><br><span class="line">今天  </span><br><span class="line">天氣  </span><br><span class="line">真好    <span class="comment">//換行→行末按兩個空格  産生斷行</span></span><br></pre></td></tr></table></figure><blockquote><p>展示畫面 ↓</p></blockquote><pre><code>縮排</code></pre><p>今天<br>天氣<br>真好</p><hr><h2 id="巢狀標號"><a href="#巢狀標號" class="headerlink" title="巢狀標號"></a>巢狀標號</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- 無序清單</span><br><span class="line">- 無序清單</span><br><span class="line">    - 無序清單子清單</span><br><span class="line">        - 無序清單子子清單</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> 有序清單</span><br><span class="line"><span class="number">2.</span> 有序清單</span><br><span class="line">    <span class="number">1.</span> 有序清單子清單</span><br><span class="line">        <span class="number">1.</span> 有序清單子子清單</span><br></pre></td></tr></table></figure><blockquote><p>展示如下↓</p></blockquote><ul><li>無序清單</li><li>無序清單<ul><li>無序清單子清單<ul><li>無序清單子子清單</li></ul></li></ul></li></ul><ol><li>有序清單</li><li>有序清單<ol><li>有序清單子清單<ol><li>有序清單子子清單</li></ol></li></ol></li></ol><hr><h2 id="區塊引用"><a href="#區塊引用" class="headerlink" title="區塊引用"></a>區塊引用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; 外層區塊</span><br><span class="line">&gt;&gt; 第<span class="number">1</span>層區塊</span><br><span class="line">&gt;&gt;&gt; 第<span class="number">2</span>層區塊</span><br><span class="line">&gt;&gt;&gt;&gt; 第<span class="number">3</span>層</span><br><span class="line">&gt;&gt;&gt;&gt;&gt; 第<span class="number">4</span>層</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt; 第<span class="number">5</span>層</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; <span class="number">6</span></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; <span class="number">7</span></span><br></pre></td></tr></table></figure><blockquote><p>展示如下↓</p></blockquote><blockquote><p>外層區塊</p><blockquote><p>第1層區塊</p><blockquote><p>第2層區塊</p><blockquote><p>第3層</p><blockquote><p>第4層</p><blockquote><p>第5層</p><blockquote><p>6</p><blockquote><p>7</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><hr><h2 id="文字超連結"><a href="#文字超連結" class="headerlink" title="文字超連結"></a>文字超連結</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[連結名稱](<span class="attr">https</span>:<span class="comment">//google.com &quot;游標顯示&quot;)</span></span><br><span class="line">[奇摩首頁](<span class="attr">https</span>:<span class="comment">//tw.yahoo.com/)</span></span><br><span class="line">[<span class="title class_">Google</span>首頁](<span class="attr">https</span>:<span class="comment">//www.google.com/)</span></span><br><span class="line">[<span class="title class_">Facebook</span>](<span class="attr">https</span>:<span class="comment">//www.facebook.com/)</span></span><br></pre></td></tr></table></figure><blockquote><p>展示如下↓</p></blockquote><p><a href="https://tw.yahoo.com/">奇摩首頁</a><br><a href="https://www.google.com/">Google首頁</a><br><a href="https://www.facebook.com/">Facebook</a>  </p><hr><h2 id="圖片"><a href="#圖片" class="headerlink" title="圖片"></a>圖片</h2><blockquote><p>圖片跟連結很像，只是前面增加一個<code>!</code><br>我最常用來放GIF圖</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![圖片名稱](網址 <span class="string">&quot;游標顯示&quot;</span>)</span><br><span class="line">![貓咪抱抱](<span class="attr">https</span>:<span class="comment">//media.tenor.com/wSJZSQqIHhUAAAAC/love-cats-cat.gif &quot;變態&quot;)</span></span><br></pre></td></tr></table></figure><blockquote><p>展示如下↓</p></blockquote><p><img src="https://media.tenor.com/wSJZSQqIHhUAAAAC/love-cats-cat.gif" alt="貓咪抱抱" title="變態"></p><hr><h2 id="圖片連結"><a href="#圖片連結" class="headerlink" title="圖片連結"></a>圖片連結</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[![圖片](圖片網址)](連結網址)</span><br><span class="line">[![谷哥](https://www.google.com/images/branding/googlelogo/1x/googlelogo_light_color_272x92dp.png)](https://www.google.com/)</span><br></pre></td></tr></table></figure><blockquote><p>展示如下↓</p></blockquote><p><a href="https://www.google.com/"><img src="https://www.google.com/images/branding/googlelogo/1x/googlelogo_light_color_272x92dp.png" alt="谷哥"></a></p><hr><h2 id="表格Table"><a href="#表格Table" class="headerlink" title="表格Table"></a>表格Table</h2><blockquote><p>MD中添加表格的方式比較單一，添加表格的時候可以控製文字的對齊方式：<br><code>-:</code>設置內容和標題欄居右對齊。<br><code>:-</code>設置內容和標題欄居左對齊。<br><code>:-:</code>設置內容和標題欄居中對齊。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">| 欄位<span class="number">1</span> | 欄位<span class="number">2</span> | 欄位<span class="number">3</span> |</span><br><span class="line">| :-- | --: |:--:|</span><br><span class="line">| 置左  | 置右 | 置中 |</span><br><span class="line">| 置左  | 置右 | 置中 |</span><br><span class="line">| 置左  | 置右 | 置中 |</span><br><span class="line">| 換行&lt;br&gt;換行| | |</span><br></pre></td></tr></table></figure><blockquote><p>展示如下↓</p></blockquote><table><thead><tr><th align="left">欄位1</th><th align="right">欄位2</th><th align="center">欄位3</th></tr></thead><tbody><tr><td align="left">置左</td><td align="right">置右</td><td align="center">置中</td></tr><tr><td align="left">置左</td><td align="right">置右</td><td align="center">置中</td></tr><tr><td align="left">置左</td><td align="right">置右</td><td align="center">置中</td></tr><tr><td align="left">換行<br>換行</td><td align="right"></td><td align="center"></td></tr></tbody></table><blockquote><p>如果想要在表格內換行 可以在文字中間增加 <strong><code>&lt;br&gt;</code></strong></p></blockquote><hr><h2 id="CheckBox"><a href="#CheckBox" class="headerlink" title="CheckBox"></a>CheckBox</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- [ ] uncheck</span><br><span class="line">- [x] check</span><br><span class="line">- [ ] uncheck</span><br><span class="line">- [x] check</span><br></pre></td></tr></table></figure><blockquote><p>展示如下↓</p></blockquote><ul><li><input disabled="" type="checkbox"> uncheck</li><li><input checked="" disabled="" type="checkbox"> check</li><li><input disabled="" type="checkbox"> uncheck</li><li><input checked="" disabled="" type="checkbox"> check</li></ul><hr><h2 id="數學公式"><a href="#數學公式" class="headerlink" title="數學公式"></a>數學公式</h2><blockquote><p>對於數學相關學者來說，通常需要編寫數學公式，在Markdown可以使用$$來作為公式塊，在其中進行Latex類型公式的輸入。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$y=x^<span class="number">2</span>+<span class="number">1</span>$</span><br><span class="line">$$y=x^<span class="number">2</span>+<span class="number">1</span>$$</span><br><span class="line"></span><br><span class="line">$$ y = \sum_&#123;i=n&#125;&#123;x_i&#125; $$</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\left[</span><br><span class="line">\begin&#123;matrix&#125;</span><br><span class="line">   <span class="number">1</span> &amp; <span class="number">2</span> &amp; <span class="number">3</span> \\\\</span><br><span class="line">   <span class="number">4</span> &amp; <span class="number">5</span> &amp; <span class="number">6</span> \\\\</span><br><span class="line">   <span class="number">7</span> &amp; <span class="number">8</span> &amp; <span class="number">9</span></span><br><span class="line">\end&#123;matrix&#125;</span><br><span class="line">\right] </span><br><span class="line">\tag&#123;n&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><blockquote><p>展示如下↓</p></blockquote><p>$y&#x3D;x^2+1$<br>$$y&#x3D;x^2+1$$</p><p>$$ y &#x3D; \sum_{i&#x3D;n}{x_i} $$</p><p>$$<br>\left[<br>\begin{matrix}<br>   1 &amp; 2 &amp; 3 \\<br>   4 &amp; 5 &amp; 6 \\<br>   7 &amp; 8 &amp; 9<br>\end{matrix}<br>\right]<br>\tag{n}<br>$$</p><hr><h2 id="註解"><a href="#註解" class="headerlink" title="註解"></a>註解</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">所有的腳註會自動放到整篇文章的末尾</span><br><span class="line"></span><br><span class="line">子曰：靠！點腳註能跳轉[^<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">[^<span class="number">1</span>]: 《論語》</span><br></pre></td></tr></table></figure><blockquote><p>展示如下↓</p></blockquote><p>所有的腳註會自動放到整篇文章的末尾</p><p>子曰：靠！點腳註能跳轉<a href="%E3%80%8A%E8%AB%96%E8%AA%9E%E3%80%8B">^1</a></p><hr><blockquote><p>其實還有很多東西可以放上來<br>但是小的我 能力不佳 還在研究學習中</p></blockquote><p><img src="https://media.tenor.com/ZFc20z8DItkAAAAd/facepalm-really.gif" alt="懊惱"></p><p><font size=8>以上 祝大家寫得順利 : )</font></p><hr><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><p><a href="https://ed521.github.io/2019/08/hexo-markdown/">[教學] 撰寫 Hexo 文章 - Markdown 語法大全</a></p></li><li><p><a href="https://blog.csdn.net/qq_35164554/article/details/120013432">Markdown骚操作</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;找了很多語法教學，不如整理一篇常用的&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="https://supermarpig.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="https://supermarpig.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="MarkDown" scheme="https://supermarpig.github.io/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>CSS 動畫 ：transition</title>
    <link href="https://supermarpig.github.io/2023/04/13/CSS%20%E5%8B%95%E7%95%AB%20%EF%BC%9Atransition/"/>
    <id>https://supermarpig.github.io/2023/04/13/CSS%20%E5%8B%95%E7%95%AB%20%EF%BC%9Atransition/</id>
    <published>2023-04-13T02:51:44.000Z</published>
    <updated>2023-04-13T07:11:10.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>日常開發遇到不會 就筆記</p></blockquote><span id="more"></span><h2 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h2><p><code>transition:all</code>是CSS 中的一個屬性，它控制元素在用戶交互或者更改樣式時發生動畫效果的速度。</p><p>它是 transition 屬性的簡寫，代表所有的可以過渡的CSS 屬性。</p><p>語法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">transition</span>: &lt;property&gt; &lt;duration&gt; &lt;timing-function&gt; &lt;delay&gt;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>property</code>是要過渡的CSS 屬性的名稱，如果使用all，則表示所有的可以過渡的屬性。</li><li><code>duration</code>是過渡效果的持續時間，以秒或毫秒為單位。</li><li><code>timing-function</code>是過渡效果的速度曲線，可以是<ul><li><code>linear（勻速）</code></li><li><code>ease（慢快慢）</code></li><li><code>ease-in（慢開始）</code></li><li><code>ease-out（慢結束）</code></li><li><code>ease-in-out（慢開始慢結束）</code></li></ul></li><li><code>delay</code>是過渡效果的延遲時間，以秒或毫秒為單位</li></ul><p>舉個例子</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">2s</span> ease-in-out <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>這意味著當對這個元素的樣式進行更改時，<br>所有的可以過渡的屬性將以2秒的時間、<br>慢開始慢結束的速度曲線、<br>0.5秒的延遲時間進行過渡</p></blockquote><p> 整理表格如下</p><table><thead><tr><th>名稱</th><th>說明</th></tr></thead><tbody><tr><td>property name</td><td>指定的屬性名稱</td></tr><tr><td>duration</td><td>轉場動畫持續的時間</td></tr><tr><td>timimg function</td><td>描述轉場時間的變化函式</td></tr><tr><td>delay</td><td>延遲執行轉場動畫的時間</td></tr></tbody></table><h2 id="transition-propert-屬姓名稱"><a href="#transition-propert-屬姓名稱" class="headerlink" title="transition-propert 屬姓名稱"></a>transition-propert 屬姓名稱</h2><p>定義哪些 CSS 屬性名稱要綁定 Transition 動畫。<br>transition-propert 有三種內建屬性：</p><ul><li>none : 無設定屬性，該值為預設值。</li><li>all : 綁定所有 CSS 屬性。</li><li>custom-ident : 依據 CSS 的 class 名稱指定屬性。</li></ul><p>而要是 <code>transition-propert</code> 的值長度與其他 <code>transition 屬性質</code>長度不符合時，多餘的值將會被自動忽略。</p><p>再舉個例子</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">transition-property</span>: opacity, left, top, width;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">2s</span>, <span class="number">4s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上面範例得知，property 屬性的值長度超過 duration 屬型的值長度時 duration 屬性會重複匹配 property屬性。<br>因此 top 的過場時間為 2s，width 的過場時間為 4s。</p><blockquote><p>要注意的一點是，transition 所綁定的 CSS 屬性必須是 可被計算之屬性。<br>舉例來說</p></blockquote><ul><li><p>可被計算屬性：</p><ul><li>width: 100px;</li><li>backgraound-color: #fff;</li><li>text-indent: 30px;</li><li>margin-left: -50%;</li></ul></li><li><p>不可被計算屬性：</p><ul><li>display: block;</li><li>test-aling: center;</li><li>vertical-align: middle;</li></ul></li></ul><p> <strong>484很簡單啊~~~</strong><br><img src="https://media.tenor.com/Is7pMDGXQrkAAAAd/ogvhs-nope.gif" alt="就是這樣"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><p><a href="https://ithelp.ithome.com.tw/articles/10240496">第四章、今晚，我想來點…雙重口感切換的 Transition</a></p></li><li><p><a href="https://dwatow.github.io/2018/01-01-iron-man-2018/iron-man-2018-day22/">前端新手村 Transition</a></p></li></ul><p>-<a href="https://medium.com/@lai0706/css3-%E5%8B%95%E7%95%AB-transitions-d0f41a4ea68b">講講 CSS3 動畫Transitions</a></p><p>-<a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/transition">MDN - transitions</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;日常開發遇到不會 就筆記&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="日常問題紀錄" scheme="https://supermarpig.github.io/tags/%E6%97%A5%E5%B8%B8%E5%95%8F%E9%A1%8C%E7%B4%80%E9%8C%84/"/>
    
    <category term="CSS" scheme="https://supermarpig.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>每天一點點，學習ES6(三) Tagged templates</title>
    <link href="https://supermarpig.github.io/2023/04/13/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E4%B8%89-Tagged-templates/"/>
    <id>https://supermarpig.github.io/2023/04/13/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E4%B8%89-Tagged-templates/</id>
    <published>2023-04-13T00:59:28.000Z</published>
    <updated>2023-04-13T06:53:51.310Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天來學習 <code>Tagged templates</code></p><span id="more"></span><p>在找資料的時候發現有兩種 templates</p><ul><li>Tagged templates</li><li>Tagged template literal</li></ul><blockquote><p>This unusual backtick syntax is a new JavaScript feature called a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates">tagged template literal</a>.</p></blockquote><h2 id="Template-Strings"><a href="#Template-Strings" class="headerlink" title="Template Strings"></a>Template Strings</h2><p>在ES6以前 ，組合字串上需要用冗長的加號不斷的拼湊。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name =<span class="string">&#x27;Cody&#x27;</span></span><br><span class="line"><span class="keyword">var</span> age  =<span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6以前</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hi 我是&quot;</span>+name +<span class="string">&quot;,今年&quot;</span>+age+<span class="string">&quot;歲&quot;</span>)  <span class="comment">//Hi 我是 Cody,今年18歲 </span></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi 我是<span class="subst">$&#123;name&#125;</span> ,今年<span class="subst">$&#123;age&#125;</span>歲`</span>)  <span class="comment">//Hi 我是 Cody,今年18歲 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>甚至 template strings 也可以利用 multi-line 的效果進而達到換行的效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES6以前</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hi 我是&quot;</span>+name +<span class="string">&quot;,\n今年&quot;</span>+age+<span class="string">&quot;歲&quot;</span>)  </span><br><span class="line"><span class="comment">//Hi 我是 Cody,</span></span><br><span class="line"><span class="comment">//今年18歲 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi 我是<span class="subst">$&#123;name&#125;</span> ,</span></span><br><span class="line"><span class="string">今年<span class="subst">$&#123;age&#125;</span>歲`</span>)</span><br><span class="line"><span class="comment">//Hi 我是 Cody,</span></span><br><span class="line"><span class="comment">//今年18歲 </span></span><br></pre></td></tr></table></figure><p>這樣清楚了嗎~<br><img src="https://media.tenor.com/BmCbsCskdA4AAAAM/omg-oh-my-god.gif" alt="茅塞頓開"></p><h2 id="Tagged-Template-Literal"><a href="#Tagged-Template-Literal" class="headerlink" title="Tagged Template Literal"></a>Tagged Template Literal</h2><p>簡單來說 就是另一種函数调用的一种特殊形式</p><p>直接舉個例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a, b, c,</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//這是一般函數的調用</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span>) <span class="comment">//Hello World undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Tagged Template Literal</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;why&quot;</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span></span><br><span class="line"><span class="comment">// [&#x27;Hello&#x27;, &#x27;Wo&#x27;, &#x27;rld&#x27;]</span></span><br><span class="line">foo<span class="string">`Hello<span class="subst">$&#123;name&#125;</span>Wo<span class="subst">$&#123;age&#125;</span>rld`</span><span class="comment">//(3)[&#x27;Hello&#x27;,&#x27;Wo&#x27;,&#x27;rld&#x27;,row:Array(3)] &#x27;Cody&#x27; 18</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>這樣的寫法 不太好理解<br>可以改成ES6 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Functions/rest_parameters">rest_parameters</a>的寫法<br>把變數都變成陣列，所以要使用變數時要記得解構出來，整體寫法範例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a, ...b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">&#125;</span><br><span class="line">foo<span class="string">`Hello<span class="subst">$&#123;name&#125;</span>Wo<span class="subst">$&#123;age&#125;</span>rld`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(3)[&#x27;Hello&#x27;,&#x27;Wo&#x27;,&#x27;rld&#x27;,row:Array(3)]</span></span><br><span class="line"><span class="comment">//(2) [&#x27;Cody&#x27;, 18]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>講那麼多 ，來點實際的案例會比較清楚</p><p><img src="https://media.tenor.com/BP70qe8X0J8AAAAC/crycat-crying-cat.gif" alt="OK"></p><h2 id="實際案例"><a href="#實際案例" class="headerlink" title="實際案例"></a>實際案例</h2><p>一開始並不會覺得厲害之處，平時工作中也不會用到，但是這些知識是有用的，在很多場景中會用到它。</p><h3 id="react的styled-components"><a href="#react的styled-components" class="headerlink" title="react的styled-components"></a>react的styled-components</h3><p>可以直接生成組件，動態生成樣式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Button</span> = styled.<span class="property">button</span><span class="string">`</span></span><br><span class="line"><span class="string">  background: <span class="subst">$&#123;props =&gt; props.primary ? <span class="string">&#x27;palevioletred&#x27;</span> : <span class="string">&#x27;white&#x27;</span>&#125;</span>;</span></span><br><span class="line"><span class="string">  color: <span class="subst">$&#123;props =&gt; props.primary ? <span class="string">&#x27;white&#x27;</span> : <span class="string">&#x27;palevioletred&#x27;</span>&#125;</span>;</span></span><br><span class="line"><span class="string">  font-size: 1em;</span></span><br><span class="line"><span class="string">  margin: 1em;</span></span><br><span class="line"><span class="string">  padding: 0.25em 1em;</span></span><br><span class="line"><span class="string">  border: 2px solid palevioletred;</span></span><br><span class="line"><span class="string">  border-radius: 3px;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多語言轉化-國際化處理"><a href="#多語言轉化-國際化處理" class="headerlink" title="多語言轉化(國際化處理)"></a>多語言轉化(國際化處理)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i18n<span class="string">`Welcome to <span class="subst">$&#123;siteName&#125;</span>, you are visitor number <span class="subst">$&#123;visitorNumber&#125;</span>!`</span></span><br><span class="line"><span class="comment">// &quot;歡迎訪問XXX，您是第XXXX位訪問者！&quot;</span></span><br></pre></td></tr></table></figure><h3 id="動態處理函數裡面內容的轉換"><a href="#動態處理函數裡面內容的轉換" class="headerlink" title="動態處理函數裡面內容的轉換"></a>動態處理函數裡面內容的轉換</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;鄭鐵&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sex&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;role&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;time&quot;</span>: <span class="number">1640678098887</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> invite = <span class="keyword">function</span> (<span class="params">arrs, nameExp, sexExp, roleExp, timeExp</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> strName = nameExp;</span><br><span class="line">    <span class="comment">// 性別處理</span></span><br><span class="line">    <span class="keyword">let</span> strSex = [<span class="string">&#x27;先生&#x27;</span>, <span class="string">&#x27;女士&#x27;</span>][sexExp];</span><br><span class="line">    <span class="comment">// 角色處理</span></span><br><span class="line">    <span class="keyword">const</span> role = &#123;</span><br><span class="line">        <span class="string">&quot;1&quot;</span>: <span class="string">&quot;選手&quot;</span>,</span><br><span class="line">        <span class="string">&quot;2&quot;</span>: <span class="string">&quot;裁判&quot;</span>,</span><br><span class="line">        <span class="string">&quot;3&quot;</span>: <span class="string">&quot;計分員&quot;</span>,</span><br><span class="line">        <span class="string">&quot;4&quot;</span>: <span class="string">&quot;攝影師&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> strRole = role[roleExp];</span><br><span class="line">    <span class="comment">// 日期處理</span></span><br><span class="line">    <span class="keyword">let</span> strTime = <span class="keyword">new</span> <span class="title class_">Date</span>(timeExp).<span class="title function_">toLocaleDateString</span>(<span class="literal">undefined</span>, &#123;</span><br><span class="line">        <span class="attr">year</span>: <span class="string">&#x27;numeric&#x27;</span>,</span><br><span class="line">        <span class="attr">month</span>: <span class="string">&#x27;long&#x27;</span>,</span><br><span class="line">        <span class="attr">day</span>: <span class="string">&#x27;numeric&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 輸出內容</span></span><br><span class="line">    <span class="keyword">let</span> output = [arrs[<span class="number">0</span>]];</span><br><span class="line"></span><br><span class="line">    [strName, strSex, strRole, strTime].<span class="title function_">forEach</span>(<span class="function">(<span class="params">str, index</span>) =&gt;</span> &#123;</span><br><span class="line">        output.<span class="title function_">push</span>(str, arrs[index + <span class="number">1</span>] || <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> content = invite<span class="string">`誠摯邀請<span class="subst">$&#123;data.name&#125;</span><span class="subst">$&#123;data.sex&#125;</span>作為<span class="subst">$&#123;data.role&#125;</span>於<span class="subst">$&#123;data.time&#125;</span>参加上海張江杯垂釣競技大賽。</span></span><br><span class="line"><span class="string">主辦方：上海市浦東釣魚協會`</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(content);</span><br></pre></td></tr></table></figure><blockquote><p>誠摯邀請鄧鐵先生作為選手於2021年12月28日參加上海張江杯垂釣競技大賽。<br>主辦方：上海市浦東釣魚協會</p></blockquote><p>以上都清楚了嗎</p><p>不清楚沒關係</p><p>我是很清楚了拉~</p><p><img src="https://media.tenor.com/SN8okO86hicAAAAM/angry-mad.gif" alt="生氣"></p><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><p><a href="https://www.zhangxinxu.com/wordpress/2021/12/js-tagged-templates/">JS 标签模板（Tagged templates）什么时候使用？</a></p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates">MDN-Template literals (Template strings)</a></p></li><li><p><a href="https://www.zhangxinxu.com/wordpress/2021/12/js-tagged-templates/">JS 标签模板（Tagged templates）什么时候使用？</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天來學習 &lt;code&gt;Tagged templates&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="https://supermarpig.github.io/tags/ES6/"/>
    
    <category term="ECMAScript 6" scheme="https://supermarpig.github.io/tags/ECMAScript-6/"/>
    
    <category term="JavaScript" scheme="https://supermarpig.github.io/tags/JavaScript/"/>
    
    <category term="每天一點點" scheme="https://supermarpig.github.io/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E/"/>
    
  </entry>
  
  <entry>
    <title>每天一點點，學習ES6(二) Var Let Const</title>
    <link href="https://supermarpig.github.io/2023/04/12/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E4%BA%8C-Var-Let-Const/"/>
    <id>https://supermarpig.github.io/2023/04/12/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E4%BA%8C-Var-Let-Const/</id>
    <published>2023-04-12T01:12:06.000Z</published>
    <updated>2023-04-12T02:28:25.942Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>今天看到很多面試題在問這三個的區別，所以來整理一下筆記</p></blockquote><span id="more"></span><h2 id="先來介紹var"><a href="#先來介紹var" class="headerlink" title="先來介紹var"></a>先來介紹<code>var</code></h2><ul><li>在Es5中，聲明變量的方式幾乎以 <strong>var</strong> 為準，從頭到尾 Var 到底  雖然很省事但還有一些明顯的問題</li></ul><p><img src="https://i.imgur.com/TV7vGiN.png" alt="驚訝"><br>(source:)<a href="https://i.imgur.com/TV7vGiN.png">網路</a></p><h2 id="var-有什麼缺點？"><a href="#var-有什麼缺點？" class="headerlink" title="var 有什麼缺點？"></a><font color=#FF0000>var</font> 有什麼缺點？</h2><ul><li><h3 id="語法允許重複宣告-Re-Declaring"><a href="#語法允許重複宣告-Re-Declaring" class="headerlink" title="語法允許重複宣告 (Re-Declaring)"></a>語法允許重複宣告 (Re-Declaring)</h3></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);     <span class="comment">// ReferenceError: x is not defined (註)</span></span><br><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);     <span class="comment">// undefined</span></span><br><span class="line">x = <span class="number">123</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);     <span class="comment">// 123</span></span><br><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);     <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><blockquote><p>註：以上這段程式如果完整執行，第一個 <code>console.log(x)</code>; 實際上會印出 <code>undefined</code> 而不是 <code>Error</code>，因為變數宣告有 Hoisting 效果。關於 Hoisting ，預計後續的文章再作詳細介紹，<code>本篇先單純關注 var 的問題</code>。</p></blockquote><p>一段很長的程式，我們可能不記得前面宣告過同名的變數，後面再次宣告時往往當成第一次宣告，容易疏忽造成小 Bug。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;John&#x27;</span>;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>( name === <span class="literal">undefined</span> )&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The first time to execute.&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>一個較好且普遍的程式編寫習慣：將需要宣告的變數集中在該作用域的一開始，並賦予初始值。</p></blockquote><hr><ul><li><h3 id="不支援區塊作用域-Block-Scope"><a href="#不支援區塊作用域-Block-Scope" class="headerlink" title="不支援區塊作用域 (Block Scope)"></a>不支援區塊作用域 (Block Scope)</h3></li></ul><p>舉個例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">var</span> name = <span class="string">&quot;Apple&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fun(): name=&quot;</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fun</span>();  <span class="comment">//fun():name=Apple</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由上面的例子看，在裡面用<code>var</code>宣告的<code>name</code> 會被外面的區域讀取到</p><h4 id="用-var-宣告的變數並不具-Block-Scope-效果"><a href="#用-var-宣告的變數並不具-Block-Scope-效果" class="headerlink" title="用 var 宣告的變數並不具 Block Scope 效果"></a>用 var 宣告的變數並不具 Block Scope 效果</h4><blockquote><p>簡單來說：<br>Block Scope 就是用大括號去定義範疇。</p></blockquote><p><img src="https://media.tenor.com/yzabDiVfgFsAAAAC/horrified-surprised.gif" alt="驚訝"></p><hr><ul><li><h3 id="不支援常數-Constant-特性"><a href="#不支援常數-Constant-特性" class="headerlink" title="不支援常數 (Constant) 特性"></a>不支援常數 (Constant) 特性</h3></li></ul><p>常數 (Constant) 指的是「固定不變的數值」。</p><p>在程式裡常需要宣告一些變數，但變數裡的值只需要作一次初始化，不需要也不希望在程式執行過程被更改，也就是我們希望這類變數具有常數性質。</p><p>例如數學 pi 為3.14 、後續不希望能更動這個數字。使用var 就不太行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pi = <span class="number">3.14</span>;</span><br><span class="line">pi = <span class="number">1234</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pi) <span class="comment">//1234 </span></span><br></pre></td></tr></table></figure><hr><h2 id="let-x2F-const-運用方式"><a href="#let-x2F-const-運用方式" class="headerlink" title="let &#x2F; const 運用方式"></a>let &#x2F; const 運用方式</h2><ul><li><p>let:</p><ul><li>從直觀的角度來說，let和var是沒有太大的區別的，都是用於聲明一個變量</li></ul></li><li><p>const:</p><ul><li>const關鍵字是constant的單詞的縮寫，表示常量、衡量的意思;</li><li>它表示保存的數據一旦被賦值，就不能被修改;</li><li>但是如果賦值的是引用類型，那麼可以通過引用找到對應的對象，修改對象的內容;</li></ul></li></ul><blockquote><p>注意:另外let、const不允許重複聲明變量;</p></blockquote><hr><h2 id="let-x2F-const作用域提升"><a href="#let-x2F-const作用域提升" class="headerlink" title="let&#x2F;const作用域提升"></a>let&#x2F;const作用域提升</h2><p>舉個例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo) <span class="comment">//foo</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">&quot;foo&quot;</span></span><br><span class="line"></span><br><span class="line">-------------------------------</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo) <span class="comment">//Uncaught ReferenceError: foo is not defined</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="string">&quot;foo&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Reference(引用)Error: Cannot access &#x27;foo&#x27; before initialization(初始化)</span></span><br><span class="line"><span class="comment">// let/const 他們沒有作用域提升</span></span><br><span class="line"><span class="comment">// foo雖然有被創建出來, 但是不能被訪問</span></span><br></pre></td></tr></table></figure><blockquote><p><code>作用域提升</code>: 能提前被訪問</p></blockquote><p>let、const沒有進行作用域提升，但是會在解析階段被創建出來。</p><h2 id="暫時性死區-TDZ"><a href="#暫時性死區-TDZ" class="headerlink" title="暫時性死區 TDZ"></a>暫時性死區 TDZ</h2><p>在ES6中，我們還有一個概念稱之為暫時性死區:</p><p>它表達的意思是在一個代碼中，使用let、const聲明的變量，在聲明之前，變量都是不可以訪問的;</p><p>我們將這種現象稱之為temporal dead zone(暫時性死區，TDZ);</p><h2 id="let-const-與window的關係"><a href="#let-const-與window的關係" class="headerlink" title="let const 與window的關係"></a>let const 與window的關係</h2><ul><li>全局通過var來聲明一個變量，事實上會在window上添加一個屬性</li></ul><blockquote><p>佔記憶體 !!能用但不優!!!</p></blockquote><ul><li>但是let、const是不會給window上添加任何屬性的。</li></ul><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p><img src="https://ithelp.ithome.com.tw/upload/images/20190923/20119924wIduk8VJxp.jpg" alt="var let const 差異"></p><p>總結 let 和 const 的重點：</p><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><ul><li>支援 Block Scope。</li><li>禁止同一層 Block 重複宣告變數。</li><li>不會產生 Global Scope 變數。</li></ul><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><ul><li>具備 let 的所有特性。</li><li>定義時必須初始化 (Initialization)。</li><li>後續不能更改值。</li></ul><hr><blockquote><p>應避免使用 var，改用 let 和 const</p></blockquote><hr><p>ES6 導入 let 和 const，改善 var 在變數宣告和管制上的不足，讓程式的變數控管可以更加嚴謹，減少出錯的機率。</p><p>對於let和const來說，是目前開發中推薦使用的</p><blockquote><ul><li>簡單整理如下<br>   <strong>變量不被更改</strong> → <code>const</code><br>   <strong>變量需要變動</strong> → <code>let</code></li></ul></blockquote><hr><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><p><a href="https://www.w3schools.com/js/js_variables.asp">JavaScript Variables</a></p></li><li><p><a href="https://juejin.cn/post/7105918550975447076">var let const的选择</a></p></li><li><p><a href="https://blog.techbridge.cc/2018/11/10/javascript-hoisting/">TechBridge：我知道你懂 hoisting，可是你了解到多深？</a></p></li><li><p><a href="https://juejin.cn/post/7105918550975447076">每天3分鐘，重學ES6-ES12(二)var let const的選擇</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;今天看到很多面試題在問這三個的區別，所以來整理一下筆記&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="https://supermarpig.github.io/tags/ES6/"/>
    
    <category term="ECMAScript 6" scheme="https://supermarpig.github.io/tags/ECMAScript-6/"/>
    
    <category term="JavaScript" scheme="https://supermarpig.github.io/tags/JavaScript/"/>
    
    <category term="每天一點點" scheme="https://supermarpig.github.io/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E/"/>
    
  </entry>
  
  <entry>
    <title>每天一點點，學習ES6(一) Enhanced Object Literals</title>
    <link href="https://supermarpig.github.io/2023/04/11/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E4%B8%80/"/>
    <id>https://supermarpig.github.io/2023/04/11/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E%EF%BC%8C%E5%AD%B8%E7%BF%92ES6-%E4%B8%80/</id>
    <published>2023-04-11T01:09:33.000Z</published>
    <updated>2023-04-11T03:11:37.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>沒事多複習，多複習沒事</p></blockquote><span id="more"></span><h3 id="為什麼學習ES6"><a href="#為什麼學習ES6" class="headerlink" title="為什麼學習ES6"></a>為什麼學習ES6</h3><blockquote><p>ES6的語法相信大家都爛熟於心，已經在開發中日常使用</p></blockquote><p>我知道螢幕前的你肯定都會了。</p><h2 id="ES6是ECMAScript-6的縮寫簡稱，這個好理解"><a href="#ES6是ECMAScript-6的縮寫簡稱，這個好理解" class="headerlink" title="ES6是ECMAScript 6的縮寫簡稱，這個好理解"></a>ES6是ECMAScript 6的縮寫簡稱，這個好理解</h2><blockquote><p>顧名思義，它是ECMAScript的第6個版本，也就是說它有更早的版本，以後還會有更多版本。  </p></blockquote><p>ES6也可以說是一個泛指，指5.1版本以後的JavaScript的下一代標準，涵蓋了ES2015,ES2016,ES2017等；亦指下一代JavaScript語言</p><h2 id="什麼是物件實字-Object-Literals"><a href="#什麼是物件實字-Object-Literals" class="headerlink" title="什麼是物件實字 (Object Literals)"></a>什麼是物件實字 (Object Literals)</h2><p>平常我們用大括號 ({}) 來建立物件的語法，就稱為物件實字 (Object Literals)。</p><p>以下例子是典型的物件實字語法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> player = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, </span><br><span class="line">    <span class="attr">age</span>: <span class="number">23</span>,</span><br><span class="line">    <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"> &#125;,</span><br><span class="line">    <span class="attr">language1</span>: <span class="string">&quot;JavaScript&quot;</span>,</span><br><span class="line">    <span class="attr">language2</span>: <span class="string">&quot;Java&quot;</span>,</span><br><span class="line">    <span class="attr">language3</span>: <span class="string">&quot;C&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="物件實字的語法重點"><a href="#物件實字的語法重點" class="headerlink" title="物件實字的語法重點"></a>物件實字的語法重點</h3><ul><li>用大括號表示。</li><li>裡面的屬性 (Properties) 用名值對 (name-value pairs) 表示。</li><li>多個屬性以逗號 (comma) 分隔。</li><li>宣告完後，還是可以再增加 Properties 進去。</li></ul><p style="text-align:center">到這裡都很輕鬆 </p><p><img src="https://ritchie.top/images/post/markdown.gif" alt="到這都很輕鬆! 耶"></p><h2 id="1-物件屬性初始化的語法簡寫"><a href="#1-物件屬性初始化的語法簡寫" class="headerlink" title="1. 物件屬性初始化的語法簡寫"></a>1. 物件屬性初始化的語法簡寫</h2><h3 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setNameAge</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">     <span class="attr">name</span>: name,</span><br><span class="line">  <span class="attr">age</span>: age</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title function_">setNameAge</span>(<span class="string">&quot;John&quot;</span>, <span class="number">23</span>) );   <span class="comment">// &#123;name: &quot;John&quot;, age: 23&#125;</span></span><br></pre></td></tr></table></figure><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setNameAge</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">     name,</span><br><span class="line">  age</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title function_">setNameAge</span>(<span class="string">&quot;John&quot;</span>, <span class="number">23</span>) );   <span class="comment">// &#123;name: &quot;John&quot;, age: 23&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>在 ES5 以前，必須把<strong>屬性名稱</strong>和<strong>進行賦值的變數名稱</strong>都標明清楚。<br>    ES6 提供更簡單的寫法。</p></blockquote><hr><h2 id="2-物件函式的語法簡寫"><a href="#2-物件函式的語法簡寫" class="headerlink" title="2.物件函式的語法簡寫"></a>2.物件函式的語法簡寫</h2><h3 id="ES5-1"><a href="#ES5-1" class="headerlink" title="ES5"></a>ES5</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setNameAge</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">`Hi, I am <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title function_">setNameAge</span>(<span class="string">&quot;John&quot;</span>, <span class="number">23</span>).<span class="title function_">sayHi</span>() ); <span class="comment">// &quot;Hi, I am John&quot;</span></span><br></pre></td></tr></table></figure><h3 id="ES6-1"><a href="#ES6-1" class="headerlink" title="ES6"></a>ES6</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setNameAge</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">`Hi, I am <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title function_">setNameAge</span>(<span class="string">&quot;John&quot;</span>, <span class="number">23</span>).<span class="title function_">sayHi</span>() ); <span class="comment">// &quot;Hi, I am John&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p>ES6 省略了<strong>function</strong> 和 <strong>:</strong></p></blockquote><h2 id="3-具運算性的屬性名稱"><a href="#3-具運算性的屬性名稱" class="headerlink" title="3. 具運算性的屬性名稱"></a>3. 具運算性的屬性名稱</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> name = <span class="string">&quot;yz&quot;</span></span><br><span class="line"> <span class="keyword">var</span> obj = &#123;</span><br><span class="line">  [name + <span class="number">123</span>]: <span class="string">&#x27;hehehehe&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123;yz123: &#x27;hehehehe&#x27;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>計算屬性名定義對象key的時候加上[]，可以動態定義對象名[]</p></blockquote><h2 id="解構-Destructuring"><a href="#解構-Destructuring" class="headerlink" title="解構 Destructuring"></a>解構 Destructuring</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><hr><ul><li><p>ES6中新增了一個從數組或對像中方便獲取數據的方法，稱之為解構Destructuring。</p></li><li><p>我們可以劃分為:數組的解構和對象的解構。</p></li></ul><hr><h3 id="數組結構"><a href="#數組結構" class="headerlink" title="數組結構"></a>數組結構</h3><hr><ul><li>數組的解構:<ul><li>基本解構過程</li><li>順序解構</li><li>解構出數組</li><li>默認值</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>]</span><br><span class="line"><span class="comment">// var item1 = names[0]</span></span><br><span class="line"><span class="comment">// var item2 = names[1]</span></span><br><span class="line"><span class="comment">// var item3 = names[2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 對數組的解構: []</span></span><br><span class="line"><span class="keyword">var</span> [item1, item2, item3] = names</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item1, item2, item3)</span><br><span class="line"><span class="comment">//  abc cba nba</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解構後面的元素</span></span><br><span class="line"><span class="keyword">var</span> [, , itemz] = names</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(itemz)</span><br><span class="line"><span class="comment">//  nba</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解構出一個元數，後面的元素放到一個新樹組中</span></span><br><span class="line"><span class="keyword">var</span> [itemX, ...newNames] = names</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(itemX, newNames)</span><br><span class="line"><span class="comment">// abc [&#x27;cba&#x27;, &#x27;nba&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构的默认值</span></span><br><span class="line"><span class="keyword">var</span> [itemA, itemB, itemC, itemD = <span class="string">&quot;aaa&quot;</span>] = names</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(itemD)</span><br><span class="line"><span class="comment">// aaa</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="對象結構"><a href="#對象結構" class="headerlink" title="對象結構"></a>對象結構</h3><hr><ul><li>對象的解構:<ul><li>基本解構過程</li><li>任意順序</li><li>重命名</li><li>默認值</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;yz&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">180</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 對象的解構: &#123;&#125;</span></span><br><span class="line"><span class="keyword">var</span> &#123; name, age, height &#125; = obj</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name, age, height)</span><br><span class="line"><span class="comment">// yz 25 180</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123; age &#125; = obj</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age)</span><br><span class="line"><span class="comment">// 25</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">name</span>: newName &#125; = obj</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newName)</span><br><span class="line"><span class="comment">// yz</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">address</span>: newAddress = <span class="string">&quot;台北市&quot;</span> &#125; = obj</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newAddress)</span><br><span class="line"><span class="comment">// 台北市</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">info</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">name</span>, info.<span class="property">age</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(obj)</span><br><span class="line"><span class="comment">// yz 25</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">&#123;name, age&#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bar</span>(obj)</span><br><span class="line"><span class="comment">// yz 25</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="應用場景"><a href="#應用場景" class="headerlink" title="應用場景"></a>應用場景</h2><hr><ul><li>解構目前在開發中使用是非常多的:<ul><li>比如在開發中拿到一個變量時，自動對其進行解構使用;</li><li>比如對函數的參數進行解構;</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;yz&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">24</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    <span class="comment">// es5</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>,obj.<span class="property">age</span>)</span><br><span class="line">    <span class="comment">// es6</span></span><br><span class="line">    <span class="keyword">const</span> &#123;name,age&#125; = obj</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name,age)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>(obj1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>ES6 提升了物件實字語法的簡潔性和靈活性，總共有 3 個部分的加強：</p><ul><li>物件屬性初始化的語法簡寫 (Shorthand for Initializing Properties)</li><li>物件函式的語法簡寫 (Shorthand for Writing Methods)</li><li>具運算性的屬性名稱 (Computed Properties and Object Literals)</li></ul><p>Enhanced Object Literal 是 ES6 中算滿簡單的新特性，唯一值得特別注意的是：透過 ES6 簡寫的物件函式，函數行為是傳統函數而非箭頭函數。</p><ul><li><p>字面量的增強方便我們寫對象屬性和方法時，少寫代碼</p></li><li><p>解構方便我們更容易的處理對像數組的屬性，少寫代碼</p></li></ul><p><img src="https://compote.slate.com/images/697b023b-64a5-49a0-8059-27b963453fb1.gif?crop=780,520,x0,y0&width=1280" alt="第一篇文章完成"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><p><a href="https://dev.to/sarah_chima/enhanced-object-literals-in-es6-a9d">Enhanced Object Literals in ES6 - DEV Community</a></p></li><li><p><a href="https://peter-chang.medium.com/es6-10-features-javascript-developer-must-know-98b9782bef44">[ES6] Javascript 開發者必須知道的 10 個新功能</a></p></li><li><p><a href="https://easonwang01.gitbooks.io/class/es6es7.html">ES6,ES7,ES8 · class - easonwang01 - GitBook</a></p></li><li><p><a href="https://juejin.cn/post/7105396296357249061">每天3分鐘，重學ES6</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;沒事多複習，多複習沒事&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="學習筆記" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/"/>
    
    <category term="web前端" scheme="https://supermarpig.github.io/categories/%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98/web%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="https://supermarpig.github.io/tags/ES6/"/>
    
    <category term="ECMAScript 6" scheme="https://supermarpig.github.io/tags/ECMAScript-6/"/>
    
    <category term="JavaScript" scheme="https://supermarpig.github.io/tags/JavaScript/"/>
    
    <category term="每天一點點" scheme="https://supermarpig.github.io/tags/%E6%AF%8F%E5%A4%A9%E4%B8%80%E9%BB%9E%E9%BB%9E/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇部落格文章</title>
    <link href="https://supermarpig.github.io/2023/04/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E9%83%A8%E8%90%BD%E6%A0%BC%E6%96%87%E7%AB%A0/"/>
    <id>https://supermarpig.github.io/2023/04/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E9%83%A8%E8%90%BD%E6%A0%BC%E6%96%87%E7%AB%A0/</id>
    <published>2023-04-10T05:45:37.000Z</published>
    <updated>2023-04-11T03:10:12.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>照著教學創網站 GOGO</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;照著教學創網站 GOGO&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
